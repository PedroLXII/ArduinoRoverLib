
Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00005550  000055e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  00800256  00800256  0000573a  2**0
                  ALLOC
  3 .stab         00001a88  00000000  00000000  0000573c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007dc  00000000  00000000  000071c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000440  00000000  00000000  000079a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001462  00000000  00000000  00007de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000928c  00000000  00000000  00009242  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003143  00000000  00000000  000124ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005c9b  00000000  00000000  00015611  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e40  00000000  00000000  0001b2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d1f  00000000  00000000  0001c0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000540b  00000000  00000000  0001de0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000600  00000000  00000000  00023216  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__ctors_end>
       4:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_1>
       8:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_2>
       c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      10:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      14:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      18:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      1c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_7>
      20:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      24:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      28:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      2c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      30:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      34:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      38:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      3c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      40:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_16>
      44:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      48:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__vector_18>
      4c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      50:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      54:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      58:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      5c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      60:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__vector_24>
      64:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__bad_interrupt>
      68:	a2 1e       	adc	r10, r18
      6a:	50 1e       	adc	r5, r16
      6c:	50 1e       	adc	r5, r16
      6e:	50 1e       	adc	r5, r16
      70:	50 1e       	adc	r5, r16
      72:	50 1e       	adc	r5, r16
      74:	50 1e       	adc	r5, r16
      76:	50 1e       	adc	r5, r16
      78:	ac 1e       	adc	r10, r28
      7a:	50 1e       	adc	r5, r16
      7c:	50 1e       	adc	r5, r16
      7e:	50 1e       	adc	r5, r16
      80:	50 1e       	adc	r5, r16
      82:	50 1e       	adc	r5, r16
      84:	50 1e       	adc	r5, r16
      86:	50 1e       	adc	r5, r16
      88:	ac 1e       	adc	r10, r28
      8a:	50 1e       	adc	r5, r16
      8c:	50 1e       	adc	r5, r16
      8e:	50 1e       	adc	r5, r16
      90:	50 1e       	adc	r5, r16
      92:	50 1e       	adc	r5, r16
      94:	50 1e       	adc	r5, r16
      96:	50 1e       	adc	r5, r16
      98:	b4 1e       	adc	r11, r20
      9a:	50 1e       	adc	r5, r16
      9c:	50 1e       	adc	r5, r16
      9e:	50 1e       	adc	r5, r16
      a0:	50 1e       	adc	r5, r16
      a2:	50 1e       	adc	r5, r16
      a4:	50 1e       	adc	r5, r16
      a6:	50 1e       	adc	r5, r16
      a8:	c3 1e       	adc	r12, r19
      aa:	50 1e       	adc	r5, r16
      ac:	50 1e       	adc	r5, r16
      ae:	50 1e       	adc	r5, r16
      b0:	50 1e       	adc	r5, r16
      b2:	50 1e       	adc	r5, r16
      b4:	50 1e       	adc	r5, r16
      b6:	50 1e       	adc	r5, r16
      b8:	b4 1e       	adc	r11, r20
      ba:	50 1e       	adc	r5, r16
      bc:	50 1e       	adc	r5, r16
      be:	50 1e       	adc	r5, r16
      c0:	50 1e       	adc	r5, r16
      c2:	50 1e       	adc	r5, r16
      c4:	50 1e       	adc	r5, r16
      c6:	50 1e       	adc	r5, r16
      c8:	ee 1e       	adc	r14, r30
      ca:	50 1e       	adc	r5, r16
      cc:	50 1e       	adc	r5, r16
      ce:	50 1e       	adc	r5, r16
      d0:	50 1e       	adc	r5, r16
      d2:	50 1e       	adc	r5, r16
      d4:	50 1e       	adc	r5, r16
      d6:	50 1e       	adc	r5, r16
      d8:	f9 1e       	adc	r15, r25
      da:	50 1e       	adc	r5, r16
      dc:	50 1e       	adc	r5, r16
      de:	50 1e       	adc	r5, r16
      e0:	50 1e       	adc	r5, r16
      e2:	50 1e       	adc	r5, r16
      e4:	50 1e       	adc	r5, r16
      e6:	50 1e       	adc	r5, r16
      e8:	76 1e       	adc	r7, r22
      ea:	50 1e       	adc	r5, r16
      ec:	50 1e       	adc	r5, r16
      ee:	50 1e       	adc	r5, r16
      f0:	50 1e       	adc	r5, r16
      f2:	50 1e       	adc	r5, r16
      f4:	50 1e       	adc	r5, r16
      f6:	50 1e       	adc	r5, r16
      f8:	89 1e       	adc	r8, r25
      fa:	50 1e       	adc	r5, r16
      fc:	50 1e       	adc	r5, r16
      fe:	50 1e       	adc	r5, r16
     100:	50 1e       	adc	r5, r16
     102:	50 1e       	adc	r5, r16
     104:	50 1e       	adc	r5, r16
     106:	50 1e       	adc	r5, r16
     108:	6a 1e       	adc	r6, r26
     10a:	50 1e       	adc	r5, r16
     10c:	50 1e       	adc	r5, r16
     10e:	50 1e       	adc	r5, r16
     110:	50 1e       	adc	r5, r16
     112:	50 1e       	adc	r5, r16
     114:	50 1e       	adc	r5, r16
     116:	50 1e       	adc	r5, r16
     118:	7d 1e       	adc	r7, r29
     11a:	50 1e       	adc	r5, r16
     11c:	50 1e       	adc	r5, r16
     11e:	50 1e       	adc	r5, r16
     120:	50 1e       	adc	r5, r16
     122:	50 1e       	adc	r5, r16
     124:	50 1e       	adc	r5, r16
     126:	50 1e       	adc	r5, r16
     128:	99 1e       	adc	r9, r25
     12a:	50 1e       	adc	r5, r16
     12c:	50 1e       	adc	r5, r16
     12e:	50 1e       	adc	r5, r16
     130:	50 1e       	adc	r5, r16
     132:	50 1e       	adc	r5, r16
     134:	50 1e       	adc	r5, r16
     136:	50 1e       	adc	r5, r16
     138:	99 1e       	adc	r9, r25
     13a:	50 1e       	adc	r5, r16
     13c:	50 1e       	adc	r5, r16
     13e:	50 1e       	adc	r5, r16
     140:	50 1e       	adc	r5, r16
     142:	50 1e       	adc	r5, r16
     144:	50 1e       	adc	r5, r16
     146:	50 1e       	adc	r5, r16
     148:	99 1e       	adc	r9, r25
     14a:	50 1e       	adc	r5, r16
     14c:	50 1e       	adc	r5, r16
     14e:	50 1e       	adc	r5, r16
     150:	50 1e       	adc	r5, r16
     152:	50 1e       	adc	r5, r16
     154:	50 1e       	adc	r5, r16
     156:	50 1e       	adc	r5, r16
     158:	99 1e       	adc	r9, r25
     15a:	50 1e       	adc	r5, r16
     15c:	50 1e       	adc	r5, r16
     15e:	50 1e       	adc	r5, r16
     160:	50 1e       	adc	r5, r16
     162:	50 1e       	adc	r5, r16
     164:	50 1e       	adc	r5, r16
     166:	50 1e       	adc	r5, r16
     168:	61 1e       	adc	r6, r17
     16a:	50 1e       	adc	r5, r16
     16c:	50 1e       	adc	r5, r16
     16e:	50 1e       	adc	r5, r16
     170:	50 1e       	adc	r5, r16
     172:	50 1e       	adc	r5, r16
     174:	50 1e       	adc	r5, r16
     176:	50 1e       	adc	r5, r16
     178:	66 1e       	adc	r6, r22
     17a:	50 1e       	adc	r5, r16
     17c:	50 1e       	adc	r5, r16
     17e:	50 1e       	adc	r5, r16
     180:	50 1e       	adc	r5, r16
     182:	50 1e       	adc	r5, r16
     184:	50 1e       	adc	r5, r16
     186:	50 1e       	adc	r5, r16
     188:	61 1e       	adc	r6, r17
     18a:	50 1e       	adc	r5, r16
     18c:	50 1e       	adc	r5, r16
     18e:	50 1e       	adc	r5, r16
     190:	50 1e       	adc	r5, r16
     192:	50 1e       	adc	r5, r16
     194:	50 1e       	adc	r5, r16
     196:	50 1e       	adc	r5, r16
     198:	66 1e       	adc	r6, r22
     19a:	50 1e       	adc	r5, r16
     19c:	50 1e       	adc	r5, r16
     19e:	50 1e       	adc	r5, r16
     1a0:	50 1e       	adc	r5, r16
     1a2:	50 1e       	adc	r5, r16
     1a4:	50 1e       	adc	r5, r16
     1a6:	50 1e       	adc	r5, r16
     1a8:	ce 1e       	adc	r12, r30
     1aa:	50 1e       	adc	r5, r16
     1ac:	50 1e       	adc	r5, r16
     1ae:	50 1e       	adc	r5, r16
     1b0:	50 1e       	adc	r5, r16
     1b2:	50 1e       	adc	r5, r16
     1b4:	50 1e       	adc	r5, r16
     1b6:	50 1e       	adc	r5, r16
     1b8:	26 1e       	adc	r2, r22
     1ba:	50 1e       	adc	r5, r16
     1bc:	50 1e       	adc	r5, r16
     1be:	50 1e       	adc	r5, r16
     1c0:	50 1e       	adc	r5, r16
     1c2:	50 1e       	adc	r5, r16
     1c4:	50 1e       	adc	r5, r16
     1c6:	50 1e       	adc	r5, r16
     1c8:	26 1e       	adc	r2, r22
     1ca:	50 1e       	adc	r5, r16
     1cc:	50 1e       	adc	r5, r16
     1ce:	50 1e       	adc	r5, r16
     1d0:	50 1e       	adc	r5, r16
     1d2:	50 1e       	adc	r5, r16
     1d4:	50 1e       	adc	r5, r16
     1d6:	50 1e       	adc	r5, r16
     1d8:	3b 1e       	adc	r3, r27
     1da:	50 1e       	adc	r5, r16
     1dc:	50 1e       	adc	r5, r16
     1de:	50 1e       	adc	r5, r16
     1e0:	50 1e       	adc	r5, r16
     1e2:	50 1e       	adc	r5, r16
     1e4:	50 1e       	adc	r5, r16
     1e6:	50 1e       	adc	r5, r16
     1e8:	93 1e       	adc	r9, r19
     1ea:	50 1e       	adc	r5, r16
     1ec:	50 1e       	adc	r5, r16
     1ee:	50 1e       	adc	r5, r16
     1f0:	50 1e       	adc	r5, r16
     1f2:	50 1e       	adc	r5, r16
     1f4:	50 1e       	adc	r5, r16
     1f6:	50 1e       	adc	r5, r16
     1f8:	93 1e       	adc	r9, r19

000001fa <port_to_mode_PGM>:
     1fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000204 <port_to_output_PGM>:
     204:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000020e <port_to_input_PGM>:
     20e:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000218 <digital_pin_to_port_PGM>:
     218:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     228:	03 03 03 03                                         ....

0000022c <digital_pin_to_bit_mask_PGM>:
     22c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     23c:	04 08 10 20                                         ... 

00000240 <digital_pin_to_timer_PGM>:
     240:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     250:	00 00 00 00                                         ....

00000254 <_ZL21tone_pin_to_timer_PGM>:
     254:	02 00                                               ..

00000256 <__ctors_start>:
     256:	58 01       	movw	r10, r16
     258:	1d 07       	cpc	r17, r29
     25a:	22 18       	sub	r2, r2

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d8 e0       	ldi	r29, 0x08	; 8
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	12 e0       	ldi	r17, 0x02	; 2
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e0 e5       	ldi	r30, 0x50	; 80
     270:	f5 e5       	ldi	r31, 0x55	; 85
     272:	02 c0       	rjmp	.+4      	; 0x278 <__do_copy_data+0x10>
     274:	05 90       	lpm	r0, Z+
     276:	0d 92       	st	X+, r0
     278:	a6 35       	cpi	r26, 0x56	; 86
     27a:	b1 07       	cpc	r27, r17
     27c:	d9 f7       	brne	.-10     	; 0x274 <__do_copy_data+0xc>

0000027e <__do_clear_bss>:
     27e:	13 e0       	ldi	r17, 0x03	; 3
     280:	a6 e5       	ldi	r26, 0x56	; 86
     282:	b2 e0       	ldi	r27, 0x02	; 2
     284:	01 c0       	rjmp	.+2      	; 0x288 <.do_clear_bss_start>

00000286 <.do_clear_bss_loop>:
     286:	1d 92       	st	X+, r1

00000288 <.do_clear_bss_start>:
     288:	ae 3c       	cpi	r26, 0xCE	; 206
     28a:	b1 07       	cpc	r27, r17
     28c:	e1 f7       	brne	.-8      	; 0x286 <.do_clear_bss_loop>

0000028e <__do_global_ctors>:
     28e:	12 e0       	ldi	r17, 0x02	; 2
     290:	cc e5       	ldi	r28, 0x5C	; 92
     292:	d2 e0       	ldi	r29, 0x02	; 2
     294:	04 c0       	rjmp	.+8      	; 0x29e <__do_global_ctors+0x10>
     296:	22 97       	sbiw	r28, 0x02	; 2
     298:	fe 01       	movw	r30, r28
     29a:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__tablejump__>
     29e:	c6 35       	cpi	r28, 0x56	; 86
     2a0:	d1 07       	cpc	r29, r17
     2a2:	c9 f7       	brne	.-14     	; 0x296 <__do_global_ctors+0x8>
     2a4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
     2a8:	0c 94 a6 2a 	jmp	0x554c	; 0x554c <_exit>

000002ac <__bad_interrupt>:
     2ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b0 <_GLOBAL__I_EEPROM>:
#include <string.h>
#include <math.h>

//! global declarations and objects
EEPROMClass EEPROM;
TwoWire Wire;
     2b0:	87 e5       	ldi	r24, 0x57	; 87
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN7TwoWireC1Ev>
  		digitalWrite(13, LOW);    // sets the LED off
  		delay(1000);
	}
        
	return 0;
}
     2b8:	08 95       	ret

000002ba <main>:
#include "main.h"
#include "ArduinoRoverLib.h"

int main(void)
{
    init();
     2ba:	0e 94 be 02 	call	0x57c	; 0x57c <init>
	pinMode(13, OUTPUT);      // sets the digital pin as output
     2be:	8d e0       	ldi	r24, 0x0D	; 13
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>

	while(1){
		digitalWrite(13, HIGH);   // sets the LED on
     2c6:	8d e0       	ldi	r24, 0x0D	; 13
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
  		delay(1000);                  // waits for a second
     2ce:	68 ee       	ldi	r22, 0xE8	; 232
     2d0:	73 e0       	ldi	r23, 0x03	; 3
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 89 02 	call	0x512	; 0x512 <delay>
  		digitalWrite(13, LOW);    // sets the LED off
     2da:	8d e0       	ldi	r24, 0x0D	; 13
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
  		delay(1000);
     2e2:	68 ee       	ldi	r22, 0xE8	; 232
     2e4:	73 e0       	ldi	r23, 0x03	; 3
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 89 02 	call	0x512	; 0x512 <delay>
     2ee:	eb cf       	rjmp	.-42     	; 0x2c6 <main+0xc>

000002f0 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     2f0:	82 30       	cpi	r24, 0x02	; 2
     2f2:	08 f0       	brcs	.+2      	; 0x2f6 <attachInterrupt+0x6>
     2f4:	08 95       	ret
    intFunc[interruptNum] = userFunc;
     2f6:	e8 2f       	mov	r30, r24
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	e8 5a       	subi	r30, 0xA8	; 168
     300:	fd 4f       	sbci	r31, 0xFD	; 253
     302:	71 83       	std	Z+1, r23	; 0x01
     304:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	41 f0       	breq	.+16     	; 0x31a <attachInterrupt+0x2a>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     30a:	80 91 69 00 	lds	r24, 0x0069
     30e:	8c 7f       	andi	r24, 0xFC	; 252
     310:	84 2b       	or	r24, r20
     312:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     316:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
     318:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     31a:	80 91 69 00 	lds	r24, 0x0069
     31e:	44 0f       	add	r20, r20
     320:	55 1f       	adc	r21, r21
     322:	44 0f       	add	r20, r20
     324:	55 1f       	adc	r21, r21
     326:	83 7f       	andi	r24, 0xF3	; 243
     328:	84 2b       	or	r24, r20
     32a:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     32e:	e9 9a       	sbi	0x1d, 1	; 29
     330:	08 95       	ret

00000332 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     332:	82 30       	cpi	r24, 0x02	; 2
     334:	08 f0       	brcs	.+2      	; 0x338 <detachInterrupt+0x6>
     336:	08 95       	ret
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	51 f0       	breq	.+20     	; 0x350 <detachInterrupt+0x1e>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
     33c:	e8 98       	cbi	0x1d, 0	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     33e:	e8 2f       	mov	r30, r24
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	ee 0f       	add	r30, r30
     344:	ff 1f       	adc	r31, r31
     346:	e8 5a       	subi	r30, 0xA8	; 168
     348:	fd 4f       	sbci	r31, 0xFD	; 253
     34a:	11 82       	std	Z+1, r1	; 0x01
     34c:	10 82       	st	Z, r1
     34e:	08 95       	ret
    #endif
      break;

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
     350:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     352:	e8 2f       	mov	r30, r24
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ee 0f       	add	r30, r30
     358:	ff 1f       	adc	r31, r31
     35a:	e8 5a       	subi	r30, 0xA8	; 168
     35c:	fd 4f       	sbci	r31, 0xFD	; 253
     35e:	11 82       	std	Z+1, r1	; 0x01
     360:	10 82       	st	Z, r1
     362:	f5 cf       	rjmp	.-22     	; 0x34e <detachInterrupt+0x1c>

00000364 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	11 24       	eor	r1, r1
     36e:	2f 93       	push	r18
     370:	3f 93       	push	r19
     372:	4f 93       	push	r20
     374:	5f 93       	push	r21
     376:	6f 93       	push	r22
     378:	7f 93       	push	r23
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
     37e:	af 93       	push	r26
     380:	bf 93       	push	r27
     382:	ef 93       	push	r30
     384:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     386:	80 91 58 02 	lds	r24, 0x0258
     38a:	90 91 59 02 	lds	r25, 0x0259
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	29 f0       	breq	.+10     	; 0x39c <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     392:	e0 91 58 02 	lds	r30, 0x0258
     396:	f0 91 59 02 	lds	r31, 0x0259
     39a:	09 95       	icall
}
     39c:	ff 91       	pop	r31
     39e:	ef 91       	pop	r30
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	7f 91       	pop	r23
     3aa:	6f 91       	pop	r22
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <__vector_2>:

SIGNAL(INT1_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	6f 93       	push	r22
     3d2:	7f 93       	push	r23
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	af 93       	push	r26
     3da:	bf 93       	push	r27
     3dc:	ef 93       	push	r30
     3de:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     3e0:	80 91 5a 02 	lds	r24, 0x025A
     3e4:	90 91 5b 02 	lds	r25, 0x025B
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	29 f0       	breq	.+10     	; 0x3f6 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     3ec:	e0 91 5a 02 	lds	r30, 0x025A
     3f0:	f0 91 5b 02 	lds	r31, 0x025B
     3f4:	09 95       	icall
}
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	8f 93       	push	r24
     428:	9f 93       	push	r25
     42a:	af 93       	push	r26
     42c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     42e:	80 91 60 02 	lds	r24, 0x0260
     432:	90 91 61 02 	lds	r25, 0x0261
     436:	a0 91 62 02 	lds	r26, 0x0262
     43a:	b0 91 63 02 	lds	r27, 0x0263
	unsigned char f = timer0_fract;
     43e:	30 91 64 02 	lds	r19, 0x0264

	m += MILLIS_INC;
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	a1 1d       	adc	r26, r1
     446:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     448:	23 2f       	mov	r18, r19
     44a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     44c:	2d 37       	cpi	r18, 0x7D	; 125
     44e:	20 f0       	brcs	.+8      	; 0x458 <__vector_16+0x40>
		f -= FRACT_MAX;
     450:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	a1 1d       	adc	r26, r1
     456:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     458:	20 93 64 02 	sts	0x0264, r18
	timer0_millis = m;
     45c:	80 93 60 02 	sts	0x0260, r24
     460:	90 93 61 02 	sts	0x0261, r25
     464:	a0 93 62 02 	sts	0x0262, r26
     468:	b0 93 63 02 	sts	0x0263, r27
	timer0_overflow_count++;
     46c:	80 91 5c 02 	lds	r24, 0x025C
     470:	90 91 5d 02 	lds	r25, 0x025D
     474:	a0 91 5e 02 	lds	r26, 0x025E
     478:	b0 91 5f 02 	lds	r27, 0x025F
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	a1 1d       	adc	r26, r1
     480:	b1 1d       	adc	r27, r1
     482:	80 93 5c 02 	sts	0x025C, r24
     486:	90 93 5d 02 	sts	0x025D, r25
     48a:	a0 93 5e 02 	sts	0x025E, r26
     48e:	b0 93 5f 02 	sts	0x025F, r27
}
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	3f 91       	pop	r19
     49c:	2f 91       	pop	r18
     49e:	0f 90       	pop	r0
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	0f 90       	pop	r0
     4a4:	1f 90       	pop	r1
     4a6:	18 95       	reti

000004a8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     4a8:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     4aa:	f8 94       	cli
	m = timer0_millis;
     4ac:	20 91 60 02 	lds	r18, 0x0260
     4b0:	30 91 61 02 	lds	r19, 0x0261
     4b4:	40 91 62 02 	lds	r20, 0x0262
     4b8:	50 91 63 02 	lds	r21, 0x0263
	SREG = oldSREG;
     4bc:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     4be:	b9 01       	movw	r22, r18
     4c0:	ca 01       	movw	r24, r20
     4c2:	08 95       	ret

000004c4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     4c4:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     4c6:	f8 94       	cli
	m = timer0_overflow_count;
     4c8:	20 91 5c 02 	lds	r18, 0x025C
     4cc:	30 91 5d 02 	lds	r19, 0x025D
     4d0:	40 91 5e 02 	lds	r20, 0x025E
     4d4:	50 91 5f 02 	lds	r21, 0x025F
#if defined(TCNT0)
	t = TCNT0;
     4d8:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     4da:	a8 9b       	sbis	0x15, 0	; 21
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <micros+0x26>
     4de:	8f 3f       	cpi	r24, 0xFF	; 255
     4e0:	21 f0       	breq	.+8      	; 0x4ea <micros+0x26>
		m++;
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	4f 4f       	sbci	r20, 0xFF	; 255
     4e8:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     4ea:	9f bf       	out	0x3f, r25	; 63
     4ec:	54 2f       	mov	r21, r20
     4ee:	43 2f       	mov	r20, r19
     4f0:	32 2f       	mov	r19, r18
     4f2:	22 27       	eor	r18, r18
     4f4:	28 0f       	add	r18, r24
     4f6:	31 1d       	adc	r19, r1
     4f8:	41 1d       	adc	r20, r1
     4fa:	51 1d       	adc	r21, r1
     4fc:	22 0f       	add	r18, r18
     4fe:	33 1f       	adc	r19, r19
     500:	44 1f       	adc	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	44 1f       	adc	r20, r20
     50a:	55 1f       	adc	r21, r21
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
     50c:	b9 01       	movw	r22, r18
     50e:	ca 01       	movw	r24, r20
     510:	08 95       	ret

00000512 <delay>:

void delay(unsigned long ms)
{
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	7b 01       	movw	r14, r22
     520:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     522:	0e 94 62 02 	call	0x4c4	; 0x4c4 <micros>
     526:	eb 01       	movw	r28, r22

	while (ms > 0) {
     528:	e1 14       	cp	r14, r1
     52a:	f1 04       	cpc	r15, r1
     52c:	01 05       	cpc	r16, r1
     52e:	11 05       	cpc	r17, r1
     530:	a1 f0       	breq	.+40     	; 0x55a <delay+0x48>
		if (((uint16_t)micros() - start) >= 1000) {
     532:	0e 94 62 02 	call	0x4c4	; 0x4c4 <micros>
     536:	6c 1b       	sub	r22, r28
     538:	7d 0b       	sbc	r23, r29
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	68 3e       	cpi	r22, 0xE8	; 232
     53e:	78 07       	cpc	r23, r24
     540:	c0 f3       	brcs	.-16     	; 0x532 <delay+0x20>
			ms--;
     542:	08 94       	sec
     544:	e1 08       	sbc	r14, r1
     546:	f1 08       	sbc	r15, r1
     548:	01 09       	sbc	r16, r1
     54a:	11 09       	sbc	r17, r1
			start += 1000;
     54c:	c8 51       	subi	r28, 0x18	; 24
     54e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     550:	e1 14       	cp	r14, r1
     552:	f1 04       	cpc	r15, r1
     554:	01 05       	cpc	r16, r1
     556:	11 05       	cpc	r17, r1
     558:	61 f7       	brne	.-40     	; 0x532 <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	08 95       	ret

00000568 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	39 f0       	breq	.+14     	; 0x57a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     574:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <delayMicroseconds+0xe>
     57a:	08 95       	ret

0000057c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     57c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     57e:	84 b5       	in	r24, 0x24	; 36
     580:	82 60       	ori	r24, 0x02	; 2
     582:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     584:	84 b5       	in	r24, 0x24	; 36
     586:	81 60       	ori	r24, 0x01	; 1
     588:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     58a:	85 b5       	in	r24, 0x25	; 37
     58c:	82 60       	ori	r24, 0x02	; 2
     58e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     590:	85 b5       	in	r24, 0x25	; 37
     592:	81 60       	ori	r24, 0x01	; 1
     594:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     596:	ee e6       	ldi	r30, 0x6E	; 110
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	81 60       	ori	r24, 0x01	; 1
     59e:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
     5a0:	e1 e8       	ldi	r30, 0x81	; 129
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
     5a6:	80 81       	ld	r24, Z
     5a8:	82 60       	ori	r24, 0x02	; 2
     5aa:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
     5ac:	80 81       	ld	r24, Z
     5ae:	81 60       	ori	r24, 0x01	; 1
     5b0:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     5b2:	e0 e8       	ldi	r30, 0x80	; 128
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	81 60       	ori	r24, 0x01	; 1
     5ba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     5bc:	e1 eb       	ldi	r30, 0xB1	; 177
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	84 60       	ori	r24, 0x04	; 4
     5c4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     5c6:	e0 eb       	ldi	r30, 0xB0	; 176
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	81 60       	ori	r24, 0x01	; 1
     5ce:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     5d0:	ea e7       	ldi	r30, 0x7A	; 122
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	84 60       	ori	r24, 0x04	; 4
     5d8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     5da:	80 81       	ld	r24, Z
     5dc:	82 60       	ori	r24, 0x02	; 2
     5de:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     5e0:	80 81       	ld	r24, Z
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     5e6:	80 81       	ld	r24, Z
     5e8:	80 68       	ori	r24, 0x80	; 128
     5ea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     5ec:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     5f0:	08 95       	ret

000005f2 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     5f2:	80 93 00 01 	sts	0x0100, r24
}
     5f6:	08 95       	ret

000005f8 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     5f8:	8e 30       	cpi	r24, 0x0E	; 14
     5fa:	08 f0       	brcs	.+2      	; 0x5fe <analogRead+0x6>
     5fc:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     5fe:	87 70       	andi	r24, 0x07	; 7
     600:	90 91 00 01 	lds	r25, 0x0100
     604:	92 95       	swap	r25
     606:	99 0f       	add	r25, r25
     608:	99 0f       	add	r25, r25
     60a:	90 7c       	andi	r25, 0xC0	; 192
     60c:	98 2b       	or	r25, r24
     60e:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     612:	80 91 7a 00 	lds	r24, 0x007A
     616:	80 64       	ori	r24, 0x40	; 64
     618:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     61c:	80 91 7a 00 	lds	r24, 0x007A
     620:	86 fd       	sbrc	r24, 6
     622:	fc cf       	rjmp	.-8      	; 0x61c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     624:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     628:	30 91 79 00 	lds	r19, 0x0079
     62c:	93 2f       	mov	r25, r19
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	28 2b       	or	r18, r24
     634:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
     636:	c9 01       	movw	r24, r18
     638:	08 95       	ret

0000063a <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     63a:	1f 93       	push	r17
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	18 2f       	mov	r17, r24
     642:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
	if (val == 0)
     64a:	20 97       	sbiw	r28, 0x00	; 0
     64c:	59 f1       	breq	.+86     	; 0x6a4 <analogWrite+0x6a>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
     64e:	cf 3f       	cpi	r28, 0xFF	; 255
     650:	d1 05       	cpc	r29, r1
     652:	a1 f0       	breq	.+40     	; 0x67c <analogWrite+0x42>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     654:	e1 2f       	mov	r30, r17
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	e0 5c       	subi	r30, 0xC0	; 192
     65a:	fd 4f       	sbci	r31, 0xFD	; 253
     65c:	84 91       	lpm	r24, Z+
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	e1 f1       	breq	.+120    	; 0x6da <analogWrite+0xa0>
     662:	84 30       	cpi	r24, 0x04	; 4
     664:	98 f0       	brcs	.+38     	; 0x68c <analogWrite+0x52>
     666:	86 30       	cpi	r24, 0x06	; 6
     668:	69 f1       	breq	.+90     	; 0x6c4 <analogWrite+0x8a>
     66a:	87 30       	cpi	r24, 0x07	; 7
     66c:	09 f4       	brne	.+2      	; 0x670 <analogWrite+0x36>
     66e:	4f c0       	rjmp	.+158    	; 0x70e <analogWrite+0xd4>
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	09 f4       	brne	.+2      	; 0x676 <analogWrite+0x3c>
     674:	3f c0       	rjmp	.+126    	; 0x6f4 <analogWrite+0xba>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     676:	c0 38       	cpi	r28, 0x80	; 128
     678:	d1 05       	cpc	r29, r1
     67a:	a4 f0       	brlt	.+40     	; 0x6a4 <analogWrite+0x6a>
					digitalWrite(pin, LOW);
				} else {
					digitalWrite(pin, HIGH);
     67c:	81 2f       	mov	r24, r17
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
				}
		}
	}
}
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	08 95       	ret
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	91 f0       	breq	.+36     	; 0x6b4 <analogWrite+0x7a>
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	89 f7       	brne	.-30     	; 0x676 <analogWrite+0x3c>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     694:	84 b5       	in	r24, 0x24	; 36
     696:	80 62       	ori	r24, 0x20	; 32
     698:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     69a:	c8 bd       	out	0x28, r28	; 40
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	08 95       	ret
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
     6a4:	81 2f       	mov	r24, r17
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     6b4:	84 b5       	in	r24, 0x24	; 36
     6b6:	80 68       	ori	r24, 0x80	; 128
     6b8:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     6ba:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     6c4:	80 91 b0 00 	lds	r24, 0x00B0
     6c8:	80 68       	ori	r24, 0x80	; 128
     6ca:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
     6ce:	c0 93 b3 00 	sts	0x00B3, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     6da:	80 91 80 00 	lds	r24, 0x0080
     6de:	80 68       	ori	r24, 0x80	; 128
     6e0:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
     6e4:	d0 93 89 00 	sts	0x0089, r29
     6e8:	c0 93 88 00 	sts	0x0088, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     6f4:	80 91 80 00 	lds	r24, 0x0080
     6f8:	80 62       	ori	r24, 0x20	; 32
     6fa:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
     6fe:	d0 93 8b 00 	sts	0x008B, r29
     702:	c0 93 8a 00 	sts	0x008A, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     70e:	80 91 b0 00 	lds	r24, 0x00B0
     712:	80 62       	ori	r24, 0x20	; 32
     714:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
     718:	c0 93 b4 00 	sts	0x00B4, r28
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	fc 01       	movw	r30, r24
     728:	e4 5d       	subi	r30, 0xD4	; 212
     72a:	fd 4f       	sbci	r31, 0xFD	; 253
     72c:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
     72e:	fc 01       	movw	r30, r24
     730:	e8 5e       	subi	r30, 0xE8	; 232
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
     736:	ee 23       	and	r30, r30
     738:	79 f0       	breq	.+30     	; 0x758 <pinMode+0x34>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ee 0f       	add	r30, r30
     73e:	ff 1f       	adc	r31, r31
     740:	e6 50       	subi	r30, 0x06	; 6
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	a5 91       	lpm	r26, Z+
     746:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
     748:	66 23       	and	r22, r22
     74a:	39 f0       	breq	.+14     	; 0x75a <pinMode+0x36>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     74c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     74e:	f8 94       	cli
		*reg |= bit;
     750:	8c 91       	ld	r24, X
     752:	82 2b       	or	r24, r18
     754:	8c 93       	st	X, r24
		SREG = oldSREG;
     756:	9f bf       	out	0x3f, r25	; 63
     758:	08 95       	ret

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
     75a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     75c:	f8 94       	cli
		*reg &= ~bit;
     75e:	8c 91       	ld	r24, X
     760:	20 95       	com	r18
     762:	82 23       	and	r24, r18
     764:	8c 93       	st	X, r24
		SREG = oldSREG;
     766:	9f bf       	out	0x3f, r25	; 63
     768:	08 95       	ret

0000076a <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	39 f1       	breq	.+78     	; 0x7bc <_ZL10turnOffPWMh+0x52>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	60 f0       	brcs	.+24     	; 0x78a <_ZL10turnOffPWMh+0x20>
     772:	86 30       	cpi	r24, 0x06	; 6
     774:	c9 f0       	breq	.+50     	; 0x7a8 <_ZL10turnOffPWMh+0x3e>
     776:	87 30       	cpi	r24, 0x07	; 7
     778:	69 f0       	breq	.+26     	; 0x794 <_ZL10turnOffPWMh+0x2a>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	51 f4       	brne	.+20     	; 0x792 <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     77e:	80 91 80 00 	lds	r24, 0x0080
     782:	8f 7d       	andi	r24, 0xDF	; 223
     784:	80 93 80 00 	sts	0x0080, r24
     788:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	99 f0       	breq	.+38     	; 0x7b4 <_ZL10turnOffPWMh+0x4a>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	39 f0       	breq	.+14     	; 0x7a0 <_ZL10turnOffPWMh+0x36>
     792:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     794:	80 91 b0 00 	lds	r24, 0x00B0
     798:	8f 7d       	andi	r24, 0xDF	; 223
     79a:	80 93 b0 00 	sts	0x00B0, r24
     79e:	08 95       	ret
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     7a0:	84 b5       	in	r24, 0x24	; 36
     7a2:	8f 7d       	andi	r24, 0xDF	; 223
     7a4:	84 bd       	out	0x24, r24	; 36
     7a6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     7a8:	80 91 b0 00 	lds	r24, 0x00B0
     7ac:	8f 77       	andi	r24, 0x7F	; 127
     7ae:	80 93 b0 00 	sts	0x00B0, r24
     7b2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     7b4:	84 b5       	in	r24, 0x24	; 36
     7b6:	8f 77       	andi	r24, 0x7F	; 127
     7b8:	84 bd       	out	0x24, r24	; 36
     7ba:	08 95       	ret
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     7bc:	80 91 80 00 	lds	r24, 0x0080
     7c0:	8f 77       	andi	r24, 0x7F	; 127
     7c2:	80 93 80 00 	sts	0x0080, r24
     7c6:	08 95       	ret

000007c8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	f9 01       	movw	r30, r18
     7dc:	e0 5c       	subi	r30, 0xC0	; 192
     7de:	fd 4f       	sbci	r31, 0xFD	; 253
     7e0:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     7e2:	f9 01       	movw	r30, r18
     7e4:	e4 5d       	subi	r30, 0xD4	; 212
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
     7ea:	28 5e       	subi	r18, 0xE8	; 232
     7ec:	3d 4f       	sbci	r19, 0xFD	; 253
     7ee:	f9 01       	movw	r30, r18
     7f0:	14 91       	lpm	r17, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     7f2:	11 23       	and	r17, r17
     7f4:	91 f0       	breq	.+36     	; 0x81a <digitalWrite+0x52>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     7f6:	88 23       	and	r24, r24
     7f8:	19 f5       	brne	.+70     	; 0x840 <digitalWrite+0x78>

	out = portOutputRegister(port);
     7fa:	e1 2f       	mov	r30, r17
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	ec 5f       	subi	r30, 0xFC	; 252
     804:	fd 4f       	sbci	r31, 0xFD	; 253
     806:	a5 91       	lpm	r26, Z+
     808:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
     80a:	66 23       	and	r22, r22
     80c:	61 f0       	breq	.+24     	; 0x826 <digitalWrite+0x5e>
		uint8_t oldSREG = SREG;
                cli();
		*out &= ~bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     80e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     810:	f8 94       	cli
		*out |= bit;
     812:	8c 91       	ld	r24, X
     814:	80 2b       	or	r24, r16
     816:	8c 93       	st	X, r24
		SREG = oldSREG;
     818:	9f bf       	out	0x3f, r25	; 63
	}
}
     81a:	0f 90       	pop	r0
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
		uint8_t oldSREG = SREG;
     826:	9f b7       	in	r25, 0x3f	; 63
                cli();
     828:	f8 94       	cli
		*out &= ~bit;
     82a:	8c 91       	ld	r24, X
     82c:	00 95       	com	r16
     82e:	80 23       	and	r24, r16
     830:	8c 93       	st	X, r24
		SREG = oldSREG;
     832:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*out |= bit;
		SREG = oldSREG;
	}
}
     834:	0f 90       	pop	r0
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

	if (port == NOT_A_PIN) return;

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     840:	69 83       	std	Y+1, r22	; 0x01
     842:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZL10turnOffPWMh>
     846:	69 81       	ldd	r22, Y+1	; 0x01
     848:	d8 cf       	rjmp	.-80     	; 0x7fa <digitalWrite+0x32>

0000084a <digitalRead>:
		SREG = oldSREG;
	}
}

int digitalRead(uint8_t pin)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	e0 5c       	subi	r30, 0xC0	; 192
     856:	fd 4f       	sbci	r31, 0xFD	; 253
     858:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     85a:	f9 01       	movw	r30, r18
     85c:	e4 5d       	subi	r30, 0xD4	; 212
     85e:	fd 4f       	sbci	r31, 0xFD	; 253
     860:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
     862:	28 5e       	subi	r18, 0xE8	; 232
     864:	3d 4f       	sbci	r19, 0xFD	; 253
     866:	f9 01       	movw	r30, r18
     868:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
     86a:	11 23       	and	r17, r17
     86c:	c9 f0       	breq	.+50     	; 0x8a0 <digitalRead+0x56>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     86e:	88 23       	and	r24, r24
     870:	e9 f4       	brne	.+58     	; 0x8ac <digitalRead+0x62>

	if (*portInputRegister(port) & bit) return HIGH;
     872:	e1 2f       	mov	r30, r17
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e2 5f       	subi	r30, 0xF2	; 242
     87c:	fd 4f       	sbci	r31, 0xFD	; 253
     87e:	a5 91       	lpm	r26, Z+
     880:	b4 91       	lpm	r27, Z+
     882:	8c 91       	ld	r24, X
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	80 23       	and	r24, r16
     88a:	21 f4       	brne	.+8      	; 0x894 <digitalRead+0x4a>
	return LOW;
}
     88c:	c9 01       	movw	r24, r18
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	08 95       	ret

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
     898:	c9 01       	movw	r24, r18
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     8a4:	c9 01       	movw	r24, r18
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

	if (port == NOT_A_PIN) return LOW;

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     8ac:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZL10turnOffPWMh>
     8b0:	e0 cf       	rjmp	.-64     	; 0x872 <digitalRead+0x28>

000008b2 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
     8b2:	6f 92       	push	r6
     8b4:	7f 92       	push	r7
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	96 2f       	mov	r25, r22
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
     8ce:	68 2f       	mov	r22, r24
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	fb 01       	movw	r30, r22
     8d4:	e4 5d       	subi	r30, 0xD4	; 212
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
     8da:	68 5e       	subi	r22, 0xE8	; 232
     8dc:	7d 4f       	sbci	r23, 0xFD	; 253
     8de:	fb 01       	movw	r30, r22
     8e0:	f4 90       	lpm	r15, Z+
	uint8_t stateMask = (state ? bit : 0);
     8e2:	99 23       	and	r25, r25
     8e4:	d1 f1       	breq	.+116    	; 0x95a <__stack+0x5b>
     8e6:	01 2f       	mov	r16, r17
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
     8e8:	ca 01       	movw	r24, r20
     8ea:	b9 01       	movw	r22, r18
     8ec:	20 e8       	ldi	r18, 0x80	; 128
     8ee:	3e e3       	ldi	r19, 0x3E	; 62
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
     8f8:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
     8fc:	59 01       	movw	r10, r18
     8fe:	6a 01       	movw	r12, r20
     900:	af 2d       	mov	r26, r15
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	aa 0f       	add	r26, r26
     906:	bb 1f       	adc	r27, r27
     908:	a2 5f       	subi	r26, 0xF2	; 242
     90a:	bd 4f       	sbci	r27, 0xFD	; 253
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	a9 01       	movw	r20, r18
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     912:	fd 01       	movw	r30, r26
     914:	c5 91       	lpm	r28, Z+
     916:	d4 91       	lpm	r29, Z+
     918:	04 c0       	rjmp	.+8      	; 0x922 <__stack+0x23>
		if (numloops++ == maxloops)
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	4f 4f       	sbci	r20, 0xFF	; 255
     920:	5f 4f       	sbci	r21, 0xFF	; 255
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     922:	88 81       	ld	r24, Y
     924:	81 23       	and	r24, r17
     926:	08 17       	cp	r16, r24
     928:	d1 f4       	brne	.+52     	; 0x95e <__stack+0x5f>
		if (numloops++ == maxloops)
     92a:	2a 15       	cp	r18, r10
     92c:	3b 05       	cpc	r19, r11
     92e:	4c 05       	cpc	r20, r12
     930:	5d 05       	cpc	r21, r13
     932:	99 f7       	brne	.-26     	; 0x91a <__stack+0x1b>
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	a9 01       	movw	r20, r18
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
     93a:	b9 01       	movw	r22, r18
     93c:	ca 01       	movw	r24, r20
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	7f 90       	pop	r7
     956:	6f 90       	pop	r6
     958:	08 95       	ret
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);
     95a:	00 e0       	ldi	r16, 0x00	; 0
     95c:	c5 cf       	rjmp	.-118    	; 0x8e8 <pulseIn+0x36>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
     95e:	fd 01       	movw	r30, r26
     960:	c5 91       	lpm	r28, Z+
     962:	d4 91       	lpm	r29, Z+
     964:	04 c0       	rjmp	.+8      	; 0x96e <__stack+0x6f>
		if (numloops++ == maxloops)
     966:	2f 5f       	subi	r18, 0xFF	; 255
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	4f 4f       	sbci	r20, 0xFF	; 255
     96c:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
     96e:	88 81       	ld	r24, Y
     970:	81 23       	and	r24, r17
     972:	08 17       	cp	r16, r24
     974:	31 f0       	breq	.+12     	; 0x982 <__stack+0x83>
		if (numloops++ == maxloops)
     976:	2a 15       	cp	r18, r10
     978:	3b 05       	cpc	r19, r11
     97a:	4c 05       	cpc	r20, r12
     97c:	5d 05       	cpc	r21, r13
     97e:	99 f7       	brne	.-26     	; 0x966 <__stack+0x67>
     980:	d9 cf       	rjmp	.-78     	; 0x934 <__stack+0x35>
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     982:	88 81       	ld	r24, Y
     984:	81 23       	and	r24, r17
     986:	08 17       	cp	r16, r24
     988:	a1 f5       	brne	.+104    	; 0x9f2 <__stack+0xf3>
		if (numloops++ == maxloops)
     98a:	2a 15       	cp	r18, r10
     98c:	3b 05       	cpc	r19, r11
     98e:	4c 05       	cpc	r20, r12
     990:	5d 05       	cpc	r21, r13
     992:	81 f2       	breq	.-96     	; 0x934 <__stack+0x35>
     994:	66 24       	eor	r6, r6
     996:	77 24       	eor	r7, r7
     998:	43 01       	movw	r8, r6
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     99a:	fd 01       	movw	r30, r26
     99c:	c5 91       	lpm	r28, Z+
     99e:	d4 91       	lpm	r29, Z+
     9a0:	0c c0       	rjmp	.+24     	; 0x9ba <__stack+0xbb>
		if (numloops++ == maxloops)
     9a2:	d4 01       	movw	r26, r8
     9a4:	c3 01       	movw	r24, r6
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	a4 1f       	adc	r26, r20
     9ac:	b5 1f       	adc	r27, r21
     9ae:	a8 16       	cp	r10, r24
     9b0:	b9 06       	cpc	r11, r25
     9b2:	ca 06       	cpc	r12, r26
     9b4:	db 06       	cpc	r13, r27
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	bd cf       	rjmp	.-134    	; 0x934 <__stack+0x35>
			return 0;
		width++;
     9ba:	08 94       	sec
     9bc:	61 1c       	adc	r6, r1
     9be:	71 1c       	adc	r7, r1
     9c0:	81 1c       	adc	r8, r1
     9c2:	91 1c       	adc	r9, r1
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     9c4:	88 81       	ld	r24, Y
     9c6:	81 23       	and	r24, r17
     9c8:	08 17       	cp	r16, r24
     9ca:	59 f3       	breq	.-42     	; 0x9a2 <__stack+0xa3>
     9cc:	c4 01       	movw	r24, r8
     9ce:	b3 01       	movw	r22, r6
     9d0:	28 e0       	ldi	r18, 0x08	; 8
     9d2:	32 e5       	ldi	r19, 0x52	; 82
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
     9dc:	60 58       	subi	r22, 0x80	; 128
     9de:	71 4c       	sbci	r23, 0xC1	; 193
     9e0:	8f 4f       	sbci	r24, 0xFF	; 255
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	20 e8       	ldi	r18, 0x80	; 128
     9e6:	3e e3       	ldi	r19, 0x3E	; 62
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
     9f0:	a4 cf       	rjmp	.-184    	; 0x93a <__stack+0x3b>
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	9f cf       	rjmp	.-194    	; 0x93a <__stack+0x3b>

000009fc <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	08 2f       	mov	r16, r24
     a10:	16 2f       	mov	r17, r22
     a12:	f4 2e       	mov	r15, r20
     a14:	c7 e0       	ldi	r28, 0x07	; 7
     a16:	d0 e0       	ldi	r29, 0x00	; 0
     a18:	c2 2e       	mov	r12, r18
     a1a:	dd 24       	eor	r13, r13
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	a8 2e       	mov	r10, r24
     a20:	b1 2c       	mov	r11, r1
     a22:	1c c0       	rjmp	.+56     	; 0xa5c <shiftOut+0x60>
     a24:	b5 01       	movw	r22, r10
     a26:	6c 1b       	sub	r22, r28
     a28:	7d 0b       	sbc	r23, r29
     a2a:	c6 01       	movw	r24, r12
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <shiftOut+0x36>
     a2e:	95 95       	asr	r25
     a30:	87 95       	ror	r24
     a32:	6a 95       	dec	r22
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <shiftOut+0x32>
     a36:	bc 01       	movw	r22, r24
     a38:	61 70       	andi	r22, 0x01	; 1
     a3a:	70 70       	andi	r23, 0x00	; 0
     a3c:	80 2f       	mov	r24, r16
     a3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
     a42:	81 2f       	mov	r24, r17
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
		digitalWrite(clockPin, LOW);		
     a4a:	81 2f       	mov	r24, r17
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
     a52:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	cf 3f       	cpi	r28, 0xFF	; 255
     a58:	d9 07       	cpc	r29, r25
     a5a:	79 f0       	breq	.+30     	; 0xa7a <shiftOut+0x7e>
		if (bitOrder == LSBFIRST)
     a5c:	ff 20       	and	r15, r15
     a5e:	11 f3       	breq	.-60     	; 0xa24 <shiftOut+0x28>
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
     a60:	b6 01       	movw	r22, r12
     a62:	0c 2e       	mov	r0, r28
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <shiftOut+0x6e>
     a66:	75 95       	asr	r23
     a68:	67 95       	ror	r22
     a6a:	0a 94       	dec	r0
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <shiftOut+0x6a>
     a6e:	61 70       	andi	r22, 0x01	; 1
     a70:	70 70       	andi	r23, 0x00	; 0
     a72:	80 2f       	mov	r24, r16
     a74:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
     a78:	e4 cf       	rjmp	.-56     	; 0xa42 <shiftOut+0x46>
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	08 95       	ret

00000a8e <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	08 2f       	mov	r16, r24
     aa0:	16 2f       	mov	r17, r22
     aa2:	e4 2e       	mov	r14, r20
     aa4:	c7 e0       	ldi	r28, 0x07	; 7
     aa6:	d0 e0       	ldi	r29, 0x00	; 0
     aa8:	ff 24       	eor	r15, r15
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
     aaa:	97 e0       	ldi	r25, 0x07	; 7
     aac:	c9 2e       	mov	r12, r25
     aae:	d1 2c       	mov	r13, r1
     ab0:	16 c0       	rjmp	.+44     	; 0xade <shiftIn+0x50>
     ab2:	80 2f       	mov	r24, r16
     ab4:	0e 94 25 04 	call	0x84a	; 0x84a <digitalRead>
     ab8:	96 01       	movw	r18, r12
     aba:	2c 1b       	sub	r18, r28
     abc:	3d 0b       	sbc	r19, r29
     abe:	ac 01       	movw	r20, r24
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <shiftIn+0x38>
     ac2:	44 0f       	add	r20, r20
     ac4:	55 1f       	adc	r21, r21
     ac6:	2a 95       	dec	r18
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <shiftIn+0x34>
     aca:	f4 2a       	or	r15, r20
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
     acc:	81 2f       	mov	r24, r17
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
     ad4:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
     ad6:	3f ef       	ldi	r19, 0xFF	; 255
     ad8:	cf 3f       	cpi	r28, 0xFF	; 255
     ada:	d3 07       	cpc	r29, r19
     adc:	89 f0       	breq	.+34     	; 0xb00 <shiftIn+0x72>
		digitalWrite(clockPin, HIGH);
     ade:	81 2f       	mov	r24, r17
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
		if (bitOrder == LSBFIRST)
     ae6:	ee 20       	and	r14, r14
     ae8:	21 f3       	breq	.-56     	; 0xab2 <shiftIn+0x24>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
     aea:	80 2f       	mov	r24, r16
     aec:	0e 94 25 04 	call	0x84a	; 0x84a <digitalRead>
     af0:	0c 2e       	mov	r0, r28
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <shiftIn+0x6a>
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	0a 94       	dec	r0
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <shiftIn+0x66>
     afc:	f8 2a       	or	r15, r24
     afe:	e6 cf       	rjmp	.-52     	; 0xacc <shiftIn+0x3e>
		digitalWrite(clockPin, LOW);
	}
	return value;
}
     b00:	8f 2d       	mov	r24, r15
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	08 95       	ret

00000b14 <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	ef 93       	push	r30
     b2e:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     b30:	60 91 c6 00 	lds	r22, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
     b34:	20 91 e5 02 	lds	r18, 0x02E5
     b38:	30 91 e6 02 	lds	r19, 0x02E6
     b3c:	c9 01       	movw	r24, r18
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	8f 77       	andi	r24, 0x7F	; 127
     b42:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
     b44:	40 91 e7 02 	lds	r20, 0x02E7
     b48:	50 91 e8 02 	lds	r21, 0x02E8
     b4c:	84 17       	cp	r24, r20
     b4e:	95 07       	cpc	r25, r21
     b50:	41 f0       	breq	.+16     	; 0xb62 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
     b52:	2b 59       	subi	r18, 0x9B	; 155
     b54:	3d 4f       	sbci	r19, 0xFD	; 253
     b56:	f9 01       	movw	r30, r18
     b58:	60 83       	st	Z, r22
    rx_buffer->head = i;
     b5a:	90 93 e6 02 	sts	0x02E6, r25
     b5e:	80 93 e5 02 	sts	0x02E5, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	6f 91       	pop	r22
     b6c:	5f 91       	pop	r21
     b6e:	4f 91       	pop	r20
     b70:	3f 91       	pop	r19
     b72:	2f 91       	pop	r18
     b74:	0f 90       	pop	r0
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	0f 90       	pop	r0
     b7a:	1f 90       	pop	r1
     b7c:	18 95       	reti

00000b7e <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
     b7e:	8f 92       	push	r8
     b80:	af 92       	push	r10
     b82:	cf 92       	push	r12
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
     ba0:	73 83       	std	Z+3, r23	; 0x03
     ba2:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
     ba4:	55 83       	std	Z+5, r21	; 0x05
     ba6:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
     ba8:	37 83       	std	Z+7, r19	; 0x07
     baa:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
     bac:	11 87       	std	Z+9, r17	; 0x09
     bae:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
     bb0:	f3 86       	std	Z+11, r15	; 0x0b
     bb2:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
     bb4:	d5 86       	std	Z+13, r13	; 0x0d
     bb6:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
     bb8:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
     bba:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
     bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bbe:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
     bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc2:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
     bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc6:	82 8b       	std	Z+18, r24	; 0x12
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	af 90       	pop	r10
     bda:	8f 90       	pop	r8
     bdc:	08 95       	ret

00000bde <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
     bde:	8f 92       	push	r8
     be0:	af 92       	push	r10
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     bf8:	85 e0       	ldi	r24, 0x05	; 5
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
     c00:	73 83       	std	Z+3, r23	; 0x03
     c02:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
     c04:	55 83       	std	Z+5, r21	; 0x05
     c06:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
     c08:	37 83       	std	Z+7, r19	; 0x07
     c0a:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
     c0c:	11 87       	std	Z+9, r17	; 0x09
     c0e:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
     c10:	f3 86       	std	Z+11, r15	; 0x0b
     c12:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
     c14:	d5 86       	std	Z+13, r13	; 0x0d
     c16:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
     c18:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
     c1a:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
     c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1e:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
     c20:	8e 85       	ldd	r24, Y+14	; 0x0e
     c22:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
     c24:	8f 85       	ldd	r24, Y+15	; 0x0f
     c26:	82 8b       	std	Z+18, r24	; 0x12
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	df 90       	pop	r13
     c36:	cf 90       	pop	r12
     c38:	af 90       	pop	r10
     c3a:	8f 90       	pop	r8
     c3c:	08 95       	ret

00000c3e <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	9a 01       	movw	r18, r20
     c46:	ab 01       	movw	r20, r22

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
     c48:	20 30       	cpi	r18, 0x00	; 0
     c4a:	81 ee       	ldi	r24, 0xE1	; 225
     c4c:	38 07       	cpc	r19, r24
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	48 07       	cpc	r20, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	58 07       	cpc	r21, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <_ZN14HardwareSerial5beginEl+0x1c>
     c58:	48 c0       	rjmp	.+144    	; 0xcea <_ZN14HardwareSerial5beginEl+0xac>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     c5a:	e8 85       	ldd	r30, Y+8	; 0x08
     c5c:	f9 85       	ldd	r31, Y+9	; 0x09
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0a 88       	ldd	r0, Y+18	; 0x12
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <_ZN14HardwareSerial5beginEl+0x2c>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <_ZN14HardwareSerial5beginEl+0x28>
     c6e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	79 e0       	ldi	r23, 0x09	; 9
     c74:	8d e3       	ldi	r24, 0x3D	; 61
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
     c7c:	21 50       	subi	r18, 0x01	; 1
     c7e:	30 40       	sbci	r19, 0x00	; 0
     c80:	40 40       	sbci	r20, 0x00	; 0
     c82:	50 40       	sbci	r21, 0x00	; 0
     c84:	56 95       	lsr	r21
     c86:	47 95       	ror	r20
     c88:	37 95       	ror	r19
     c8a:	27 95       	ror	r18
     c8c:	83 2f       	mov	r24, r19
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c8e:	ec 81       	ldd	r30, Y+4	; 0x04
     c90:	fd 81       	ldd	r31, Y+5	; 0x05
     c92:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
     c94:	ee 81       	ldd	r30, Y+6	; 0x06
     c96:	ff 81       	ldd	r31, Y+7	; 0x07
     c98:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     c9a:	ea 85       	ldd	r30, Y+10	; 0x0a
     c9c:	fb 85       	ldd	r31, Y+11	; 0x0b
     c9e:	80 81       	ld	r24, Z
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	a9 01       	movw	r20, r18
     ca6:	0e 84       	ldd	r0, Y+14	; 0x0e
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <_ZN14HardwareSerial5beginEl+0x70>
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <_ZN14HardwareSerial5beginEl+0x6c>
     cb2:	84 2b       	or	r24, r20
     cb4:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
     cb6:	ea 85       	ldd	r30, Y+10	; 0x0a
     cb8:	fb 85       	ldd	r31, Y+11	; 0x0b
     cba:	80 81       	ld	r24, Z
     cbc:	a9 01       	movw	r20, r18
     cbe:	0f 84       	ldd	r0, Y+15	; 0x0f
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <_ZN14HardwareSerial5beginEl+0x88>
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	0a 94       	dec	r0
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <_ZN14HardwareSerial5beginEl+0x84>
     cca:	84 2b       	or	r24, r20
     ccc:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
     cce:	ea 85       	ldd	r30, Y+10	; 0x0a
     cd0:	fb 85       	ldd	r31, Y+11	; 0x0b
     cd2:	80 81       	ld	r24, Z
     cd4:	08 88       	ldd	r0, Y+16	; 0x10
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <_ZN14HardwareSerial5beginEl+0x9e>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <_ZN14HardwareSerial5beginEl+0x9a>
     ce0:	82 2b       	or	r24, r18
     ce2:	80 83       	st	Z, r24
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     cea:	e8 85       	ldd	r30, Y+8	; 0x08
     cec:	f9 85       	ldd	r31, Y+9	; 0x09
     cee:	10 82       	st	Z, r1
     cf0:	20 e1       	ldi	r18, 0x10	; 16
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	cc cf       	rjmp	.-104    	; 0xc8e <_ZN14HardwareSerial5beginEl+0x50>

00000cf6 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
     cf6:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
     cf8:	a2 85       	ldd	r26, Z+10	; 0x0a
     cfa:	b3 85       	ldd	r27, Z+11	; 0x0b
     cfc:	3c 91       	ld	r19, X
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	ac 01       	movw	r20, r24
     d04:	06 84       	ldd	r0, Z+14	; 0x0e
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <_ZN14HardwareSerial3endEv+0x16>
     d08:	44 0f       	add	r20, r20
     d0a:	55 1f       	adc	r21, r21
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <_ZN14HardwareSerial3endEv+0x12>
     d10:	24 2f       	mov	r18, r20
     d12:	20 95       	com	r18
     d14:	23 23       	and	r18, r19
     d16:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
     d18:	a2 85       	ldd	r26, Z+10	; 0x0a
     d1a:	b3 85       	ldd	r27, Z+11	; 0x0b
     d1c:	3c 91       	ld	r19, X
     d1e:	ac 01       	movw	r20, r24
     d20:	07 84       	ldd	r0, Z+15	; 0x0f
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <_ZN14HardwareSerial3endEv+0x32>
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <_ZN14HardwareSerial3endEv+0x2e>
     d2c:	24 2f       	mov	r18, r20
     d2e:	20 95       	com	r18
     d30:	23 23       	and	r18, r19
     d32:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
     d34:	a2 85       	ldd	r26, Z+10	; 0x0a
     d36:	b3 85       	ldd	r27, Z+11	; 0x0b
     d38:	2c 91       	ld	r18, X
     d3a:	00 88       	ldd	r0, Z+16	; 0x10
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <_ZN14HardwareSerial3endEv+0x4c>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <_ZN14HardwareSerial3endEv+0x48>
     d46:	80 95       	com	r24
     d48:	82 23       	and	r24, r18
     d4a:	8c 93       	st	X, r24
}
     d4c:	08 95       	ret

00000d4e <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
     d4e:	fc 01       	movw	r30, r24
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	fc 01       	movw	r30, r24
     d56:	e0 58       	subi	r30, 0x80	; 128
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	20 81       	ld	r18, Z
     d5c:	31 81       	ldd	r19, Z+1	; 0x01
     d5e:	8e 57       	subi	r24, 0x7E	; 126
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	28 1b       	sub	r18, r24
     d6a:	39 0b       	sbc	r19, r25
     d6c:	2f 77       	andi	r18, 0x7F	; 127
     d6e:	30 70       	andi	r19, 0x00	; 0
}
     d70:	c9 01       	movw	r24, r18
     d72:	08 95       	ret

00000d74 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     d74:	fc 01       	movw	r30, r24
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	fc 01       	movw	r30, r24
     d7c:	ee 57       	subi	r30, 0x7E	; 126
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	20 81       	ld	r18, Z
     d82:	31 81       	ldd	r19, Z+1	; 0x01
     d84:	fc 01       	movw	r30, r24
     d86:	e0 58       	subi	r30, 0x80	; 128
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	42 17       	cp	r20, r18
     d90:	53 07       	cpc	r21, r19
     d92:	39 f0       	breq	.+14     	; 0xda2 <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	fc 01       	movw	r30, r24
     d9a:	20 81       	ld	r18, Z
     d9c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     d9e:	c9 01       	movw	r24, r18
     da0:	08 95       	ret
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     da2:	2f ef       	ldi	r18, 0xFF	; 255
     da4:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     da6:	c9 01       	movw	r24, r18
     da8:	08 95       	ret

00000daa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     daa:	dc 01       	movw	r26, r24
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	8d 91       	ld	r24, X+
     db0:	9c 91       	ld	r25, X
     db2:	13 97       	sbiw	r26, 0x03	; 3
     db4:	fc 01       	movw	r30, r24
     db6:	ee 57       	subi	r30, 0x7E	; 126
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	40 81       	ld	r20, Z
     dbc:	51 81       	ldd	r21, Z+1	; 0x01
     dbe:	dc 01       	movw	r26, r24
     dc0:	a0 58       	subi	r26, 0x80	; 128
     dc2:	bf 4f       	sbci	r27, 0xFF	; 255
     dc4:	2d 91       	ld	r18, X+
     dc6:	3c 91       	ld	r19, X
     dc8:	11 97       	sbiw	r26, 0x01	; 1
     dca:	24 17       	cp	r18, r20
     dcc:	35 07       	cpc	r19, r21
     dce:	69 f0       	breq	.+26     	; 0xdea <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     dd0:	84 0f       	add	r24, r20
     dd2:	95 1f       	adc	r25, r21
     dd4:	dc 01       	movw	r26, r24
     dd6:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
     dd8:	4f 5f       	subi	r20, 0xFF	; 255
     dda:	5f 4f       	sbci	r21, 0xFF	; 255
     ddc:	4f 77       	andi	r20, 0x7F	; 127
     dde:	50 70       	andi	r21, 0x00	; 0
     de0:	51 83       	std	Z+1, r21	; 0x01
     de2:	40 83       	st	Z, r20
    return c;
     de4:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     de6:	c9 01       	movw	r24, r18
     de8:	08 95       	ret
}

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    return c;
  }
}
     dee:	c9 01       	movw	r24, r18
     df0:	08 95       	ret

00000df2 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
     df2:	dc 01       	movw	r26, r24
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	fc 01       	movw	r30, r24
     dfe:	e0 58       	subi	r30, 0x80	; 128
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	8e 57       	subi	r24, 0x7E	; 126
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	dc 01       	movw	r26, r24
     e08:	8d 91       	ld	r24, X+
     e0a:	9c 91       	ld	r25, X
     e0c:	11 97       	sbiw	r26, 0x01	; 1
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
}
     e12:	08 95       	ret

00000e14 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
     e14:	fc 01       	movw	r30, r24
     e16:	a0 85       	ldd	r26, Z+8	; 0x08
     e18:	b1 85       	ldd	r27, Z+9	; 0x09
     e1a:	21 89       	ldd	r18, Z+17	; 0x11
  while (!((*_ucsra) & (1 << _udre)))
     e1c:	8c 91       	ld	r24, X
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <_ZN14HardwareSerial5writeEh+0x14>
     e24:	95 95       	asr	r25
     e26:	87 95       	ror	r24
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <_ZN14HardwareSerial5writeEh+0x10>
     e2c:	80 ff       	sbrs	r24, 0
     e2e:	f6 cf       	rjmp	.-20     	; 0xe1c <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
     e30:	04 84       	ldd	r0, Z+12	; 0x0c
     e32:	f5 85       	ldd	r31, Z+13	; 0x0d
     e34:	e0 2d       	mov	r30, r0
     e36:	60 83       	st	Z, r22
}
     e38:	08 95       	ret

00000e3a <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	90 93 ea 02 	sts	0x02EA, r25
     e42:	80 93 e9 02 	sts	0x02E9, r24
{
  _rx_buffer = rx_buffer;
     e46:	85 e6       	ldi	r24, 0x65	; 101
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	90 93 ec 02 	sts	0x02EC, r25
     e4e:	80 93 eb 02 	sts	0x02EB, r24
  _ubrrh = ubrrh;
     e52:	85 ec       	ldi	r24, 0xC5	; 197
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	90 93 ee 02 	sts	0x02EE, r25
     e5a:	80 93 ed 02 	sts	0x02ED, r24
  _ubrrl = ubrrl;
     e5e:	84 ec       	ldi	r24, 0xC4	; 196
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 f0 02 	sts	0x02F0, r25
     e66:	80 93 ef 02 	sts	0x02EF, r24
  _ucsra = ucsra;
     e6a:	80 ec       	ldi	r24, 0xC0	; 192
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	90 93 f2 02 	sts	0x02F2, r25
     e72:	80 93 f1 02 	sts	0x02F1, r24
  _ucsrb = ucsrb;
     e76:	81 ec       	ldi	r24, 0xC1	; 193
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 f4 02 	sts	0x02F4, r25
     e7e:	80 93 f3 02 	sts	0x02F3, r24
  _udr = udr;
     e82:	86 ec       	ldi	r24, 0xC6	; 198
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 f6 02 	sts	0x02F6, r25
     e8a:	80 93 f5 02 	sts	0x02F5, r24
  _rxen = rxen;
     e8e:	84 e0       	ldi	r24, 0x04	; 4
     e90:	80 93 f7 02 	sts	0x02F7, r24
  _txen = txen;
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	80 93 f8 02 	sts	0x02F8, r24
  _rxcie = rxcie;
     e9a:	87 e0       	ldi	r24, 0x07	; 7
     e9c:	80 93 f9 02 	sts	0x02F9, r24
  _udre = udre;
     ea0:	85 e0       	ldi	r24, 0x05	; 5
     ea2:	80 93 fa 02 	sts	0x02FA, r24
  _u2x = u2x;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 fb 02 	sts	0x02FB, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
     eac:	08 95       	ret

00000eae <_ZN5Print5writeEPKc>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ec 01       	movw	r28, r24
     eb8:	8b 01       	movw	r16, r22
  while (*str)
     eba:	fb 01       	movw	r30, r22
     ebc:	60 81       	ld	r22, Z
     ebe:	66 23       	and	r22, r22
     ec0:	69 f0       	breq	.+26     	; 0xedc <_ZN5Print5writeEPKc+0x2e>
    write(*str++);
     ec2:	0f 5f       	subi	r16, 0xFF	; 255
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	e8 81       	ld	r30, Y
     ec8:	f9 81       	ldd	r31, Y+1	; 0x01
     eca:	01 90       	ld	r0, Z+
     ecc:	f0 81       	ld	r31, Z
     ece:	e0 2d       	mov	r30, r0
     ed0:	ce 01       	movw	r24, r28
     ed2:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     ed4:	f8 01       	movw	r30, r16
     ed6:	60 81       	ld	r22, Z
     ed8:	66 23       	and	r22, r22
     eda:	99 f7       	brne	.-26     	; 0xec2 <_ZN5Print5writeEPKc+0x14>
    write(*str++);
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	8b 01       	movw	r16, r22
     ef6:	7a 01       	movw	r14, r20
  while (size--)
     ef8:	41 15       	cp	r20, r1
     efa:	51 05       	cpc	r21, r1
     efc:	81 f0       	breq	.+32     	; 0xf1e <_ZN5Print5writeEPKhj+0x38>
    write(*buffer++);
     efe:	f8 01       	movw	r30, r16
     f00:	61 91       	ld	r22, Z+
     f02:	8f 01       	movw	r16, r30
     f04:	e8 81       	ld	r30, Y
     f06:	f9 81       	ldd	r31, Y+1	; 0x01
     f08:	01 90       	ld	r0, Z+
     f0a:	f0 81       	ld	r31, Z
     f0c:	e0 2d       	mov	r30, r0
     f0e:	ce 01       	movw	r24, r28
     f10:	09 95       	icall
     f12:	08 94       	sec
     f14:	e1 08       	sbc	r14, r1
     f16:	f1 08       	sbc	r15, r1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     f18:	e1 14       	cp	r14, r1
     f1a:	f1 04       	cpc	r15, r1
     f1c:	81 f7       	brne	.-32     	; 0xefe <_ZN5Print5writeEPKhj+0x18>
    write(*buffer++);
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	08 95       	ret

00000f2c <_ZN5Print5printEPKc>:
  }
}

void Print::print(const char str[])
{
  write(str);
     f2c:	dc 01       	movw	r26, r24
     f2e:	ed 91       	ld	r30, X+
     f30:	fc 91       	ld	r31, X
     f32:	02 80       	ldd	r0, Z+2	; 0x02
     f34:	f3 81       	ldd	r31, Z+3	; 0x03
     f36:	e0 2d       	mov	r30, r0
     f38:	09 95       	icall
}
     f3a:	08 95       	ret

00000f3c <_ZN5Print5printERK6String>:
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
{
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	7c 01       	movw	r14, r24
     f4e:	8b 01       	movw	r16, r22
  for (int i = 0; i < s.length(); i++) {
     f50:	db 01       	movw	r26, r22
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8d 91       	ld	r24, X+
     f56:	9c 91       	ld	r25, X
     f58:	15 97       	sbiw	r26, 0x05	; 5
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	c1 f0       	breq	.+48     	; 0xf8e <_ZN5Print5printERK6String+0x52>
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	c0 e0       	ldi	r28, 0x00	; 0
     f64:	d0 e0       	ldi	r29, 0x00	; 0
    write(s[i]);
     f66:	d7 01       	movw	r26, r14
     f68:	ed 91       	ld	r30, X+
     f6a:	fc 91       	ld	r31, X
     f6c:	c0 80       	ld	r12, Z
     f6e:	d1 80       	ldd	r13, Z+1	; 0x01
     f70:	c8 01       	movw	r24, r16
     f72:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_ZNK6StringixEj>
     f76:	68 2f       	mov	r22, r24
     f78:	c7 01       	movw	r24, r14
     f7a:	f6 01       	movw	r30, r12
     f7c:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
     f7e:	21 96       	adiw	r28, 0x01	; 1
     f80:	be 01       	movw	r22, r28
     f82:	f8 01       	movw	r30, r16
     f84:	84 81       	ldd	r24, Z+4	; 0x04
     f86:	95 81       	ldd	r25, Z+5	; 0x05
     f88:	c8 17       	cp	r28, r24
     f8a:	d9 07       	cpc	r29, r25
     f8c:	60 f3       	brcs	.-40     	; 0xf66 <_ZN5Print5printERK6String+0x2a>
    write(s[i]);
  }
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	08 95       	ret

00000fa0 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
{
     fa0:	2f 92       	push	r2
     fa2:	3f 92       	push	r3
     fa4:	4f 92       	push	r4
     fa6:	5f 92       	push	r5
     fa8:	6f 92       	push	r6
     faa:	7f 92       	push	r7
     fac:	8f 92       	push	r8
     fae:	9f 92       	push	r9
     fb0:	af 92       	push	r10
     fb2:	bf 92       	push	r11
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	a2 97       	sbiw	r28, 0x22	; 34
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	9a a3       	std	Y+34, r25	; 0x22
     fd6:	89 a3       	std	Y+33, r24	; 0x21
     fd8:	7a 01       	movw	r14, r20
     fda:	8b 01       	movw	r16, r22
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
     fdc:	41 15       	cp	r20, r1
     fde:	51 05       	cpc	r21, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <_ZN5Print11printNumberEmh+0x48>
     fe6:	55 c0       	rjmp	.+170    	; 0x1092 <_ZN5Print11printNumberEmh+0xf2>
    print('0');
    return;
     fe8:	62 2e       	mov	r6, r18
     fea:	77 24       	eor	r7, r7
     fec:	88 24       	eor	r8, r8
     fee:	99 24       	eor	r9, r9
     ff0:	aa 24       	eor	r10, r10
     ff2:	bb 24       	eor	r11, r11
     ff4:	65 01       	movw	r12, r10
     ff6:	1e 01       	movw	r2, r28
     ff8:	08 94       	sec
     ffa:	21 1c       	adc	r2, r1
     ffc:	31 1c       	adc	r3, r1
  } 

  while (n > 0) {
    buf[i++] = n % base;
     ffe:	21 01       	movw	r4, r2
    1000:	4a 0c       	add	r4, r10
    1002:	5b 1c       	adc	r5, r11
    1004:	c8 01       	movw	r24, r16
    1006:	b7 01       	movw	r22, r14
    1008:	a4 01       	movw	r20, r8
    100a:	93 01       	movw	r18, r6
    100c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1010:	f2 01       	movw	r30, r4
    1012:	60 83       	st	Z, r22
    1014:	08 94       	sec
    1016:	a1 1c       	adc	r10, r1
    1018:	b1 1c       	adc	r11, r1
    101a:	c1 1c       	adc	r12, r1
    101c:	d1 1c       	adc	r13, r1
    n /= base;
    101e:	c8 01       	movw	r24, r16
    1020:	b7 01       	movw	r22, r14
    1022:	a4 01       	movw	r20, r8
    1024:	93 01       	movw	r18, r6
    1026:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    102a:	e2 2e       	mov	r14, r18
    102c:	f3 2e       	mov	r15, r19
    102e:	04 2f       	mov	r16, r20
    1030:	15 2f       	mov	r17, r21
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    1032:	e1 14       	cp	r14, r1
    1034:	f1 04       	cpc	r15, r1
    1036:	01 05       	cpc	r16, r1
    1038:	11 05       	cpc	r17, r1
    103a:	09 f7       	brne	.-62     	; 0xffe <_ZN5Print11printNumberEmh+0x5e>
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    103c:	a1 14       	cp	r10, r1
    103e:	b1 04       	cpc	r11, r1
    1040:	c1 04       	cpc	r12, r1
    1042:	d1 04       	cpc	r13, r1
    1044:	71 f1       	breq	.+92     	; 0x10a2 <_ZN5Print11printNumberEmh+0x102>
    1046:	08 94       	sec
    1048:	a1 08       	sbc	r10, r1
    104a:	b1 08       	sbc	r11, r1
    104c:	c1 08       	sbc	r12, r1
    104e:	d1 08       	sbc	r13, r1
    1050:	18 c0       	rjmp	.+48     	; 0x1082 <_ZN5Print11printNumberEmh+0xe2>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    1052:	40 5d       	subi	r20, 0xD0	; 208
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	89 a1       	ldd	r24, Y+33	; 0x21
    105c:	9a a1       	ldd	r25, Y+34	; 0x22
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
    1066:	08 94       	sec
    1068:	a1 08       	sbc	r10, r1
    106a:	b1 08       	sbc	r11, r1
    106c:	c1 08       	sbc	r12, r1
    106e:	d1 08       	sbc	r13, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    1070:	ff ef       	ldi	r31, 0xFF	; 255
    1072:	af 16       	cp	r10, r31
    1074:	ff ef       	ldi	r31, 0xFF	; 255
    1076:	bf 06       	cpc	r11, r31
    1078:	ff ef       	ldi	r31, 0xFF	; 255
    107a:	cf 06       	cpc	r12, r31
    107c:	ff ef       	ldi	r31, 0xFF	; 255
    107e:	df 06       	cpc	r13, r31
    1080:	81 f0       	breq	.+32     	; 0x10a2 <_ZN5Print11printNumberEmh+0x102>
    print((char) (buf[i - 1] < 10 ?
    1082:	f1 01       	movw	r30, r2
    1084:	ea 0d       	add	r30, r10
    1086:	fb 1d       	adc	r31, r11
    1088:	40 81       	ld	r20, Z
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    108a:	4a 30       	cpi	r20, 0x0A	; 10
    108c:	10 f3       	brcs	.-60     	; 0x1052 <_ZN5Print11printNumberEmh+0xb2>
    108e:	49 5c       	subi	r20, 0xC9	; 201
    1090:	e1 cf       	rjmp	.-62     	; 0x1054 <_ZN5Print11printNumberEmh+0xb4>
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1092:	40 e3       	ldi	r20, 0x30	; 48
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    10a2:	a2 96       	adiw	r28, 0x22	; 34
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    10c4:	8f 90       	pop	r8
    10c6:	7f 90       	pop	r7
    10c8:	6f 90       	pop	r6
    10ca:	5f 90       	pop	r5
    10cc:	4f 90       	pop	r4
    10ce:	3f 90       	pop	r3
    10d0:	2f 90       	pop	r2
    10d2:	08 95       	ret

000010d4 <_ZN5Print5printEmi>:
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <_ZN5Print5printEmi+0xc>
  else printNumber(n, base);
    10da:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN5Print11printNumberEmh>
    10de:	08 95       	ret
  }
}

void Print::print(unsigned long n, int base)
{
  if (base == 0) write(n);
    10e0:	dc 01       	movw	r26, r24
    10e2:	ed 91       	ld	r30, X+
    10e4:	fc 91       	ld	r31, X
    10e6:	01 90       	ld	r0, Z+
    10e8:	f0 81       	ld	r31, Z
    10ea:	e0 2d       	mov	r30, r0
    10ec:	64 2f       	mov	r22, r20
    10ee:	09 95       	icall
    10f0:	08 95       	ret

000010f2 <_ZN5Print5printEji>:
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
    10f2:	9a 01       	movw	r18, r20
  print((unsigned long) n, base);
    10f4:	ab 01       	movw	r20, r22
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
}
    10fe:	08 95       	ret

00001100 <_ZN5Print5printEhi>:
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
    1100:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
    1102:	46 2f       	mov	r20, r22
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
}
    110e:	08 95       	ret

00001110 <_ZN5Print5printEli>:
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
{
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
    111e:	7a 01       	movw	r14, r20
    1120:	8b 01       	movw	r16, r22
  if (base == 0) {
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	d9 f0       	breq	.+54     	; 0x115e <_ZN5Print5printEli+0x4e>
    write(n);
  } else if (base == 10) {
    1128:	2a 30       	cpi	r18, 0x0A	; 10
    112a:	31 05       	cpc	r19, r1
    112c:	49 f0       	breq	.+18     	; 0x1140 <_ZN5Print5printEli+0x30>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
    112e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN5Print11printNumberEmh>
  }
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	08 95       	ret
void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
    1140:	77 fd       	sbrc	r23, 7
    1142:	1b c0       	rjmp	.+54     	; 0x117a <_ZN5Print5printEli+0x6a>
      print('-');
      n = -n;
    }
    printNumber(n, 10);
    1144:	ce 01       	movw	r24, r28
    1146:	b8 01       	movw	r22, r16
    1148:	a7 01       	movw	r20, r14
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN5Print11printNumberEmh>
  } else {
    printNumber(n, base);
  }
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret
}

void Print::print(long n, int base)
{
  if (base == 0) {
    write(n);
    115e:	e8 81       	ld	r30, Y
    1160:	f9 81       	ldd	r31, Y+1	; 0x01
    1162:	01 90       	ld	r0, Z+
    1164:	f0 81       	ld	r31, Z
    1166:	e0 2d       	mov	r30, r0
    1168:	64 2f       	mov	r22, r20
    116a:	09 95       	icall
    }
    printNumber(n, 10);
  } else {
    printNumber(n, base);
  }
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    117a:	4d e2       	ldi	r20, 0x2D	; 45
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
  if (base == 0) {
    write(n);
  } else if (base == 10) {
    if (n < 0) {
      print('-');
      n = -n;
    118a:	10 95       	com	r17
    118c:	00 95       	com	r16
    118e:	f0 94       	com	r15
    1190:	e0 94       	com	r14
    1192:	e1 1c       	adc	r14, r1
    1194:	f1 1c       	adc	r15, r1
    1196:	01 1d       	adc	r16, r1
    1198:	11 1d       	adc	r17, r1
    119a:	d4 cf       	rjmp	.-88     	; 0x1144 <_ZN5Print5printEli+0x34>

0000119c <_ZN5Print5printEii>:
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	9a 01       	movw	r18, r20
  print((long) n, base);
    11a6:	7b 01       	movw	r14, r22
    11a8:	00 27       	eor	r16, r16
    11aa:	f7 fc       	sbrc	r15, 7
    11ac:	00 95       	com	r16
    11ae:	10 2f       	mov	r17, r16
    11b0:	b8 01       	movw	r22, r16
    11b2:	a7 01       	movw	r20, r14
    11b4:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
}
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	08 95       	ret

000011c2 <_ZN5Print5printEci>:
{
  write(str);
}

void Print::print(char c, int base)
{
    11c2:	9a 01       	movw	r18, r20
  print((long) c, base);
    11c4:	46 2f       	mov	r20, r22
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
}
    11d0:	08 95       	ret

000011d2 <_ZN5Print7printlnEv>:
{
  printFloat(n, digits);
}

void Print::println(void)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	ec 01       	movw	r28, r24
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    11d8:	4d e0       	ldi	r20, 0x0D	; 13
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
    11e8:	ce 01       	movw	r24, r28
    11ea:	4a e0       	ldi	r20, 0x0A	; 10
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>

void Print::println(void)
{
  print('\r');
  print('\n');  
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <_ZN5Print7printlnEmi>:
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
{
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
  print(n, base);
    1206:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
  println();
    120a:	ce 01       	movw	r24, r28
    120c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <_ZN5Print7printlnEji>:
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
{
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
    121c:	9a 01       	movw	r18, r20
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
    121e:	ab 01       	movw	r20, r22
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
}

void Print::println(unsigned int n, int base)
{
  print(n, base);
  println();
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <_ZN5Print7printlnEhi>:
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	9a 01       	movw	r18, r20
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
    123c:	46 2f       	mov	r20, r22
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
}

void Print::println(unsigned char b, int base)
{
  print(b, base);
  println();
    1248:	ce 01       	movw	r24, r28
    124a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <_ZN5Print7printlnEPKc>:
  print(s);
  println();
}

void Print::println(const char c[])
{
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
  print(c);
    125a:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN5Print5printEPKc>
  println();
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <_ZN5Print7printlnERK6String>:
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
{
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ec 01       	movw	r28, r24
  print(s);
    1270:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN5Print5printERK6String>
  println();
    1274:	ce 01       	movw	r24, r28
    1276:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	08 95       	ret

00001280 <_ZN5Print7printlnEli>:
  print(n, base);
  println();
}

void Print::println(long n, int base)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
  print(n, base);
    1286:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
  println();
    128a:	ce 01       	movw	r24, r28
    128c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    1290:	df 91       	pop	r29
    1292:	cf 91       	pop	r28
    1294:	08 95       	ret

00001296 <_ZN5Print7printlnEii>:
  print(b, base);
  println();
}

void Print::println(int n, int base)
{
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	ec 01       	movw	r28, r24
    129c:	cb 01       	movw	r24, r22
    129e:	9a 01       	movw	r18, r20
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    12a0:	ac 01       	movw	r20, r24
    12a2:	66 27       	eor	r22, r22
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	60 95       	com	r22
    12a8:	76 2f       	mov	r23, r22
    12aa:	ce 01       	movw	r24, r28
    12ac:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
}

void Print::println(int n, int base)
{
  print(n, base);
  println();
    12b0:	ce 01       	movw	r24, r28
    12b2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <_ZN5Print7printlnEci>:
  print(c);
  println();
}

void Print::println(char c, int base)
{
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	9a 01       	movw	r18, r20
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    12c4:	46 2f       	mov	r20, r22
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
}

void Print::println(char c, int base)
{
  print(c, base);
  println();
    12d0:	ce 01       	movw	r24, r28
    12d2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	08 95       	ret

000012dc <_ZN5Print10printFloatEdh>:
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
{ 
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
    12f4:	6a 01       	movw	r12, r20
    12f6:	7b 01       	movw	r14, r22
    12f8:	12 2f       	mov	r17, r18
  // Handle negative numbers
  if (number < 0.0)
    12fa:	cb 01       	movw	r24, r22
    12fc:	ba 01       	movw	r22, r20
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <__ltsf2>
    1308:	88 23       	and	r24, r24
    130a:	0c f4       	brge	.+2      	; 0x130e <_ZN5Print10printFloatEdh+0x32>
    130c:	83 c0       	rjmp	.+262    	; 0x1414 <_ZN5Print10printFloatEdh+0x138>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    130e:	11 23       	and	r17, r17
    1310:	09 f4       	brne	.+2      	; 0x1314 <_ZN5Print10printFloatEdh+0x38>
    1312:	8e c0       	rjmp	.+284    	; 0x1430 <_ZN5Print10printFloatEdh+0x154>
    1314:	00 e0       	ldi	r16, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	2f e3       	ldi	r18, 0x3F	; 63
    rounding /= 10.0;
    131e:	da 01       	movw	r26, r20
    1320:	f9 01       	movw	r30, r18
    1322:	6b 2f       	mov	r22, r27
    1324:	74 2f       	mov	r23, r20
    1326:	8f 2f       	mov	r24, r31
    1328:	92 2f       	mov	r25, r18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	40 e2       	ldi	r20, 0x20	; 32
    1330:	51 e4       	ldi	r21, 0x41	; 65
    1332:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__divsf3>
    1336:	56 2f       	mov	r21, r22
    1338:	47 2f       	mov	r20, r23
    133a:	38 2f       	mov	r19, r24
    133c:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    133e:	0f 5f       	subi	r16, 0xFF	; 255
    1340:	01 17       	cp	r16, r17
    1342:	68 f3       	brcs	.-38     	; 0x131e <_ZN5Print10printFloatEdh+0x42>
    rounding /= 10.0;
  
  number += rounding;
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	da 01       	movw	r26, r20
    134a:	f9 01       	movw	r30, r18
    134c:	2b 2f       	mov	r18, r27
    134e:	3a 2f       	mov	r19, r26
    1350:	4f 2f       	mov	r20, r31
    1352:	5e 2f       	mov	r21, r30
    1354:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__addsf3>
    1358:	5b 01       	movw	r10, r22
    135a:	c8 2e       	mov	r12, r24
    135c:	09 2f       	mov	r16, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    135e:	7b 2d       	mov	r23, r11
    1360:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__fixunssfsi>
    1364:	96 2e       	mov	r9, r22
    1366:	f7 2e       	mov	r15, r23
    1368:	e8 2e       	mov	r14, r24
    136a:	d9 2e       	mov	r13, r25
  double remainder = number - (double)int_part;
    136c:	0e 94 b9 23 	call	0x4772	; 0x4772 <__floatunsisf>
    1370:	9b 01       	movw	r18, r22
    1372:	ac 01       	movw	r20, r24
    1374:	6a 2d       	mov	r22, r10
    1376:	7b 2d       	mov	r23, r11
    1378:	8c 2d       	mov	r24, r12
    137a:	90 2f       	mov	r25, r16
    137c:	0e 94 a5 20 	call	0x414a	; 0x414a <__subsf3>
    1380:	5b 01       	movw	r10, r22
    1382:	c8 2e       	mov	r12, r24
    1384:	09 2f       	mov	r16, r25
  print(int_part);
    1386:	ce 01       	movw	r24, r28
    1388:	49 2d       	mov	r20, r9
    138a:	5f 2d       	mov	r21, r15
    138c:	6e 2d       	mov	r22, r14
    138e:	7d 2d       	mov	r23, r13
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 
    1398:	ce 01       	movw	r24, r28
    139a:	65 e2       	ldi	r22, 0x25	; 37
    139c:	71 e0       	ldi	r23, 0x01	; 1
    139e:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN5Print5printEPKc>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    13a2:	6a 2d       	mov	r22, r10
    13a4:	7b 2d       	mov	r23, r11
    13a6:	8c 2d       	mov	r24, r12
    13a8:	90 2f       	mov	r25, r16
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e2       	ldi	r20, 0x20	; 32
    13b0:	51 e4       	ldi	r21, 0x41	; 65
    13b2:	0e 94 03 21 	call	0x4206	; 0x4206 <__mulsf3>
    13b6:	06 2f       	mov	r16, r22
    13b8:	b7 2e       	mov	r11, r23
    13ba:	a8 2e       	mov	r10, r24
    13bc:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    13be:	0e 94 66 23 	call	0x46cc	; 0x46cc <__fixsfsi>
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
{
  print((long) n, base);
    13c2:	6b 01       	movw	r12, r22
    13c4:	ee 24       	eor	r14, r14
    13c6:	d7 fc       	sbrc	r13, 7
    13c8:	e0 94       	com	r14
    13ca:	fe 2c       	mov	r15, r14
    13cc:	ce 01       	movw	r24, r28
    13ce:	b7 01       	movw	r22, r14
    13d0:	a6 01       	movw	r20, r12
    13d2:	2a e0       	ldi	r18, 0x0A	; 10
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    13da:	c7 01       	movw	r24, r14
    13dc:	b6 01       	movw	r22, r12
    13de:	0e 94 09 23 	call	0x4612	; 0x4612 <__floatsisf>
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	60 2f       	mov	r22, r16
    13e8:	7b 2d       	mov	r23, r11
    13ea:	8a 2d       	mov	r24, r10
    13ec:	99 2d       	mov	r25, r9
    13ee:	0e 94 a5 20 	call	0x414a	; 0x414a <__subsf3>
    13f2:	5b 01       	movw	r10, r22
    13f4:	c8 2e       	mov	r12, r24
    13f6:	09 2f       	mov	r16, r25
    13f8:	11 50       	subi	r17, 0x01	; 1
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    13fa:	99 f6       	brne	.-90     	; 0x13a2 <_ZN5Print10printFloatEdh+0xc6>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	08 95       	ret
  write(str);
}

void Print::print(char c, int base)
{
  print((long) c, base);
    1414:	ce 01       	movw	r24, r28
    1416:	4d e2       	ldi	r20, 0x2D	; 45
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print5printEli>
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    1426:	f7 fa       	bst	r15, 7
    1428:	f0 94       	com	r15
    142a:	f7 f8       	bld	r15, 7
    142c:	f0 94       	com	r15
    142e:	6f cf       	rjmp	.-290    	; 0x130e <_ZN5Print10printFloatEdh+0x32>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  print(int_part);
    1430:	c7 01       	movw	r24, r14
    1432:	b6 01       	movw	r22, r12
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 d6 20 	call	0x41ac	; 0x41ac <__addsf3>
    1440:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__fixunssfsi>
    1444:	ab 01       	movw	r20, r22
    1446:	bc 01       	movw	r22, r24
    1448:	ce 01       	movw	r24, r28
    144a:	2a e0       	ldi	r18, 0x0A	; 10
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN5Print5printEmi>
    1452:	d4 cf       	rjmp	.-88     	; 0x13fc <_ZN5Print10printFloatEdh+0x120>

00001454 <_ZN5Print5printEdi>:
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    1454:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN5Print10printFloatEdh>
}
    1458:	08 95       	ret

0000145a <_ZN5Print7printlnEdi>:
  print(n, base);
  println();
}

void Print::println(double n, int digits)
{
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	ec 01       	movw	r28, r24
  else printNumber(n, base);
}

void Print::print(double n, int digits)
{
  printFloat(n, digits);
    1460:	0e 94 6e 09 	call	0x12dc	; 0x12dc <_ZN5Print10printFloatEdh>
}

void Print::println(double n, int digits)
{
  print(n, digits);
  println();
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN5Print7printlnEv>
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	c9 f0       	breq	.+50     	; 0x14a6 <_Z12disableTimerh+0x36>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	18 f4       	brcc	.+6      	; 0x147e <_Z12disableTimerh+0xe>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1478:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    147c:	08 95       	ret
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	09 f0       	breq	.+2      	; 0x1484 <_Z12disableTimerh+0x14>
    1482:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1484:	80 91 70 00 	lds	r24, 0x0070
    1488:	8d 7f       	andi	r24, 0xFD	; 253
    148a:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1494:	80 91 b1 00 	lds	r24, 0x00B1
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	84 60       	ori	r24, 0x04	; 4
    149c:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    14a0:	10 92 b3 00 	sts	0x00B3, r1
    14a4:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    14a6:	80 91 6f 00 	lds	r24, 0x006F
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	80 93 6f 00 	sts	0x006F, r24
      break;
    14b0:	08 95       	ret

000014b2 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    14b2:	1f 93       	push	r17
    14b4:	18 2f       	mov	r17, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    14b6:	80 91 31 01 	lds	r24, 0x0131
    14ba:	81 17       	cp	r24, r17
    14bc:	49 f0       	breq	.+18     	; 0x14d0 <_Z6noToneh+0x1e>
    14be:	8f ef       	ldi	r24, 0xFF	; 255
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    14c0:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    14c4:	81 2f       	mov	r24, r17
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
}
    14cc:	1f 91       	pop	r17
    14ce:	08 95       	ret
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    14d0:	e4 e5       	ldi	r30, 0x54	; 84
    14d2:	f2 e0       	ldi	r31, 0x02	; 2
    14d4:	84 91       	lpm	r24, Z+
      tone_pins[i] = 255;
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	90 93 31 01 	sts	0x0131, r25
    }
  }
  
  disableTimer(_timer);
    14dc:	0e 94 38 0a 	call	0x1470	; 0x1470 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    14e0:	81 2f       	mov	r24, r17
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
}
    14e8:	1f 91       	pop	r17
    14ea:	08 95       	ret

000014ec <__vector_7>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    150e:	80 91 0a 03 	lds	r24, 0x030A
    1512:	90 91 0b 03 	lds	r25, 0x030B
    1516:	a0 91 0c 03 	lds	r26, 0x030C
    151a:	b0 91 0d 03 	lds	r27, 0x030D
    151e:	00 97       	sbiw	r24, 0x00	; 0
    1520:	a1 05       	cpc	r26, r1
    1522:	b1 05       	cpc	r27, r1
    1524:	d1 f1       	breq	.+116    	; 0x159a <__vector_7+0xae>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1526:	e0 91 0e 03 	lds	r30, 0x030E
    152a:	f0 91 0f 03 	lds	r31, 0x030F
    152e:	80 81       	ld	r24, Z
    1530:	90 91 10 03 	lds	r25, 0x0310
    1534:	89 27       	eor	r24, r25
    1536:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1538:	80 91 0a 03 	lds	r24, 0x030A
    153c:	90 91 0b 03 	lds	r25, 0x030B
    1540:	a0 91 0c 03 	lds	r26, 0x030C
    1544:	b0 91 0d 03 	lds	r27, 0x030D
    1548:	18 16       	cp	r1, r24
    154a:	19 06       	cpc	r1, r25
    154c:	1a 06       	cpc	r1, r26
    154e:	1b 06       	cpc	r1, r27
    1550:	9c f4       	brge	.+38     	; 0x1578 <__vector_7+0x8c>
      timer2_toggle_count--;
    1552:	80 91 0a 03 	lds	r24, 0x030A
    1556:	90 91 0b 03 	lds	r25, 0x030B
    155a:	a0 91 0c 03 	lds	r26, 0x030C
    155e:	b0 91 0d 03 	lds	r27, 0x030D
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	a1 09       	sbc	r26, r1
    1566:	b1 09       	sbc	r27, r1
    1568:	80 93 0a 03 	sts	0x030A, r24
    156c:	90 93 0b 03 	sts	0x030B, r25
    1570:	a0 93 0c 03 	sts	0x030C, r26
    1574:	b0 93 0d 03 	sts	0x030D, r27
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1578:	ff 91       	pop	r31
    157a:	ef 91       	pop	r30
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	0f 90       	pop	r0
    1596:	1f 90       	pop	r1
    1598:	18 95       	reti
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    159a:	80 91 31 01 	lds	r24, 0x0131
    159e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <_Z6noToneh>
    15a2:	ea cf       	rjmp	.-44     	; 0x1578 <__vector_7+0x8c>

000015a4 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    15a4:	2f 92       	push	r2
    15a6:	3f 92       	push	r3
    15a8:	4f 92       	push	r4
    15aa:	5f 92       	push	r5
    15ac:	6f 92       	push	r6
    15ae:	7f 92       	push	r7
    15b0:	8f 92       	push	r8
    15b2:	9f 92       	push	r9
    15b4:	af 92       	push	r10
    15b6:	bf 92       	push	r11
    15b8:	cf 92       	push	r12
    15ba:	df 92       	push	r13
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	1f 93       	push	r17
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <_Z4tonehjm+0x24>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <_Z4tonehjm+0x26>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	1b 01       	movw	r2, r22
    15d0:	49 01       	movw	r8, r18
    15d2:	5a 01       	movw	r10, r20
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    15d4:	90 91 31 01 	lds	r25, 0x0131
    15d8:	89 17       	cp	r24, r25
    15da:	c9 f0       	breq	.+50     	; 0x160e <_Z4tonehjm+0x6a>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    15dc:	9f 3f       	cpi	r25, 0xFF	; 255
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_Z4tonehjm+0x3e>
    15e0:	6d c1       	rjmp	.+730    	; 0x18bc <_Z4tonehjm+0x318>
        break;
#endif

    }
  }
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	1f 91       	pop	r17
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	df 90       	pop	r13
    15f6:	cf 90       	pop	r12
    15f8:	bf 90       	pop	r11
    15fa:	af 90       	pop	r10
    15fc:	9f 90       	pop	r9
    15fe:	8f 90       	pop	r8
    1600:	7f 90       	pop	r7
    1602:	6f 90       	pop	r6
    1604:	5f 90       	pop	r5
    1606:	4f 90       	pop	r4
    1608:	3f 90       	pop	r3
    160a:	2f 90       	pop	r2
    160c:	08 95       	ret
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    160e:	e4 e5       	ldi	r30, 0x54	; 84
    1610:	f2 e0       	ldi	r31, 0x02	; 2
    1612:	14 91       	lpm	r17, Z+
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1614:	17 fd       	sbrc	r17, 7
    1616:	e5 cf       	rjmp	.-54     	; 0x15e2 <_Z4tonehjm+0x3e>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    161e:	11 23       	and	r17, r17
    1620:	09 f4       	brne	.+2      	; 0x1624 <_Z4tonehjm+0x80>
    1622:	44 c0       	rjmp	.+136    	; 0x16ac <_Z4tonehjm+0x108>
    1624:	12 30       	cpi	r17, 0x02	; 2
    1626:	09 f4       	brne	.+2      	; 0x162a <_Z4tonehjm+0x86>
    1628:	41 c0       	rjmp	.+130    	; 0x16ac <_Z4tonehjm+0x108>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    162a:	21 01       	movw	r4, r2
    162c:	66 24       	eor	r6, r6
    162e:	77 24       	eor	r7, r7
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	72 e1       	ldi	r23, 0x12	; 18
    1634:	8a e7       	ldi	r24, 0x7A	; 122
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a3 01       	movw	r20, r6
    163a:	92 01       	movw	r18, r4
    163c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1640:	69 01       	movw	r12, r18
    1642:	7a 01       	movw	r14, r20
    1644:	08 94       	sec
    1646:	c1 08       	sbc	r12, r1
    1648:	d1 08       	sbc	r13, r1
    164a:	e1 08       	sbc	r14, r1
    164c:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    164e:	e0 e0       	ldi	r30, 0x00	; 0
    1650:	ce 16       	cp	r12, r30
    1652:	e0 e0       	ldi	r30, 0x00	; 0
    1654:	de 06       	cpc	r13, r30
    1656:	e1 e0       	ldi	r30, 0x01	; 1
    1658:	ee 06       	cpc	r14, r30
    165a:	e0 e0       	ldi	r30, 0x00	; 0
    165c:	fe 06       	cpc	r15, r30
    165e:	08 f0       	brcs	.+2      	; 0x1662 <_Z4tonehjm+0xbe>
    1660:	ef c0       	rjmp	.+478    	; 0x1840 <_Z4tonehjm+0x29c>
    1662:	91 e0       	ldi	r25, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    1664:	11 30       	cpi	r17, 0x01	; 1
    1666:	09 f4       	brne	.+2      	; 0x166a <_Z4tonehjm+0xc6>
    1668:	fc c0       	rjmp	.+504    	; 0x1862 <_Z4tonehjm+0x2be>

    }
    

    // Calculate the toggle count
    if (duration > 0)
    166a:	81 14       	cp	r8, r1
    166c:	91 04       	cpc	r9, r1
    166e:	a1 04       	cpc	r10, r1
    1670:	b1 04       	cpc	r11, r1
    1672:	09 f0       	breq	.+2      	; 0x1676 <_Z4tonehjm+0xd2>
    1674:	a8 c0       	rjmp	.+336    	; 0x17c6 <_Z4tonehjm+0x222>
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	9f ef       	ldi	r25, 0xFF	; 255
    167a:	dc 01       	movw	r26, r24
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    167c:	11 30       	cpi	r17, 0x01	; 1
    167e:	09 f4       	brne	.+2      	; 0x1682 <_Z4tonehjm+0xde>
    1680:	b8 c0       	rjmp	.+368    	; 0x17f2 <_Z4tonehjm+0x24e>
    1682:	12 30       	cpi	r17, 0x02	; 2
    1684:	09 f4       	brne	.+2      	; 0x1688 <_Z4tonehjm+0xe4>
    1686:	cc c0       	rjmp	.+408    	; 0x1820 <_Z4tonehjm+0x27c>
    1688:	11 23       	and	r17, r17
    168a:	09 f0       	breq	.+2      	; 0x168e <_Z4tonehjm+0xea>
    168c:	aa cf       	rjmp	.-172    	; 0x15e2 <_Z4tonehjm+0x3e>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    168e:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
    1690:	80 93 fc 02 	sts	0x02FC, r24
    1694:	90 93 fd 02 	sts	0x02FD, r25
    1698:	a0 93 fe 02 	sts	0x02FE, r26
    169c:	b0 93 ff 02 	sts	0x02FF, r27
        bitWrite(TIMSK0, OCIE0A, 1);
    16a0:	80 91 6e 00 	lds	r24, 0x006E
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	80 93 6e 00 	sts	0x006E, r24
        break;
    16aa:	9b cf       	rjmp	.-202    	; 0x15e2 <_Z4tonehjm+0x3e>
    pinMode(_pin, OUTPUT);
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
    16ac:	21 01       	movw	r4, r2
    16ae:	66 24       	eor	r6, r6
    16b0:	77 24       	eor	r7, r7
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	72 e1       	ldi	r23, 0x12	; 18
    16b6:	8a e7       	ldi	r24, 0x7A	; 122
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a3 01       	movw	r20, r6
    16bc:	92 01       	movw	r18, r4
    16be:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    16c2:	29 83       	std	Y+1, r18	; 0x01
    16c4:	3a 83       	std	Y+2, r19	; 0x02
    16c6:	4b 83       	std	Y+3, r20	; 0x03
    16c8:	5c 83       	std	Y+4, r21	; 0x04
    16ca:	c9 80       	ldd	r12, Y+1	; 0x01
    16cc:	da 80       	ldd	r13, Y+2	; 0x02
    16ce:	eb 80       	ldd	r14, Y+3	; 0x03
    16d0:	fc 80       	ldd	r15, Y+4	; 0x04
    16d2:	08 94       	sec
    16d4:	c1 08       	sbc	r12, r1
    16d6:	d1 08       	sbc	r13, r1
    16d8:	e1 08       	sbc	r14, r1
    16da:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    16dc:	ff ef       	ldi	r31, 0xFF	; 255
    16de:	cf 16       	cp	r12, r31
    16e0:	d1 04       	cpc	r13, r1
    16e2:	e1 04       	cpc	r14, r1
    16e4:	f1 04       	cpc	r15, r1
    16e6:	09 f0       	breq	.+2      	; 0x16ea <_Z4tonehjm+0x146>
    16e8:	08 f4       	brcc	.+2      	; 0x16ec <_Z4tonehjm+0x148>
    16ea:	95 c0       	rjmp	.+298    	; 0x1816 <_Z4tonehjm+0x272>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    16ec:	60 e4       	ldi	r22, 0x40	; 64
    16ee:	72 e4       	ldi	r23, 0x42	; 66
    16f0:	8f e0       	ldi	r24, 0x0F	; 15
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a3 01       	movw	r20, r6
    16f6:	92 01       	movw	r18, r4
    16f8:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    16fc:	69 01       	movw	r12, r18
    16fe:	7a 01       	movw	r14, r20
    1700:	08 94       	sec
    1702:	c1 08       	sbc	r12, r1
    1704:	d1 08       	sbc	r13, r1
    1706:	e1 08       	sbc	r14, r1
    1708:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    170a:	12 30       	cpi	r17, 0x02	; 2
    170c:	09 f4       	brne	.+2      	; 0x1710 <_Z4tonehjm+0x16c>
    170e:	b0 c0       	rjmp	.+352    	; 0x1870 <_Z4tonehjm+0x2cc>
    1710:	82 e0       	ldi	r24, 0x02	; 2
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    1712:	9f ef       	ldi	r25, 0xFF	; 255
    1714:	c9 16       	cp	r12, r25
    1716:	d1 04       	cpc	r13, r1
    1718:	e1 04       	cpc	r14, r1
    171a:	f1 04       	cpc	r15, r1
    171c:	09 f0       	breq	.+2      	; 0x1720 <_Z4tonehjm+0x17c>
    171e:	08 f4       	brcc	.+2      	; 0x1722 <_Z4tonehjm+0x17e>
    1720:	7b c0       	rjmp	.+246    	; 0x1818 <_Z4tonehjm+0x274>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    1722:	68 e4       	ldi	r22, 0x48	; 72
    1724:	78 ee       	ldi	r23, 0xE8	; 232
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a3 01       	movw	r20, r6
    172c:	92 01       	movw	r18, r4
    172e:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1732:	69 01       	movw	r12, r18
    1734:	7a 01       	movw	r14, r20
    1736:	08 94       	sec
    1738:	c1 08       	sbc	r12, r1
    173a:	d1 08       	sbc	r13, r1
    173c:	e1 08       	sbc	r14, r1
    173e:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    1740:	11 23       	and	r17, r17
    1742:	09 f0       	breq	.+2      	; 0x1746 <_Z4tonehjm+0x1a2>
    1744:	ae c0       	rjmp	.+348    	; 0x18a2 <_Z4tonehjm+0x2fe>
    1746:	83 e0       	ldi	r24, 0x03	; 3
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    1748:	ff ef       	ldi	r31, 0xFF	; 255
    174a:	cf 16       	cp	r12, r31
    174c:	d1 04       	cpc	r13, r1
    174e:	e1 04       	cpc	r14, r1
    1750:	f1 04       	cpc	r15, r1
    1752:	09 f0       	breq	.+2      	; 0x1756 <_Z4tonehjm+0x1b2>
    1754:	08 f4       	brcc	.+2      	; 0x1758 <_Z4tonehjm+0x1b4>
    1756:	60 c0       	rjmp	.+192    	; 0x1818 <_Z4tonehjm+0x274>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    1758:	62 e1       	ldi	r22, 0x12	; 18
    175a:	7a e7       	ldi	r23, 0x7A	; 122
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a3 01       	movw	r20, r6
    1762:	92 01       	movw	r18, r4
    1764:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1768:	69 01       	movw	r12, r18
    176a:	7a 01       	movw	r14, r20
    176c:	08 94       	sec
    176e:	c1 08       	sbc	r12, r1
    1770:	d1 08       	sbc	r13, r1
    1772:	e1 08       	sbc	r14, r1
    1774:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    1776:	11 23       	and	r17, r17
    1778:	09 f4       	brne	.+2      	; 0x177c <_Z4tonehjm+0x1d8>
    177a:	1e c1       	rjmp	.+572    	; 0x19b8 <_Z4tonehjm+0x414>
    177c:	86 e0       	ldi	r24, 0x06	; 6
            if (ocr > 255)
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	c9 16       	cp	r12, r25
    1782:	d1 04       	cpc	r13, r1
    1784:	e1 04       	cpc	r14, r1
    1786:	f1 04       	cpc	r15, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <_Z4tonehjm+0x1e8>
    178a:	08 f4       	brcc	.+2      	; 0x178e <_Z4tonehjm+0x1ea>
    178c:	45 c0       	rjmp	.+138    	; 0x1818 <_Z4tonehjm+0x274>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    178e:	c9 80       	ldd	r12, Y+1	; 0x01
    1790:	da 80       	ldd	r13, Y+2	; 0x02
    1792:	eb 80       	ldd	r14, Y+3	; 0x03
    1794:	fc 80       	ldd	r15, Y+4	; 0x04
    1796:	9a e0       	ldi	r25, 0x0A	; 10
    1798:	f6 94       	lsr	r15
    179a:	e7 94       	ror	r14
    179c:	d7 94       	ror	r13
    179e:	c7 94       	ror	r12
    17a0:	9a 95       	dec	r25
    17a2:	d1 f7       	brne	.-12     	; 0x1798 <_Z4tonehjm+0x1f4>
    17a4:	08 94       	sec
    17a6:	c1 08       	sbc	r12, r1
    17a8:	d1 08       	sbc	r13, r1
    17aa:	e1 08       	sbc	r14, r1
    17ac:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    17ae:	11 23       	and	r17, r17
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <_Z4tonehjm+0x210>
    17b2:	17 c1       	rjmp	.+558    	; 0x19e2 <_Z4tonehjm+0x43e>
    17b4:	87 e0       	ldi	r24, 0x07	; 7
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
    17b6:	80 93 b1 00 	sts	0x00B1, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
    17ba:	81 14       	cp	r8, r1
    17bc:	91 04       	cpc	r9, r1
    17be:	a1 04       	cpc	r10, r1
    17c0:	b1 04       	cpc	r11, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <_Z4tonehjm+0x222>
    17c4:	58 cf       	rjmp	.-336    	; 0x1676 <_Z4tonehjm+0xd2>
    {
      toggle_count = 2 * frequency * duration / 1000;
    17c6:	b1 01       	movw	r22, r2
    17c8:	66 0f       	add	r22, r22
    17ca:	77 1f       	adc	r23, r23
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a5 01       	movw	r20, r10
    17d2:	94 01       	movw	r18, r8
    17d4:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    17d8:	28 ee       	ldi	r18, 0xE8	; 232
    17da:	33 e0       	ldi	r19, 0x03	; 3
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    17e4:	82 2f       	mov	r24, r18
    17e6:	93 2f       	mov	r25, r19
    17e8:	a4 2f       	mov	r26, r20
    17ea:	b5 2f       	mov	r27, r21
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    17ec:	11 30       	cpi	r17, 0x01	; 1
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <_Z4tonehjm+0x24e>
    17f0:	48 cf       	rjmp	.-368    	; 0x1682 <_Z4tonehjm+0xde>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    17f2:	d0 92 89 00 	sts	0x0089, r13
    17f6:	c0 92 88 00 	sts	0x0088, r12
        timer1_toggle_count = toggle_count;
    17fa:	80 93 03 03 	sts	0x0303, r24
    17fe:	90 93 04 03 	sts	0x0304, r25
    1802:	a0 93 05 03 	sts	0x0305, r26
    1806:	b0 93 06 03 	sts	0x0306, r27
        bitWrite(TIMSK1, OCIE1A, 1);
    180a:	80 91 6f 00 	lds	r24, 0x006F
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	80 93 6f 00 	sts	0x006F, r24
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    1814:	e6 ce       	rjmp	.-564    	; 0x15e2 <_Z4tonehjm+0x3e>
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    1816:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    1818:	11 23       	and	r17, r17
    181a:	69 f6       	brne	.-102    	; 0x17b6 <_Z4tonehjm+0x212>
      {
        TCCR0B = prescalarbits;
    181c:	85 bd       	out	0x25, r24	; 37
    181e:	25 cf       	rjmp	.-438    	; 0x166a <_Z4tonehjm+0xc6>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    1820:	c0 92 b3 00 	sts	0x00B3, r12
        timer2_toggle_count = toggle_count;
    1824:	80 93 0a 03 	sts	0x030A, r24
    1828:	90 93 0b 03 	sts	0x030B, r25
    182c:	a0 93 0c 03 	sts	0x030C, r26
    1830:	b0 93 0d 03 	sts	0x030D, r27
        bitWrite(TIMSK2, OCIE2A, 1);
    1834:	80 91 70 00 	lds	r24, 0x0070
    1838:	82 60       	ori	r24, 0x02	; 2
    183a:	80 93 70 00 	sts	0x0070, r24
    183e:	d1 ce       	rjmp	.-606    	; 0x15e2 <_Z4tonehjm+0x3e>
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
      if (ocr > 0xffff)
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    1840:	68 e4       	ldi	r22, 0x48	; 72
    1842:	78 ee       	ldi	r23, 0xE8	; 232
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a3 01       	movw	r20, r6
    184a:	92 01       	movw	r18, r4
    184c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1850:	69 01       	movw	r12, r18
    1852:	7a 01       	movw	r14, r20
    1854:	08 94       	sec
    1856:	c1 08       	sbc	r12, r1
    1858:	d1 08       	sbc	r13, r1
    185a:	e1 08       	sbc	r14, r1
    185c:	f1 08       	sbc	r15, r1
    185e:	93 e0       	ldi	r25, 0x03	; 3
    1860:	01 cf       	rjmp	.-510    	; 0x1664 <_Z4tonehjm+0xc0>
      }

      if (_timer == 1)
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    1862:	80 91 81 00 	lds	r24, 0x0081
    1866:	88 7f       	andi	r24, 0xF8	; 248
    1868:	89 2b       	or	r24, r25
    186a:	80 93 81 00 	sts	0x0081, r24
    186e:	fd ce       	rjmp	.-518    	; 0x166a <_Z4tonehjm+0xc6>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	c8 16       	cp	r12, r24
    1874:	d1 04       	cpc	r13, r1
    1876:	e1 04       	cpc	r14, r1
    1878:	f1 04       	cpc	r15, r1
    187a:	09 f0       	breq	.+2      	; 0x187e <_Z4tonehjm+0x2da>
    187c:	08 f4       	brcc	.+2      	; 0x1880 <_Z4tonehjm+0x2dc>
    187e:	9a c0       	rjmp	.+308    	; 0x19b4 <_Z4tonehjm+0x410>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    1880:	60 e9       	ldi	r22, 0x90	; 144
    1882:	70 ed       	ldi	r23, 0xD0	; 208
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a3 01       	movw	r20, r6
    188a:	92 01       	movw	r18, r4
    188c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    1890:	69 01       	movw	r12, r18
    1892:	7a 01       	movw	r14, r20
    1894:	08 94       	sec
    1896:	c1 08       	sbc	r12, r1
    1898:	d1 08       	sbc	r13, r1
    189a:	e1 08       	sbc	r14, r1
    189c:	f1 08       	sbc	r15, r1
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	38 cf       	rjmp	.-400    	; 0x1712 <_Z4tonehjm+0x16e>
        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    18a2:	12 30       	cpi	r17, 0x02	; 2
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <_Z4tonehjm+0x304>
    18a6:	8a c0       	rjmp	.+276    	; 0x19bc <_Z4tonehjm+0x418>
    18a8:	ef ef       	ldi	r30, 0xFF	; 255
    18aa:	ce 16       	cp	r12, r30
    18ac:	d1 04       	cpc	r13, r1
    18ae:	e1 04       	cpc	r14, r1
    18b0:	f1 04       	cpc	r15, r1
    18b2:	11 f0       	breq	.+4      	; 0x18b8 <_Z4tonehjm+0x314>
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <_Z4tonehjm+0x314>
    18b6:	84 c0       	rjmp	.+264    	; 0x19c0 <_Z4tonehjm+0x41c>
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	7d cf       	rjmp	.-262    	; 0x17b6 <_Z4tonehjm+0x212>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    18bc:	80 93 31 01 	sts	0x0131, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    18c0:	e4 e5       	ldi	r30, 0x54	; 84
    18c2:	f2 e0       	ldi	r31, 0x02	; 2
    18c4:	14 91       	lpm	r17, Z+
      break;
    }
  }
  
  if (_timer != -1)
    18c6:	1f 3f       	cpi	r17, 0xFF	; 255
    18c8:	09 f4       	brne	.+2      	; 0x18cc <_Z4tonehjm+0x328>
    18ca:	8b ce       	rjmp	.-746    	; 0x15e2 <_Z4tonehjm+0x3e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    18cc:	11 30       	cpi	r17, 0x01	; 1
    18ce:	31 f1       	breq	.+76     	; 0x191c <_Z4tonehjm+0x378>
    18d0:	12 30       	cpi	r17, 0x02	; 2
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <_Z4tonehjm+0x332>
    18d4:	49 c0       	rjmp	.+146    	; 0x1968 <_Z4tonehjm+0x3c4>
    18d6:	11 23       	and	r17, r17
    18d8:	09 f0       	breq	.+2      	; 0x18dc <_Z4tonehjm+0x338>
    18da:	9c ce       	rjmp	.-712    	; 0x1614 <_Z4tonehjm+0x70>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    18dc:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    18de:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    18e0:	94 b5       	in	r25, 0x24	; 36
    18e2:	92 60       	ori	r25, 0x02	; 2
    18e4:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    18e6:	95 b5       	in	r25, 0x25	; 37
    18e8:	91 60       	ori	r25, 0x01	; 1
    18ea:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    18ec:	28 2f       	mov	r18, r24
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	f9 01       	movw	r30, r18
    18f2:	e8 5e       	subi	r30, 0xE8	; 232
    18f4:	fd 4f       	sbci	r31, 0xFD	; 253
    18f6:	e4 91       	lpm	r30, Z+
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	ec 5f       	subi	r30, 0xFC	; 252
    1900:	fd 4f       	sbci	r31, 0xFD	; 253
    1902:	45 91       	lpm	r20, Z+
    1904:	54 91       	lpm	r21, Z+
    1906:	50 93 01 03 	sts	0x0301, r21
    190a:	40 93 00 03 	sts	0x0300, r20
        timer0_pin_mask = digitalPinToBitMask(_pin);
    190e:	24 5d       	subi	r18, 0xD4	; 212
    1910:	3d 4f       	sbci	r19, 0xFD	; 253
    1912:	f9 01       	movw	r30, r18
    1914:	24 91       	lpm	r18, Z+
    1916:	20 93 02 03 	sts	0x0302, r18
    191a:	7e ce       	rjmp	.-772    	; 0x1618 <_Z4tonehjm+0x74>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    191c:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
    1920:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
    1924:	90 91 81 00 	lds	r25, 0x0081
    1928:	98 60       	ori	r25, 0x08	; 8
    192a:	90 93 81 00 	sts	0x0081, r25
        bitWrite(TCCR1B, CS10, 1);
    192e:	90 91 81 00 	lds	r25, 0x0081
    1932:	91 60       	ori	r25, 0x01	; 1
    1934:	90 93 81 00 	sts	0x0081, r25
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	f9 01       	movw	r30, r18
    193e:	e8 5e       	subi	r30, 0xE8	; 232
    1940:	fd 4f       	sbci	r31, 0xFD	; 253
    1942:	e4 91       	lpm	r30, Z+
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	ee 0f       	add	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	ec 5f       	subi	r30, 0xFC	; 252
    194c:	fd 4f       	sbci	r31, 0xFD	; 253
    194e:	45 91       	lpm	r20, Z+
    1950:	54 91       	lpm	r21, Z+
    1952:	50 93 08 03 	sts	0x0308, r21
    1956:	40 93 07 03 	sts	0x0307, r20
        timer1_pin_mask = digitalPinToBitMask(_pin);
    195a:	24 5d       	subi	r18, 0xD4	; 212
    195c:	3d 4f       	sbci	r19, 0xFD	; 253
    195e:	f9 01       	movw	r30, r18
    1960:	24 91       	lpm	r18, Z+
    1962:	20 93 09 03 	sts	0x0309, r18
    1966:	58 ce       	rjmp	.-848    	; 0x1618 <_Z4tonehjm+0x74>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    1968:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
    196c:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
    1970:	90 91 b0 00 	lds	r25, 0x00B0
    1974:	92 60       	ori	r25, 0x02	; 2
    1976:	90 93 b0 00 	sts	0x00B0, r25
        bitWrite(TCCR2B, CS20, 1);
    197a:	90 91 b1 00 	lds	r25, 0x00B1
    197e:	91 60       	ori	r25, 0x01	; 1
    1980:	90 93 b1 00 	sts	0x00B1, r25
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	f9 01       	movw	r30, r18
    198a:	e8 5e       	subi	r30, 0xE8	; 232
    198c:	fd 4f       	sbci	r31, 0xFD	; 253
    198e:	e4 91       	lpm	r30, Z+
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	ee 0f       	add	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	ec 5f       	subi	r30, 0xFC	; 252
    1998:	fd 4f       	sbci	r31, 0xFD	; 253
    199a:	45 91       	lpm	r20, Z+
    199c:	54 91       	lpm	r21, Z+
    199e:	50 93 0f 03 	sts	0x030F, r21
    19a2:	40 93 0e 03 	sts	0x030E, r20
        timer2_pin_mask = digitalPinToBitMask(_pin);
    19a6:	24 5d       	subi	r18, 0xD4	; 212
    19a8:	3d 4f       	sbci	r19, 0xFD	; 253
    19aa:	f9 01       	movw	r30, r18
    19ac:	24 91       	lpm	r18, Z+
    19ae:	20 93 10 03 	sts	0x0310, r18
    19b2:	32 ce       	rjmp	.-924    	; 0x1618 <_Z4tonehjm+0x74>
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = prescalarbits;
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	ff ce       	rjmp	.-514    	; 0x17b6 <_Z4tonehjm+0x212>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	e1 ce       	rjmp	.-574    	; 0x177e <_Z4tonehjm+0x1da>
        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	c4 ce       	rjmp	.-632    	; 0x1748 <_Z4tonehjm+0x1a4>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    19c0:	64 e2       	ldi	r22, 0x24	; 36
    19c2:	74 ef       	ldi	r23, 0xF4	; 244
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a3 01       	movw	r20, r6
    19ca:	92 01       	movw	r18, r4
    19cc:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    19d0:	69 01       	movw	r12, r18
    19d2:	7a 01       	movw	r14, r20
    19d4:	08 94       	sec
    19d6:	c1 08       	sbc	r12, r1
    19d8:	d1 08       	sbc	r13, r1
    19da:	e1 08       	sbc	r14, r1
    19dc:	f1 08       	sbc	r15, r1
    19de:	85 e0       	ldi	r24, 0x05	; 5
    19e0:	b3 ce       	rjmp	.-666    	; 0x1748 <_Z4tonehjm+0x1a4>
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    19e2:	85 e0       	ldi	r24, 0x05	; 5
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = prescalarbits;
    19e4:	85 bd       	out	0x25, r24	; 37
    19e6:	41 ce       	rjmp	.-894    	; 0x166a <_Z4tonehjm+0xc6>

000019e8 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    19e8:	2f 92       	push	r2
    19ea:	3f 92       	push	r3
    19ec:	4f 92       	push	r4
    19ee:	5f 92       	push	r5
    19f0:	6f 92       	push	r6
    19f2:	7f 92       	push	r7
    19f4:	8f 92       	push	r8
    19f6:	9f 92       	push	r9
    19f8:	af 92       	push	r10
    19fa:	bf 92       	push	r11
    19fc:	cf 92       	push	r12
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	3b 01       	movw	r6, r22
    1a12:	4c 01       	movw	r8, r24
    1a14:	19 01       	movw	r2, r18
    1a16:	2a 01       	movw	r4, r20
    1a18:	6d 89       	ldd	r22, Y+21	; 0x15
    1a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a20:	6a 19       	sub	r22, r10
    1a22:	7b 09       	sbc	r23, r11
    1a24:	8c 09       	sbc	r24, r12
    1a26:	9d 09       	sbc	r25, r13
    1a28:	62 1a       	sub	r6, r18
    1a2a:	73 0a       	sbc	r7, r19
    1a2c:	84 0a       	sbc	r8, r20
    1a2e:	95 0a       	sbc	r9, r21
    1a30:	a4 01       	movw	r20, r8
    1a32:	93 01       	movw	r18, r6
    1a34:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    1a38:	e2 18       	sub	r14, r2
    1a3a:	f3 08       	sbc	r15, r3
    1a3c:	04 09       	sbc	r16, r4
    1a3e:	15 09       	sbc	r17, r5
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	0e 94 67 26 	call	0x4cce	; 0x4cce <__divmodsi4>
    1a48:	2a 0d       	add	r18, r10
    1a4a:	3b 1d       	adc	r19, r11
    1a4c:	4c 1d       	adc	r20, r12
    1a4e:	5d 1d       	adc	r21, r13
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1a50:	b9 01       	movw	r22, r18
    1a52:	ca 01       	movw	r24, r20
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	4f 90       	pop	r4
    1a74:	3f 90       	pop	r3
    1a76:	2f 90       	pop	r2
    1a78:	08 95       	ret

00001a7a <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    1a7a:	08 95       	ret

00001a7c <_Z8makeWordhh>:
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	38 2f       	mov	r19, r24
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	62 2b       	or	r22, r18
    1a84:	73 2b       	or	r23, r19
    1a86:	cb 01       	movw	r24, r22
    1a88:	08 95       	ret

00001a8a <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	7b 01       	movw	r14, r22
    1a94:	8c 01       	movw	r16, r24
  if (howbig == 0) {
    1a96:	61 15       	cp	r22, r1
    1a98:	71 05       	cpc	r23, r1
    1a9a:	81 05       	cpc	r24, r1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	51 f4       	brne	.+20     	; 0x1ab4 <_Z6randoml+0x2a>
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	a9 01       	movw	r20, r18
    return 0;
  }
  return random() % howbig;
}
    1aa6:	b9 01       	movw	r22, r18
    1aa8:	ca 01       	movw	r24, r20
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret
long random(long howbig)
{
  if (howbig == 0) {
    return 0;
  }
  return random() % howbig;
    1ab4:	0e 94 4b 28 	call	0x5096	; 0x5096 <random>
    1ab8:	a8 01       	movw	r20, r16
    1aba:	97 01       	movw	r18, r14
    1abc:	0e 94 67 26 	call	0x4cce	; 0x4cce <__divmodsi4>
    1ac0:	57 2f       	mov	r21, r23
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	39 2f       	mov	r19, r25
    1ac6:	86 2f       	mov	r24, r22
    1ac8:	95 2f       	mov	r25, r21
    1aca:	a4 2f       	mov	r26, r20
    1acc:	b3 2f       	mov	r27, r19
    1ace:	9c 01       	movw	r18, r24
    1ad0:	ad 01       	movw	r20, r26
}
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	08 95       	ret

00001ae0 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	7b 01       	movw	r14, r22
    1aea:	8c 01       	movw	r16, r24
  if (howsmall >= howbig) {
    1aec:	62 17       	cp	r22, r18
    1aee:	73 07       	cpc	r23, r19
    1af0:	84 07       	cpc	r24, r20
    1af2:	95 07       	cpc	r25, r21
    1af4:	64 f4       	brge	.+24     	; 0x1b0e <_Z6randomll+0x2e>
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    1af6:	ca 01       	movw	r24, r20
    1af8:	b9 01       	movw	r22, r18
    1afa:	6e 19       	sub	r22, r14
    1afc:	7f 09       	sbc	r23, r15
    1afe:	80 0b       	sbc	r24, r16
    1b00:	91 0b       	sbc	r25, r17
    1b02:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <_Z6randoml>
    1b06:	e6 0e       	add	r14, r22
    1b08:	f7 1e       	adc	r15, r23
    1b0a:	08 1f       	adc	r16, r24
    1b0c:	19 1f       	adc	r17, r25
}
    1b0e:	b7 01       	movw	r22, r14
    1b10:	c8 01       	movw	r24, r16
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	08 95       	ret

00001b1c <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <_Z10randomSeedj+0x6>
    1b20:	08 95       	ret
    srandom(seed);
    1b22:	bc 01       	movw	r22, r24
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0e 94 50 28 	call	0x50a0	; 0x50a0 <srandom>
    1b2c:	08 95       	ret

00001b2e <_ZNK6String6charAtEj>:
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
{
    1b2e:	dc 01       	movw	r26, r24
    1b30:	ed 91       	ld	r30, X+
    1b32:	fc 91       	ld	r31, X
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	e6 0f       	add	r30, r22
    1b38:	f7 1f       	adc	r31, r23
  return operator[]( loc );
}
    1b3a:	80 81       	ld	r24, Z
    1b3c:	08 95       	ret

00001b3e <_ZN6String9setCharAtEjc>:

void String::setCharAt( unsigned int loc, const char aChar ) 
{
    1b3e:	fc 01       	movw	r30, r24
  if(_buffer == NULL) return;
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	49 f0       	breq	.+18     	; 0x1b5a <_ZN6String9setCharAtEjc+0x1c>
  if(_length > loc) {
    1b48:	24 81       	ldd	r18, Z+4	; 0x04
    1b4a:	35 81       	ldd	r19, Z+5	; 0x05
    1b4c:	62 17       	cp	r22, r18
    1b4e:	73 07       	cpc	r23, r19
    1b50:	20 f4       	brcc	.+8      	; 0x1b5a <_ZN6String9setCharAtEjc+0x1c>
    _buffer[loc] = aChar;
    1b52:	68 0f       	add	r22, r24
    1b54:	79 1f       	adc	r23, r25
    1b56:	fb 01       	movw	r30, r22
    1b58:	40 83       	st	Z, r20
    1b5a:	08 95       	ret

00001b5c <_ZN6StringixEj>:
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
{
    1b5c:	fc 01       	movw	r30, r24
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    1b5e:	84 81       	ldd	r24, Z+4	; 0x04
    1b60:	95 81       	ldd	r25, Z+5	; 0x05
    1b62:	68 17       	cp	r22, r24
    1b64:	79 07       	cpc	r23, r25
    1b66:	40 f4       	brcc	.+16     	; 0x1b78 <_ZN6StringixEj+0x1c>
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	21 f0       	breq	.+8      	; 0x1b78 <_ZN6StringixEj+0x1c>
    dummy_writable_char = 0;
    return dummy_writable_char;
  }
  return _buffer[ index ];
    1b70:	68 0f       	add	r22, r24
    1b72:	79 1f       	adc	r23, r25
}
    1b74:	cb 01       	movw	r24, r22
    1b76:	08 95       	ret

char & String::operator[]( unsigned int index )
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
    dummy_writable_char = 0;
    1b78:	10 92 11 03 	sts	0x0311, r1
    1b7c:	61 e1       	ldi	r22, 0x11	; 17
    1b7e:	73 e0       	ldi	r23, 0x03	; 3
    return dummy_writable_char;
  }
  return _buffer[ index ];
}
    1b80:	cb 01       	movw	r24, r22
    1b82:	08 95       	ret

00001b84 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    1b84:	dc 01       	movw	r26, r24
    1b86:	ed 91       	ld	r30, X+
    1b88:	fc 91       	ld	r31, X
    1b8a:	11 97       	sbiw	r26, 0x01	; 1
    1b8c:	e6 0f       	add	r30, r22
    1b8e:	f7 1f       	adc	r31, r23
  // need to check for valid index, to do later
  return _buffer[ index ];
}
    1b90:	80 81       	ld	r24, Z
    1b92:	08 95       	ret

00001b94 <_ZN6String5toIntEv>:
  buf[len] = 0;
}


long String::toInt() {
  return atol(_buffer);
    1b94:	fc 01       	movw	r30, r24
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	0e 94 2a 29 	call	0x5254	; 0x5254 <atol>
}
    1b9e:	08 95       	ret

00001ba0 <_ZN6String11toCharArrayEPcj>:
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	fc 01       	movw	r30, r24
    1baa:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    1bac:	41 15       	cp	r20, r1
    1bae:	51 05       	cpc	r21, r1
    1bb0:	a1 f0       	breq	.+40     	; 0x1bda <_ZN6String11toCharArrayEPcj+0x3a>
    1bb2:	61 15       	cp	r22, r1
    1bb4:	71 05       	cpc	r23, r1
    1bb6:	89 f0       	breq	.+34     	; 0x1bda <_ZN6String11toCharArrayEPcj+0x3a>
  unsigned int len = bufsize - 1;
    1bb8:	84 81       	ldd	r24, Z+4	; 0x04
    1bba:	95 81       	ldd	r25, Z+5	; 0x05
    1bbc:	8a 01       	movw	r16, r20
    1bbe:	01 50       	subi	r16, 0x01	; 1
    1bc0:	10 40       	sbci	r17, 0x00	; 0
    1bc2:	80 17       	cp	r24, r16
    1bc4:	91 07       	cpc	r25, r17
    1bc6:	70 f0       	brcs	.+28     	; 0x1be4 <_ZN6String11toCharArrayEPcj+0x44>
  if (len > _length) len = _length;
  strncpy(buf, _buffer, len);
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	ce 01       	movw	r24, r28
    1bce:	a8 01       	movw	r20, r16
    1bd0:	0e 94 a6 29 	call	0x534c	; 0x534c <strncpy>
  buf[len] = 0;
    1bd4:	c0 0f       	add	r28, r16
    1bd6:	d1 1f       	adc	r29, r17
    1bd8:	18 82       	st	Y, r1
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret
}

void String::toCharArray(char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    1be4:	8c 01       	movw	r16, r24
    1be6:	f0 cf       	rjmp	.-32     	; 0x1bc8 <_ZN6String11toCharArrayEPcj+0x28>

00001be8 <_ZN6String8getBytesEPhj>:

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	eb 01       	movw	r28, r22
  if (!bufsize || !buf) return;
    1bf4:	41 15       	cp	r20, r1
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	a1 f0       	breq	.+40     	; 0x1c22 <_ZN6String8getBytesEPhj+0x3a>
    1bfa:	61 15       	cp	r22, r1
    1bfc:	71 05       	cpc	r23, r1
    1bfe:	89 f0       	breq	.+34     	; 0x1c22 <_ZN6String8getBytesEPhj+0x3a>
  unsigned int len = bufsize - 1;
    1c00:	84 81       	ldd	r24, Z+4	; 0x04
    1c02:	95 81       	ldd	r25, Z+5	; 0x05
    1c04:	8a 01       	movw	r16, r20
    1c06:	01 50       	subi	r16, 0x01	; 1
    1c08:	10 40       	sbci	r17, 0x00	; 0
    1c0a:	80 17       	cp	r24, r16
    1c0c:	91 07       	cpc	r25, r17
    1c0e:	70 f0       	brcs	.+28     	; 0x1c2c <_ZN6String8getBytesEPhj+0x44>
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	ce 01       	movw	r24, r28
    1c16:	a8 01       	movw	r20, r16
    1c18:	0e 94 a6 29 	call	0x534c	; 0x534c <strncpy>
  buf[len] = 0;
    1c1c:	c0 0f       	add	r28, r16
    1c1e:	d1 1f       	adc	r29, r17
    1c20:	18 82       	st	Y, r1
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
{
  if (!bufsize || !buf) return;
  unsigned int len = bufsize - 1;
    1c2c:	8c 01       	movw	r16, r24
    1c2e:	f0 cf       	rjmp	.-32     	; 0x1c10 <_ZN6String8getBytesEPhj+0x28>

00001c30 <_ZNK6String10startsWithERKS_j>:

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
    1c30:	fc 01       	movw	r30, r24
    1c32:	db 01       	movw	r26, r22
    1c34:	ca 01       	movw	r24, r20
  if ( offset > _length - s2._length )
    1c36:	14 96       	adiw	r26, 0x04	; 4
    1c38:	4d 91       	ld	r20, X+
    1c3a:	5c 91       	ld	r21, X
    1c3c:	15 97       	sbiw	r26, 0x05	; 5
    1c3e:	24 81       	ldd	r18, Z+4	; 0x04
    1c40:	35 81       	ldd	r19, Z+5	; 0x05
    1c42:	24 1b       	sub	r18, r20
    1c44:	35 0b       	sbc	r19, r21
    1c46:	28 17       	cp	r18, r24
    1c48:	39 07       	cpc	r19, r25
    1c4a:	80 f0       	brcs	.+32     	; 0x1c6c <_ZNK6String10startsWithERKS_j+0x3c>
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    1c4c:	20 81       	ld	r18, Z
    1c4e:	31 81       	ldd	r19, Z+1	; 0x01
    1c50:	6d 91       	ld	r22, X+
    1c52:	7c 91       	ld	r23, X
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	0e 94 98 29 	call	0x5330	; 0x5330 <strncmp>
    1c5c:	9c 01       	movw	r18, r24
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	21 15       	cp	r18, r1
    1c62:	31 05       	cpc	r19, r1
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <_ZNK6String10startsWithERKS_j+0x38>
}
    1c66:	08 95       	ret
boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
}
    1c6a:	08 95       	ret
  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
{
  if ( offset > _length - s2._length )
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	08 95       	ret

00001c70 <_ZNK6String10startsWithERKS_>:
  return -1;
}

boolean String::startsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    1c70:	fc 01       	movw	r30, r24
    1c72:	44 81       	ldd	r20, Z+4	; 0x04
    1c74:	55 81       	ldd	r21, Z+5	; 0x05
    1c76:	fb 01       	movw	r30, r22
    1c78:	24 81       	ldd	r18, Z+4	; 0x04
    1c7a:	35 81       	ldd	r19, Z+5	; 0x05
    1c7c:	42 17       	cp	r20, r18
    1c7e:	53 07       	cpc	r21, r19
    1c80:	10 f4       	brcc	.+4      	; 0x1c86 <_ZNK6String10startsWithERKS_+0x16>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	08 95       	ret
    return 0;

  return startsWith( s2, 0 );
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	50 e0       	ldi	r21, 0x00	; 0
    1c8a:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <_ZNK6String10startsWithERKS_j>
}
    1c8e:	08 95       	ret

00001c90 <_ZNK6String11lastIndexOfEcj>:
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
  if ( fromIndex >= _length )
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	48 17       	cp	r20, r24
    1ca6:	59 07       	cpc	r21, r25
    1ca8:	58 f0       	brcs	.+22     	; 0x1cc0 <_ZNK6String11lastIndexOfEcj+0x30>
  char tempchar = _buffer[fromIndex + 1];
  _buffer[fromIndex + 1] = '\0';
  char* temp = strrchr( _buffer, ch );
  _buffer[fromIndex + 1] = tempchar;

  if ( temp == NULL )
    1caa:	2f ef       	ldi	r18, 0xFF	; 255
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    1cae:	c9 01       	movw	r24, r18
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	08 95       	ret
int String::lastIndexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  char tempchar = _buffer[fromIndex + 1];
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	0f 5f       	subi	r16, 0xFF	; 255
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	e8 81       	ld	r30, Y
    1cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cca:	e0 0f       	add	r30, r16
    1ccc:	f1 1f       	adc	r31, r17
    1cce:	d0 80       	ld	r13, Z
  _buffer[fromIndex + 1] = '\0';
    1cd0:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
    1cd2:	e8 80       	ld	r14, Y
    1cd4:	f9 80       	ldd	r15, Y+1	; 0x01
    1cd6:	c7 01       	movw	r24, r14
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	0e 94 b5 29 	call	0x536a	; 0x536a <strrchr>
    1cde:	9c 01       	movw	r18, r24
  _buffer[fromIndex + 1] = tempchar;
    1ce0:	0e 0d       	add	r16, r14
    1ce2:	1f 1d       	adc	r17, r15
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	d0 82       	st	Z, r13

  if ( temp == NULL )
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	f9 f2       	breq	.-66     	; 0x1caa <_ZNK6String11lastIndexOfEcj+0x1a>
    return -1;

  return temp - _buffer;
    1cec:	88 81       	ld	r24, Y
    1cee:	99 81       	ldd	r25, Y+1	; 0x01
    1cf0:	28 1b       	sub	r18, r24
    1cf2:	39 0b       	sbc	r19, r25
    1cf4:	dc cf       	rjmp	.-72     	; 0x1cae <_ZNK6String11lastIndexOfEcj+0x1e>

00001cf6 <_ZNK6String11lastIndexOfEc>:
  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	44 81       	ldd	r20, Z+4	; 0x04
    1cfa:	55 81       	ldd	r21, Z+5	; 0x05
    1cfc:	41 50       	subi	r20, 0x01	; 1
    1cfe:	50 40       	sbci	r21, 0x00	; 0
    1d00:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <_ZNK6String11lastIndexOfEcj>
}
    1d04:	08 95       	ret

00001d06 <_ZNK6String7indexOfERKS_j>:
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    1d0c:	84 81       	ldd	r24, Z+4	; 0x04
    1d0e:	95 81       	ldd	r25, Z+5	; 0x05
    1d10:	48 17       	cp	r20, r24
    1d12:	59 07       	cpc	r21, r25
    1d14:	30 f0       	brcs	.+12     	; 0x1d22 <_ZNK6String7indexOfERKS_j+0x1c>
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );

  if ( theFind == NULL )
    1d16:	2f ef       	ldi	r18, 0xFF	; 255
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return theFind - _buffer; // pointer subtraction
}
    1d1a:	c9 01       	movw	r24, r18
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	08 95       	ret
int String::indexOf( const String &s2, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
    1d22:	c0 81       	ld	r28, Z
    1d24:	d1 81       	ldd	r29, Z+1	; 0x01
    1d26:	fb 01       	movw	r30, r22
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	ce 01       	movw	r24, r28
    1d2e:	84 0f       	add	r24, r20
    1d30:	95 1f       	adc	r25, r21
    1d32:	0e 94 c0 29 	call	0x5380	; 0x5380 <strstr>
    1d36:	9c 01       	movw	r18, r24

  if ( theFind == NULL )
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f3       	breq	.-38     	; 0x1d16 <_ZNK6String7indexOfERKS_j+0x10>
    return -1;

  return theFind - _buffer; // pointer subtraction
    1d3c:	2c 1b       	sub	r18, r28
    1d3e:	3d 0b       	sbc	r19, r29
    1d40:	ec cf       	rjmp	.-40     	; 0x1d1a <_ZNK6String7indexOfERKS_j+0x14>

00001d42 <_ZNK6String7indexOfERKS_>:
  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZNK6String7indexOfERKS_j>
}
    1d4a:	08 95       	ret

00001d4c <_ZNK6String7indexOfEcj>:
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	fc 01       	movw	r30, r24
  if ( fromIndex >= _length )
    1d52:	84 81       	ldd	r24, Z+4	; 0x04
    1d54:	95 81       	ldd	r25, Z+5	; 0x05
    1d56:	48 17       	cp	r20, r24
    1d58:	59 07       	cpc	r21, r25
    1d5a:	30 f0       	brcs	.+12     	; 0x1d68 <_ZNK6String7indexOfEcj+0x1c>
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
  if ( temp == NULL )
    1d5c:	2f ef       	ldi	r18, 0xFF	; 255
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    return -1;

  return temp - _buffer;
}
    1d60:	c9 01       	movw	r24, r18
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret
int String::indexOf( char ch, unsigned int fromIndex ) const
{
  if ( fromIndex >= _length )
    return -1;

  const char* temp = strchr( &_buffer[fromIndex], ch );
    1d68:	c0 81       	ld	r28, Z
    1d6a:	d1 81       	ldd	r29, Z+1	; 0x01
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	84 0f       	add	r24, r20
    1d70:	95 1f       	adc	r25, r21
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	0e 94 7d 29 	call	0x52fa	; 0x52fa <strchr>
    1d78:	9c 01       	movw	r18, r24
  if ( temp == NULL )
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	79 f3       	breq	.-34     	; 0x1d5c <_ZNK6String7indexOfEcj+0x10>
    return -1;

  return temp - _buffer;
    1d7e:	2c 1b       	sub	r18, r28
    1d80:	3d 0b       	sbc	r19, r29
    1d82:	ee cf       	rjmp	.-36     	; 0x1d60 <_ZNK6String7indexOfEcj+0x14>

00001d84 <_ZNK6String7indexOfEc>:
  return newString;
}

int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZNK6String7indexOfEcj>
}
    1d8c:	08 95       	ret

00001d8e <_ZNK6String6equalsERKS_>:

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
    1d8e:	fc 01       	movw	r30, r24
    1d90:	db 01       	movw	r26, r22
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    1d92:	24 81       	ldd	r18, Z+4	; 0x04
    1d94:	35 81       	ldd	r19, Z+5	; 0x05
    1d96:	14 96       	adiw	r26, 0x04	; 4
    1d98:	8d 91       	ld	r24, X+
    1d9a:	9c 91       	ld	r25, X
    1d9c:	15 97       	sbiw	r26, 0x05	; 5
    1d9e:	28 17       	cp	r18, r24
    1da0:	39 07       	cpc	r19, r25
    1da2:	11 f0       	breq	.+4      	; 0x1da8 <_ZNK6String6equalsERKS_+0x1a>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	08 95       	ret
    1da8:	6d 91       	ld	r22, X+
    1daa:	7c 91       	ld	r23, X
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1db4:	9c 01       	movw	r18, r24
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	21 15       	cp	r18, r1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <_ZNK6String6equalsERKS_+0x32>
}
    1dbe:	08 95       	ret
  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
}
    1dc2:	08 95       	ret

00001dc4 <_ZNK6String8endsWithERKS_>:
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	db 01       	movw	r26, r22
  if ( _length < s2._length )
    1dc8:	84 81       	ldd	r24, Z+4	; 0x04
    1dca:	95 81       	ldd	r25, Z+5	; 0x05
    1dcc:	14 96       	adiw	r26, 0x04	; 4
    1dce:	2d 91       	ld	r18, X+
    1dd0:	3c 91       	ld	r19, X
    1dd2:	15 97       	sbiw	r26, 0x05	; 5
    1dd4:	82 17       	cp	r24, r18
    1dd6:	93 07       	cpc	r25, r19
    1dd8:	90 f0       	brcs	.+36     	; 0x1dfe <_ZNK6String8endsWithERKS_+0x3a>
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    1dda:	82 1b       	sub	r24, r18
    1ddc:	93 0b       	sbc	r25, r19
    1dde:	20 81       	ld	r18, Z
    1de0:	31 81       	ldd	r19, Z+1	; 0x01
    1de2:	6d 91       	ld	r22, X+
    1de4:	7c 91       	ld	r23, X
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1dee:	9c 01       	movw	r18, r24
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <_ZNK6String8endsWithERKS_+0x36>
}
    1df8:	08 95       	ret
boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
}
    1dfc:	08 95       	ret
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
{
  if ( _length < s2._length )
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	08 95       	ret

00001e02 <_ZNK6StringgeERKS_>:
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
    1e02:	fb 01       	movw	r30, r22
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	fc 01       	movw	r30, r24
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1e12:	29 2f       	mov	r18, r25
    1e14:	33 27       	eor	r19, r19
    1e16:	27 fd       	sbrc	r18, 7
    1e18:	30 95       	com	r19
    1e1a:	20 95       	com	r18
    1e1c:	30 95       	com	r19
    1e1e:	22 27       	eor	r18, r18
    1e20:	33 0f       	add	r19, r19
    1e22:	22 1f       	adc	r18, r18
    1e24:	33 27       	eor	r19, r19
}
    1e26:	c9 01       	movw	r24, r18
    1e28:	08 95       	ret

00001e2a <_ZNK6StringleERKS_>:
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    1e2a:	fb 01       	movw	r30, r22
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	18 16       	cp	r1, r24
    1e40:	19 06       	cpc	r1, r25
    1e42:	14 f4       	brge	.+4      	; 0x1e48 <_ZNK6StringleERKS_+0x1e>
}
    1e44:	ca 01       	movw	r24, r20
    1e46:	08 95       	ret
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
}
    1e4c:	ca 01       	movw	r24, r20
    1e4e:	08 95       	ret

00001e50 <_ZNK6StringgtERKS_>:
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
    1e50:	fb 01       	movw	r30, r22
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	fc 01       	movw	r30, r24
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	50 e0       	ldi	r21, 0x00	; 0
    1e64:	18 16       	cp	r1, r24
    1e66:	19 06       	cpc	r1, r25
    1e68:	14 f4       	brge	.+4      	; 0x1e6e <_ZNK6StringgtERKS_+0x1e>
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
}
    1e6e:	ca 01       	movw	r24, r20
    1e70:	08 95       	ret

00001e72 <_ZNK6StringltERKS_>:
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
    1e72:	fb 01       	movw	r30, r22
    1e74:	60 81       	ld	r22, Z
    1e76:	71 81       	ldd	r23, Z+1	; 0x01
    1e78:	fc 01       	movw	r30, r24
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1e82:	29 2f       	mov	r18, r25
    1e84:	33 27       	eor	r19, r19
    1e86:	27 fd       	sbrc	r18, 7
    1e88:	30 95       	com	r19
    1e8a:	22 27       	eor	r18, r18
    1e8c:	33 0f       	add	r19, r19
    1e8e:	22 1f       	adc	r18, r18
    1e90:	33 27       	eor	r19, r19
}
    1e92:	c9 01       	movw	r24, r18
    1e94:	08 95       	ret

00001e96 <_ZNK6StringneERKS_>:
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
    1e96:	fc 01       	movw	r30, r24
    1e98:	db 01       	movw	r26, r22
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    1e9a:	24 81       	ldd	r18, Z+4	; 0x04
    1e9c:	35 81       	ldd	r19, Z+5	; 0x05
    1e9e:	14 96       	adiw	r26, 0x04	; 4
    1ea0:	8d 91       	ld	r24, X+
    1ea2:	9c 91       	ld	r25, X
    1ea4:	15 97       	sbiw	r26, 0x05	; 5
    1ea6:	28 17       	cp	r18, r24
    1ea8:	39 07       	cpc	r19, r25
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <_ZNK6StringneERKS_+0x1e>
    1eac:	21 e0       	ldi	r18, 0x01	; 1
    1eae:	30 e0       	ldi	r19, 0x00	; 0
}
    1eb0:	c9 01       	movw	r24, r18
    1eb2:	08 95       	ret
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
    1eb4:	6d 91       	ld	r22, X+
    1eb6:	7c 91       	ld	r23, X
    1eb8:	80 81       	ld	r24, Z
    1eba:	91 81       	ldd	r25, Z+1	; 0x01
    1ebc:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	21 15       	cp	r18, r1
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	91 f7       	brne	.-28     	; 0x1eac <_ZNK6StringneERKS_+0x16>
}
    1ec8:	c9 01       	movw	r24, r18
    1eca:	08 95       	ret

00001ecc <_ZNK6StringeqERKS_>:
  return *this;
}


int String::operator==( const String &rhs ) const
{
    1ecc:	fc 01       	movw	r30, r24
    1ece:	db 01       	movw	r26, r22
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    1ed0:	24 81       	ldd	r18, Z+4	; 0x04
    1ed2:	35 81       	ldd	r19, Z+5	; 0x05
    1ed4:	14 96       	adiw	r26, 0x04	; 4
    1ed6:	8d 91       	ld	r24, X+
    1ed8:	9c 91       	ld	r25, X
    1eda:	15 97       	sbiw	r26, 0x05	; 5
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	21 f0       	breq	.+8      	; 0x1eea <_ZNK6StringeqERKS_+0x1e>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
}
    1ee6:	c9 01       	movw	r24, r18
    1ee8:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    1eea:	6d 91       	ld	r22, X+
    1eec:	7c 91       	ld	r23, X
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    1ef6:	9c 01       	movw	r18, r24
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	21 15       	cp	r18, r1
    1efe:	31 05       	cpc	r19, r1
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <_ZNK6StringeqERKS_+0x3c>
    1f02:	9c 01       	movw	r18, r24
}
    1f04:	c9 01       	movw	r24, r18
    1f06:	08 95       	ret
}


int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 01       	movw	r18, r24
    1f0e:	fa cf       	rjmp	.-12     	; 0x1f04 <_ZNK6StringeqERKS_+0x38>

00001f10 <_ZNK6String9compareToERKS_>:
  }
}

int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
    1f10:	fb 01       	movw	r30, r22
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	fc 01       	movw	r30, r24
    1f18:	80 81       	ld	r24, Z
    1f1a:	91 81       	ldd	r25, Z+1	; 0x01
    1f1c:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
}
    1f20:	08 95       	ret

00001f22 <_ZN6StringpLERKS_>:
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
{
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	cf 93       	push	r28
    1f2c:	df 93       	push	r29
    1f2e:	ec 01       	movw	r28, r24
    1f30:	8b 01       	movw	r16, r22
  _length += other._length;
    1f32:	fb 01       	movw	r30, r22
    1f34:	64 81       	ldd	r22, Z+4	; 0x04
    1f36:	75 81       	ldd	r23, Z+5	; 0x05
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	68 0f       	add	r22, r24
    1f3e:	79 1f       	adc	r23, r25
    1f40:	7d 83       	std	Y+5, r23	; 0x05
    1f42:	6c 83       	std	Y+4, r22	; 0x04
  if ( _length > _capacity )
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	9b 81       	ldd	r25, Y+3	; 0x03
    1f48:	86 17       	cp	r24, r22
    1f4a:	97 07       	cpc	r25, r23
    1f4c:	78 f4       	brcc	.+30     	; 0x1f6c <_ZN6StringpLERKS_+0x4a>
  {
    char *temp = (char *)realloc(_buffer, _length + 1);
    1f4e:	6f 5f       	subi	r22, 0xFF	; 255
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	88 81       	ld	r24, Y
    1f54:	99 81       	ldd	r25, Y+1	; 0x01
    1f56:	0e 94 59 28 	call	0x50b2	; 0x50b2 <realloc>
    if ( temp != NULL ) {
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	b1 f0       	breq	.+44     	; 0x1f8a <_ZN6StringpLERKS_+0x68>
      _buffer = temp;
    1f5e:	99 83       	std	Y+1, r25	; 0x01
    1f60:	88 83       	st	Y, r24
      _capacity = _length;
    1f62:	2c 81       	ldd	r18, Y+4	; 0x04
    1f64:	3d 81       	ldd	r19, Y+5	; 0x05
    1f66:	3b 83       	std	Y+3, r19	; 0x03
    1f68:	2a 83       	std	Y+2, r18	; 0x02
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <_ZN6StringpLERKS_+0x4e>
    } else {
      _length -= other._length;
      return *this;
    1f6c:	88 81       	ld	r24, Y
    1f6e:	99 81       	ldd	r25, Y+1	; 0x01
    }
  }
  strcat( _buffer, other._buffer );
    1f70:	f8 01       	movw	r30, r16
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	0e 94 72 29 	call	0x52e4	; 0x52e4 <strcat>
  return *this;
}
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	1f 91       	pop	r17
    1f82:	0f 91       	pop	r16
    1f84:	ff 90       	pop	r15
    1f86:	ef 90       	pop	r14
    1f88:	08 95       	ret
    char *temp = (char *)realloc(_buffer, _length + 1);
    if ( temp != NULL ) {
      _buffer = temp;
      _capacity = _length;
    } else {
      _length -= other._length;
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8e:	f8 01       	movw	r30, r16
    1f90:	24 81       	ldd	r18, Z+4	; 0x04
    1f92:	35 81       	ldd	r19, Z+5	; 0x05
    1f94:	82 1b       	sub	r24, r18
    1f96:	93 0b       	sbc	r25, r19
    1f98:	9d 83       	std	Y+5, r25	; 0x05
    1f9a:	8c 83       	std	Y+4, r24	; 0x04
      return *this;
    1f9c:	ee cf       	rjmp	.-36     	; 0x1f7a <_ZN6StringpLERKS_+0x58>

00001f9e <_ZN6String6concatERKS_>:
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
{
  return (*this) += s2;
    1f9e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN6StringpLERKS_>
}
    1fa2:	08 95       	ret

00001fa4 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
{
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	8b 01       	movw	r16, r22
  if ( this == &rhs )
    1fb4:	86 17       	cp	r24, r22
    1fb6:	97 07       	cpc	r25, r23
    1fb8:	99 f0       	breq	.+38     	; 0x1fe0 <_ZN6StringaSERKS_+0x3c>
    return *this;

  if ( rhs._length > _length )
    1fba:	fb 01       	movw	r30, r22
    1fbc:	44 81       	ldd	r20, Z+4	; 0x04
    1fbe:	55 81       	ldd	r21, Z+5	; 0x05
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	84 17       	cp	r24, r20
    1fc6:	95 07       	cpc	r25, r21
    1fc8:	98 f0       	brcs	.+38     	; 0x1ff0 <_ZN6StringaSERKS_+0x4c>
  {
    free(_buffer);
    getBuffer( rhs._length );
  }
  
  if ( _buffer != NULL ) {
    1fca:	88 81       	ld	r24, Y
    1fcc:	99 81       	ldd	r25, Y+1	; 0x01
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	39 f0       	breq	.+14     	; 0x1fe0 <_ZN6StringaSERKS_+0x3c>
    _length = rhs._length;
    1fd2:	5d 83       	std	Y+5, r21	; 0x05
    1fd4:	4c 83       	std	Y+4, r20	; 0x04
    strcpy( _buffer, rhs._buffer );
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
  }
  return *this;
}
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	08 95       	ret
  if ( this == &rhs )
    return *this;

  if ( rhs._length > _length )
  {
    free(_buffer);
    1ff0:	88 81       	ld	r24, Y
    1ff2:	99 81       	ldd	r25, Y+1	; 0x01
    1ff4:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    getBuffer( rhs._length );
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	84 81       	ldd	r24, Z+4	; 0x04
    1ffc:	95 81       	ldd	r25, Z+5	; 0x05
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    1ffe:	9b 83       	std	Y+3, r25	; 0x03
    2000:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	21 f0       	breq	.+8      	; 0x2018 <_ZN6StringaSERKS_+0x74>
    2010:	f8 01       	movw	r30, r16
    2012:	44 81       	ldd	r20, Z+4	; 0x04
    2014:	55 81       	ldd	r21, Z+5	; 0x05
    2016:	dd cf       	rjmp	.-70     	; 0x1fd2 <_ZN6StringaSERKS_+0x2e>
    2018:	1b 82       	std	Y+3, r1	; 0x03
    201a:	1a 82       	std	Y+2, r1	; 0x02
    201c:	1d 82       	std	Y+5, r1	; 0x05
    201e:	1c 82       	std	Y+4, r1	; 0x04
    2020:	df cf       	rjmp	.-66     	; 0x1fe0 <_ZN6StringaSERKS_+0x3c>

00002022 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	0f 92       	push	r0
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	8c 01       	movw	r16, r24
{
  _length = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	d8 01       	movw	r26, r16
    2038:	15 96       	adiw	r26, 0x05	; 5
    203a:	9c 93       	st	X, r25
    203c:	8e 93       	st	-X, r24
    203e:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2040:	13 96       	adiw	r26, 0x03	; 3
    2042:	9c 93       	st	X, r25
    2044:	8e 93       	st	-X, r24
    2046:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	69 83       	std	Y+1, r22	; 0x01
    204e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2052:	fc 01       	movw	r30, r24
    2054:	d8 01       	movw	r26, r16
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	9c 93       	st	X, r25
    205a:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    205c:	69 81       	ldd	r22, Y+1	; 0x01
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	61 f0       	breq	.+24     	; 0x207a <_ZN6StringC1Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    2062:	60 83       	st	Z, r22
    _buffer[1] = 0;
    2064:	d8 01       	movw	r26, r16
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	11 97       	sbiw	r26, 0x01	; 1
    206c:	11 82       	std	Z+1, r1	; 0x01
  }
}
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret
    207a:	13 96       	adiw	r26, 0x03	; 3
    207c:	1c 92       	st	X, r1
    207e:	1e 92       	st	-X, r1
    2080:	12 97       	sbiw	r26, 0x02	; 2
    2082:	15 96       	adiw	r26, 0x05	; 5
    2084:	1c 92       	st	X, r1
    2086:	1e 92       	st	-X, r1
    2088:	14 97       	sbiw	r26, 0x04	; 4
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	0f 92       	push	r0
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	8c 01       	movw	r16, r24
{
  _length = 1;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	d8 01       	movw	r26, r16
    20ac:	15 96       	adiw	r26, 0x05	; 5
    20ae:	9c 93       	st	X, r25
    20b0:	8e 93       	st	-X, r24
    20b2:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    20b4:	13 96       	adiw	r26, 0x03	; 3
    20b6:	9c 93       	st	X, r25
    20b8:	8e 93       	st	-X, r24
    20ba:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	69 83       	std	Y+1, r22	; 0x01
    20c2:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    20c6:	fc 01       	movw	r30, r24
    20c8:	d8 01       	movw	r26, r16
    20ca:	11 96       	adiw	r26, 0x01	; 1
    20cc:	9c 93       	st	X, r25
    20ce:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    20d0:	69 81       	ldd	r22, Y+1	; 0x01
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	61 f0       	breq	.+24     	; 0x20ee <_ZN6StringC2Eh+0x58>
  getBuffer(1);
  if ( _buffer != NULL) {
    _buffer[0] = value;
    20d6:	60 83       	st	Z, r22
    _buffer[1] = 0;
    20d8:	d8 01       	movw	r26, r16
    20da:	ed 91       	ld	r30, X+
    20dc:	fc 91       	ld	r31, X
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	11 82       	std	Z+1, r1	; 0x01
  }
}
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret
    20ee:	13 96       	adiw	r26, 0x03	; 3
    20f0:	1c 92       	st	X, r1
    20f2:	1e 92       	st	-X, r1
    20f4:	12 97       	sbiw	r26, 0x02	; 2
    20f6:	15 96       	adiw	r26, 0x05	; 5
    20f8:	1c 92       	st	X, r1
    20fa:	1e 92       	st	-X, r1
    20fc:	14 97       	sbiw	r26, 0x04	; 4
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	08 95       	ret

0000210a <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8c 01       	movw	r16, r24
{
  _length = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	d8 01       	movw	r26, r16
    2120:	15 96       	adiw	r26, 0x05	; 5
    2122:	9c 93       	st	X, r25
    2124:	8e 93       	st	-X, r24
    2126:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2128:	13 96       	adiw	r26, 0x03	; 3
    212a:	9c 93       	st	X, r25
    212c:	8e 93       	st	-X, r24
    212e:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	69 83       	std	Y+1, r22	; 0x01
    2136:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    213a:	fc 01       	movw	r30, r24
    213c:	d8 01       	movw	r26, r16
    213e:	11 96       	adiw	r26, 0x01	; 1
    2140:	9c 93       	st	X, r25
    2142:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2144:	69 81       	ldd	r22, Y+1	; 0x01
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	61 f0       	breq	.+24     	; 0x2162 <_ZN6StringC1Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    214a:	60 83       	st	Z, r22
    _buffer[1] = 0;
    214c:	d8 01       	movw	r26, r16
    214e:	ed 91       	ld	r30, X+
    2150:	fc 91       	ld	r31, X
    2152:	11 97       	sbiw	r26, 0x01	; 1
    2154:	11 82       	std	Z+1, r1	; 0x01
  }
}
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret
    2162:	13 96       	adiw	r26, 0x03	; 3
    2164:	1c 92       	st	X, r1
    2166:	1e 92       	st	-X, r1
    2168:	12 97       	sbiw	r26, 0x02	; 2
    216a:	15 96       	adiw	r26, 0x05	; 5
    216c:	1c 92       	st	X, r1
    216e:	1e 92       	st	-X, r1
    2170:	14 97       	sbiw	r26, 0x04	; 4
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	0f 92       	push	r0
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	8c 01       	movw	r16, r24
{
  _length = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	d8 01       	movw	r26, r16
    2194:	15 96       	adiw	r26, 0x05	; 5
    2196:	9c 93       	st	X, r25
    2198:	8e 93       	st	-X, r24
    219a:	14 97       	sbiw	r26, 0x04	; 4
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    219c:	13 96       	adiw	r26, 0x03	; 3
    219e:	9c 93       	st	X, r25
    21a0:	8e 93       	st	-X, r24
    21a2:	12 97       	sbiw	r26, 0x02	; 2
  _buffer = (char *) malloc(_capacity + 1);
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	69 83       	std	Y+1, r22	; 0x01
    21aa:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    21ae:	fc 01       	movw	r30, r24
    21b0:	d8 01       	movw	r26, r16
    21b2:	11 96       	adiw	r26, 0x01	; 1
    21b4:	9c 93       	st	X, r25
    21b6:	8e 93       	st	-X, r24
  if (_buffer == NULL) _length = _capacity = 0;
    21b8:	69 81       	ldd	r22, Y+1	; 0x01
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <_ZN6StringC2Ec+0x58>
  getBuffer(1);
  if ( _buffer != NULL ) {
    _buffer[0] = value;
    21be:	60 83       	st	Z, r22
    _buffer[1] = 0;
    21c0:	d8 01       	movw	r26, r16
    21c2:	ed 91       	ld	r30, X+
    21c4:	fc 91       	ld	r31, X
    21c6:	11 97       	sbiw	r26, 0x01	; 1
    21c8:	11 82       	std	Z+1, r1	; 0x01
  }
}
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	08 95       	ret
    21d6:	13 96       	adiw	r26, 0x03	; 3
    21d8:	1c 92       	st	X, r1
    21da:	1e 92       	st	-X, r1
    21dc:	12 97       	sbiw	r26, 0x02	; 2
    21de:	15 96       	adiw	r26, 0x05	; 5
    21e0:	1c 92       	st	X, r1
    21e2:	1e 92       	st	-X, r1
    21e4:	14 97       	sbiw	r26, 0x04	; 4
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
    21fc:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    21fe:	fb 01       	movw	r30, r22
    2200:	84 81       	ldd	r24, Z+4	; 0x04
    2202:	95 81       	ldd	r25, Z+5	; 0x05
    2204:	9d 83       	std	Y+5, r25	; 0x05
    2206:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2208:	9b 83       	std	Y+3, r25	; 0x03
    220a:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2212:	99 83       	std	Y+1, r25	; 0x01
    2214:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	51 f0       	breq	.+20     	; 0x222e <_ZN6StringC1ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    221a:	f8 01       	movw	r30, r16
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret
    222e:	1b 82       	std	Y+3, r1	; 0x03
    2230:	1a 82       	std	Y+2, r1	; 0x02
    2232:	1d 82       	std	Y+5, r1	; 0x05
    2234:	1c 82       	std	Y+4, r1	; 0x04
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ec 01       	movw	r28, r24
    224a:	8b 01       	movw	r16, r22
{
  getBuffer( _length = value._length );
    224c:	fb 01       	movw	r30, r22
    224e:	84 81       	ldd	r24, Z+4	; 0x04
    2250:	95 81       	ldd	r25, Z+5	; 0x05
    2252:	9d 83       	std	Y+5, r25	; 0x05
    2254:	8c 83       	std	Y+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2260:	99 83       	std	Y+1, r25	; 0x01
    2262:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	51 f0       	breq	.+20     	; 0x227c <_ZN6StringC2ERKS_+0x3c>
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
    2268:	f8 01       	movw	r30, r16
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret
    227c:	1b 82       	std	Y+3, r1	; 0x03
    227e:	1a 82       	std	Y+2, r1	; 0x02
    2280:	1d 82       	std	Y+5, r1	; 0x05
    2282:	1c 82       	std	Y+4, r1	; 0x04
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	a1 97       	sbiw	r28, 0x21	; 33
    22a0:	0f b6       	in	r0, 0x3f	; 63
    22a2:	f8 94       	cli
    22a4:	de bf       	out	0x3e, r29	; 62
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	cd bf       	out	0x3d, r28	; 61
    22aa:	7c 01       	movw	r14, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    22b0:	8e 01       	movw	r16, r28
    22b2:	0f 5f       	subi	r16, 0xFF	; 255
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	a8 01       	movw	r20, r16
    22b8:	2a e0       	ldi	r18, 0x0A	; 10
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	0e 94 44 2a 	call	0x5488	; 0x5488 <ultoa>
  getBuffer( _length = strlen(buf) );
    22c0:	f8 01       	movw	r30, r16
    22c2:	01 90       	ld	r0, Z+
    22c4:	00 20       	and	r0, r0
    22c6:	e9 f7       	brne	.-6      	; 0x22c2 <_ZN6StringC1Emi+0x34>
    22c8:	cf 01       	movw	r24, r30
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	80 1b       	sub	r24, r16
    22ce:	91 0b       	sbc	r25, r17
    22d0:	f7 01       	movw	r30, r14
    22d2:	95 83       	std	Z+5, r25	; 0x05
    22d4:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    22d6:	93 83       	std	Z+3, r25	; 0x03
    22d8:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    22e0:	f7 01       	movw	r30, r14
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	81 f0       	breq	.+32     	; 0x230a <_ZN6StringC1Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    22ea:	b8 01       	movw	r22, r16
    22ec:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    22f0:	a1 96       	adiw	r28, 0x21	; 33
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	1f 91       	pop	r17
    2302:	0f 91       	pop	r16
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	08 95       	ret
    230a:	13 82       	std	Z+3, r1	; 0x03
    230c:	12 82       	std	Z+2, r1	; 0x02
    230e:	15 82       	std	Z+5, r1	; 0x05
    2310:	14 82       	std	Z+4, r1	; 0x04
    2312:	ee cf       	rjmp	.-36     	; 0x22f0 <_ZN6StringC1Emi+0x62>

00002314 <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	a1 97       	sbiw	r28, 0x21	; 33
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	7c 01       	movw	r14, r24
    2332:	cb 01       	movw	r24, r22
    2334:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ultoa(value, buf, 10);
    2336:	8e 01       	movw	r16, r28
    2338:	0f 5f       	subi	r16, 0xFF	; 255
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	a8 01       	movw	r20, r16
    233e:	2a e0       	ldi	r18, 0x0A	; 10
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	0e 94 44 2a 	call	0x5488	; 0x5488 <ultoa>
  getBuffer( _length = strlen(buf) );
    2346:	f8 01       	movw	r30, r16
    2348:	01 90       	ld	r0, Z+
    234a:	00 20       	and	r0, r0
    234c:	e9 f7       	brne	.-6      	; 0x2348 <_ZN6StringC2Emi+0x34>
    234e:	cf 01       	movw	r24, r30
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	80 1b       	sub	r24, r16
    2354:	91 0b       	sbc	r25, r17
    2356:	f7 01       	movw	r30, r14
    2358:	95 83       	std	Z+5, r25	; 0x05
    235a:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    235c:	93 83       	std	Z+3, r25	; 0x03
    235e:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2366:	f7 01       	movw	r30, r14
    2368:	91 83       	std	Z+1, r25	; 0x01
    236a:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	81 f0       	breq	.+32     	; 0x2390 <_ZN6StringC2Emi+0x7c>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2370:	b8 01       	movw	r22, r16
    2372:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2376:	a1 96       	adiw	r28, 0x21	; 33
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	ff 90       	pop	r15
    238c:	ef 90       	pop	r14
    238e:	08 95       	ret
    2390:	13 82       	std	Z+3, r1	; 0x03
    2392:	12 82       	std	Z+2, r1	; 0x02
    2394:	15 82       	std	Z+5, r1	; 0x05
    2396:	14 82       	std	Z+4, r1	; 0x04
    2398:	ee cf       	rjmp	.-36     	; 0x2376 <_ZN6StringC2Emi+0x62>

0000239a <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	a1 97       	sbiw	r28, 0x21	; 33
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	7c 01       	movw	r14, r24
    23b8:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	8e 01       	movw	r16, r28
    23c0:	0f 5f       	subi	r16, 0xFF	; 255
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	a8 01       	movw	r20, r16
    23c6:	0e 94 44 2a 	call	0x5488	; 0x5488 <ultoa>
  getBuffer( _length = strlen(buf) );
    23ca:	f8 01       	movw	r30, r16
    23cc:	01 90       	ld	r0, Z+
    23ce:	00 20       	and	r0, r0
    23d0:	e9 f7       	brne	.-6      	; 0x23cc <_ZN6StringC1Eji+0x32>
    23d2:	cf 01       	movw	r24, r30
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	80 1b       	sub	r24, r16
    23d8:	91 0b       	sbc	r25, r17
    23da:	f7 01       	movw	r30, r14
    23dc:	95 83       	std	Z+5, r25	; 0x05
    23de:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    23e0:	93 83       	std	Z+3, r25	; 0x03
    23e2:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    23ea:	f7 01       	movw	r30, r14
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	81 f0       	breq	.+32     	; 0x2414 <_ZN6StringC1Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    23f4:	b8 01       	movw	r22, r16
    23f6:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    23fa:	a1 96       	adiw	r28, 0x21	; 33
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	08 95       	ret
    2414:	13 82       	std	Z+3, r1	; 0x03
    2416:	12 82       	std	Z+2, r1	; 0x02
    2418:	15 82       	std	Z+5, r1	; 0x05
    241a:	14 82       	std	Z+4, r1	; 0x04
    241c:	ee cf       	rjmp	.-36     	; 0x23fa <_ZN6StringC1Eji+0x60>

0000241e <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	a1 97       	sbiw	r28, 0x21	; 33
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	7c 01       	movw	r14, r24
    243c:	9a 01       	movw	r18, r20
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	8e 01       	movw	r16, r28
    2444:	0f 5f       	subi	r16, 0xFF	; 255
    2446:	1f 4f       	sbci	r17, 0xFF	; 255
    2448:	a8 01       	movw	r20, r16
    244a:	0e 94 44 2a 	call	0x5488	; 0x5488 <ultoa>
  getBuffer( _length = strlen(buf) );
    244e:	f8 01       	movw	r30, r16
    2450:	01 90       	ld	r0, Z+
    2452:	00 20       	and	r0, r0
    2454:	e9 f7       	brne	.-6      	; 0x2450 <_ZN6StringC2Eji+0x32>
    2456:	cf 01       	movw	r24, r30
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	80 1b       	sub	r24, r16
    245c:	91 0b       	sbc	r25, r17
    245e:	f7 01       	movw	r30, r14
    2460:	95 83       	std	Z+5, r25	; 0x05
    2462:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2464:	93 83       	std	Z+3, r25	; 0x03
    2466:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    246e:	f7 01       	movw	r30, r14
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	81 f0       	breq	.+32     	; 0x2498 <_ZN6StringC2Eji+0x7a>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2478:	b8 01       	movw	r22, r16
    247a:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    247e:	a1 96       	adiw	r28, 0x21	; 33
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	ef 90       	pop	r14
    2496:	08 95       	ret
    2498:	13 82       	std	Z+3, r1	; 0x03
    249a:	12 82       	std	Z+2, r1	; 0x02
    249c:	15 82       	std	Z+5, r1	; 0x05
    249e:	14 82       	std	Z+4, r1	; 0x04
    24a0:	ee cf       	rjmp	.-36     	; 0x247e <_ZN6StringC2Eji+0x60>

000024a2 <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    24ac:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    24ae:	61 15       	cp	r22, r1
    24b0:	71 05       	cpc	r23, r1
    24b2:	21 f1       	breq	.+72     	; 0x24fc <_ZN6StringC1EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    24b4:	fb 01       	movw	r30, r22
    24b6:	01 90       	ld	r0, Z+
    24b8:	00 20       	and	r0, r0
    24ba:	e9 f7       	brne	.-6      	; 0x24b6 <_ZN6StringC1EPKc+0x14>
    24bc:	31 97       	sbiw	r30, 0x01	; 1
    24be:	e6 1b       	sub	r30, r22
    24c0:	f7 0b       	sbc	r31, r23
    24c2:	cf 01       	movw	r24, r30
    24c4:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    24c6:	fd 83       	std	Y+5, r31	; 0x05
    24c8:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    24ca:	fb 83       	std	Y+3, r31	; 0x03
    24cc:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    24ce:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    24d2:	99 83       	std	Y+1, r25	; 0x01
    24d4:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	41 f0       	breq	.+16     	; 0x24ea <_ZN6StringC1EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    24da:	b8 01       	movw	r22, r16
    24dc:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	1f 91       	pop	r17
    24e6:	0f 91       	pop	r16
    24e8:	08 95       	ret
    24ea:	1b 82       	std	Y+3, r1	; 0x03
    24ec:	1a 82       	std	Y+2, r1	; 0x02
    24ee:	1d 82       	std	Y+5, r1	; 0x05
    24f0:	1c 82       	std	Y+4, r1	; 0x04
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	e0 e0       	ldi	r30, 0x00	; 0
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	02 e3       	ldi	r16, 0x32	; 50
    2506:	11 e0       	ldi	r17, 0x01	; 1
    2508:	de cf       	rjmp	.-68     	; 0x24c6 <_ZN6StringC1EPKc+0x24>

0000250a <_ZNK6String11toUpperCaseEv>:
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
{
    250a:	af 92       	push	r10
    250c:	bf 92       	push	r11
    250e:	cf 92       	push	r12
    2510:	df 92       	push	r13
    2512:	ef 92       	push	r14
    2514:	ff 92       	push	r15
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	7c 01       	movw	r14, r24
    2520:	8b 01       	movw	r16, r22
  String temp = _buffer;
    2522:	c8 2e       	mov	r12, r24
    2524:	e6 01       	movw	r28, r12
    2526:	6e 01       	movw	r12, r28
    2528:	df 2c       	mov	r13, r15
    252a:	e6 01       	movw	r28, r12
    252c:	fb 01       	movw	r30, r22
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	c6 01       	movw	r24, r12
    2534:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    2538:	f8 01       	movw	r30, r16
    253a:	84 81       	ldd	r24, Z+4	; 0x04
    253c:	95 81       	ldd	r25, Z+5	; 0x05
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	b1 f0       	breq	.+44     	; 0x256e <_ZNK6String11toUpperCaseEv+0x64>
    2542:	aa 24       	eor	r10, r10
    2544:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    2546:	c8 80       	ld	r12, Y
    2548:	d9 80       	ldd	r13, Y+1	; 0x01
    254a:	ca 0c       	add	r12, r10
    254c:	db 1c       	adc	r13, r11
    254e:	f6 01       	movw	r30, r12
    2550:	80 81       	ld	r24, Z
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 61 29 	call	0x52c2	; 0x52c2 <toupper>
    2558:	f6 01       	movw	r30, r12
    255a:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    255c:	08 94       	sec
    255e:	a1 1c       	adc	r10, r1
    2560:	b1 1c       	adc	r11, r1
    2562:	f8 01       	movw	r30, r16
    2564:	84 81       	ldd	r24, Z+4	; 0x04
    2566:	95 81       	ldd	r25, Z+5	; 0x05
    2568:	a8 16       	cp	r10, r24
    256a:	b9 06       	cpc	r11, r25
    256c:	60 f3       	brcs	.-40     	; 0x2546 <_ZNK6String11toUpperCaseEv+0x3c>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    256e:	c7 01       	movw	r24, r14
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	bf 90       	pop	r11
    2582:	af 90       	pop	r10
    2584:	08 95       	ret

00002586 <_ZNK6String11toLowerCaseEv>:
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
{
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	7c 01       	movw	r14, r24
    259c:	8b 01       	movw	r16, r22
  String temp = _buffer;
    259e:	c8 2e       	mov	r12, r24
    25a0:	e6 01       	movw	r28, r12
    25a2:	6e 01       	movw	r12, r28
    25a4:	df 2c       	mov	r13, r15
    25a6:	e6 01       	movw	r28, r12
    25a8:	fb 01       	movw	r30, r22
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	c6 01       	movw	r24, r12
    25b0:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>

  for ( unsigned int i = 0; i < _length; i++ )
    25b4:	f8 01       	movw	r30, r16
    25b6:	84 81       	ldd	r24, Z+4	; 0x04
    25b8:	95 81       	ldd	r25, Z+5	; 0x05
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	b1 f0       	breq	.+44     	; 0x25ea <_ZNK6String11toLowerCaseEv+0x64>
    25be:	aa 24       	eor	r10, r10
    25c0:	bb 24       	eor	r11, r11
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    25c2:	c8 80       	ld	r12, Y
    25c4:	d9 80       	ldd	r13, Y+1	; 0x01
    25c6:	ca 0c       	add	r12, r10
    25c8:	db 1c       	adc	r13, r11
    25ca:	f6 01       	movw	r30, r12
    25cc:	80 81       	ld	r24, Z
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	0e 94 59 29 	call	0x52b2	; 0x52b2 <tolower>
    25d4:	f6 01       	movw	r30, r12
    25d6:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    25d8:	08 94       	sec
    25da:	a1 1c       	adc	r10, r1
    25dc:	b1 1c       	adc	r11, r1
    25de:	f8 01       	movw	r30, r16
    25e0:	84 81       	ldd	r24, Z+4	; 0x04
    25e2:	95 81       	ldd	r25, Z+5	; 0x05
    25e4:	a8 16       	cp	r10, r24
    25e6:	b9 06       	cpc	r11, r25
    25e8:	60 f3       	brcs	.-40     	; 0x25c2 <_ZNK6String11toLowerCaseEv+0x3c>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    25ea:	c7 01       	movw	r24, r14
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	bf 90       	pop	r11
    25fe:	af 90       	pop	r10
    2600:	08 95       	ret

00002602 <_ZNK6String16equalsIgnoreCaseERKS_>:
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	2d 97       	sbiw	r28, 0x0d	; 13
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	fc 01       	movw	r30, r24
    2620:	8b 01       	movw	r16, r22
  if ( this == &s2 )
    2622:	86 17       	cp	r24, r22
    2624:	97 07       	cpc	r25, r23
    2626:	e9 f1       	breq	.+122    	; 0x26a2 <_ZNK6String16equalsIgnoreCaseERKS_+0xa0>
    return true; //1;
  else if ( _length != s2._length )
    2628:	24 81       	ldd	r18, Z+4	; 0x04
    262a:	35 81       	ldd	r19, Z+5	; 0x05
    262c:	db 01       	movw	r26, r22
    262e:	14 96       	adiw	r26, 0x04	; 4
    2630:	8d 91       	ld	r24, X+
    2632:	9c 91       	ld	r25, X
    2634:	15 97       	sbiw	r26, 0x05	; 5
    2636:	28 17       	cp	r18, r24
    2638:	39 07       	cpc	r19, r25
    263a:	79 f0       	breq	.+30     	; 0x265a <_ZNK6String16equalsIgnoreCaseERKS_+0x58>
    263c:	20 e0       	ldi	r18, 0x00	; 0
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}
    263e:	82 2f       	mov	r24, r18
    2640:	2d 96       	adiw	r28, 0x0d	; 13
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	08 95       	ret
  if ( this == &s2 )
    return true; //1;
  else if ( _length != s2._length )
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    265a:	ce 01       	movw	r24, r28
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	bf 01       	movw	r22, r30
    2660:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZNK6String11toLowerCaseEv>
    2664:	e9 80       	ldd	r14, Y+1	; 0x01
    2666:	fa 80       	ldd	r15, Y+2	; 0x02
    2668:	ce 01       	movw	r24, r28
    266a:	07 96       	adiw	r24, 0x07	; 7
    266c:	b8 01       	movw	r22, r16
    266e:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZNK6String11toLowerCaseEv>
    2672:	0f 81       	ldd	r16, Y+7	; 0x07
    2674:	18 85       	ldd	r17, Y+8	; 0x08
    2676:	c7 01       	movw	r24, r14
    2678:	b8 01       	movw	r22, r16
    267a:	0e 94 88 29 	call	0x5310	; 0x5310 <strcmp>
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	09 f4       	brne	.+2      	; 0x2686 <_ZNK6String16equalsIgnoreCaseERKS_+0x84>
    2684:	21 e0       	ldi	r18, 0x01	; 1
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
    2686:	c8 01       	movw	r24, r16
    2688:	2d 87       	std	Y+13, r18	; 0x0d
    268a:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    268e:	1a 86       	std	Y+10, r1	; 0x0a
    2690:	19 86       	std	Y+9, r1	; 0x09
    2692:	1c 86       	std	Y+12, r1	; 0x0c
    2694:	1b 86       	std	Y+11, r1	; 0x0b
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	9a 81       	ldd	r25, Y+2	; 0x02
    269a:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    269e:	2d 85       	ldd	r18, Y+13	; 0x0d
    26a0:	ce cf       	rjmp	.-100    	; 0x263e <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
{
  if ( this == &s2 )
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	cc cf       	rjmp	.-104    	; 0x263e <_ZNK6String16equalsIgnoreCaseERKS_+0x3c>

000026a6 <_ZNK6String9substringEjj>:
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
{
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	8c 01       	movw	r16, r24
    26b6:	eb 01       	movw	r28, r22
    26b8:	79 01       	movw	r14, r18
  if ( left > right )
    26ba:	24 17       	cp	r18, r20
    26bc:	35 07       	cpc	r19, r21
    26be:	30 f4       	brcc	.+12     	; 0x26cc <_ZNK6String9substringEjj+0x26>
    26c0:	34 2f       	mov	r19, r20
    26c2:	25 2f       	mov	r18, r21
    26c4:	a7 01       	movw	r20, r14
    26c6:	c9 01       	movw	r24, r18
    26c8:	e9 2e       	mov	r14, r25
    26ca:	f8 2e       	mov	r15, r24
    26cc:	8c 81       	ldd	r24, Y+4	; 0x04
    26ce:	9d 81       	ldd	r25, Y+5	; 0x05
    26d0:	8e 15       	cp	r24, r14
    26d2:	9f 05       	cpc	r25, r15
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <_ZNK6String9substringEjj+0x32>
    26d6:	7c 01       	movw	r14, r24
  if ( right > _length )
  {
    right = _length;
  } 

  char temp = _buffer[ right ];  // save the replaced character
    26d8:	e8 81       	ld	r30, Y
    26da:	f9 81       	ldd	r31, Y+1	; 0x01
    26dc:	ee 0d       	add	r30, r14
    26de:	ff 1d       	adc	r31, r15
    26e0:	d0 80       	ld	r13, Z
  _buffer[ right ] = '\0';	
    26e2:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    26e4:	68 81       	ld	r22, Y
    26e6:	79 81       	ldd	r23, Y+1	; 0x01
    26e8:	64 0f       	add	r22, r20
    26ea:	75 1f       	adc	r23, r21
    26ec:	c8 01       	movw	r24, r16
    26ee:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>
  _buffer[ right ] = temp;  //restore character
    26f2:	e8 81       	ld	r30, Y
    26f4:	f9 81       	ldd	r31, Y+1	; 0x01
    26f6:	ee 0d       	add	r30, r14
    26f8:	ff 1d       	adc	r31, r15
    26fa:	d0 82       	st	Z, r13
  return outPut;
}
    26fc:	c8 01       	movw	r24, r16
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	df 90       	pop	r13
    270c:	08 95       	ret

0000270e <_ZNK6String9substringEj>:

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
{
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	ec 01       	movw	r28, r24
  return substring( left, _length );
    2714:	fb 01       	movw	r30, r22
    2716:	24 81       	ldd	r18, Z+4	; 0x04
    2718:	35 81       	ldd	r19, Z+5	; 0x05
    271a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZNK6String9substringEjj>
}
    271e:	ce 01       	movw	r24, r28
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <_ZNK6String11lastIndexOfERKS_j>:
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <_ZNK6String11lastIndexOfERKS_j+0x1a>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <_ZNK6String11lastIndexOfERKS_j+0x1c>
    2742:	00 d0       	rcall	.+0      	; 0x2744 <_ZNK6String11lastIndexOfERKS_j+0x1e>
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	6c 01       	movw	r12, r24
    274a:	7b 01       	movw	r14, r22
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    274c:	db 01       	movw	r26, r22
    274e:	14 96       	adiw	r26, 0x04	; 4
    2750:	8d 91       	ld	r24, X+
    2752:	9c 91       	ld	r25, X
    2754:	15 97       	sbiw	r26, 0x05	; 5
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	b1 f4       	brne	.+44     	; 0x2786 <_ZNK6String11lastIndexOfERKS_j+0x60>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    275a:	0f ef       	ldi	r16, 0xFF	; 255
    275c:	1f ef       	ldi	r17, 0xFF	; 255
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
}
    275e:	c8 01       	movw	r24, r16
    2760:	26 96       	adiw	r28, 0x06	; 6
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	cf 91       	pop	r28
    276e:	df 91       	pop	r29
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	df 90       	pop	r13
    277a:	cf 90       	pop	r12
    277c:	bf 90       	pop	r11
    277e:	af 90       	pop	r10
    2780:	9f 90       	pop	r9
    2782:	8f 90       	pop	r8
    2784:	08 95       	ret
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	48 17       	cp	r20, r24
    278a:	59 07       	cpc	r21, r25
    278c:	30 f3       	brcs	.-52     	; 0x275a <_ZNK6String11lastIndexOfERKS_j+0x34>
    278e:	f6 01       	movw	r30, r12
    2790:	84 81       	ldd	r24, Z+4	; 0x04
    2792:	95 81       	ldd	r25, Z+5	; 0x05
    2794:	48 17       	cp	r20, r24
    2796:	59 07       	cpc	r21, r25
    2798:	00 f7       	brcc	.-64     	; 0x275a <_ZNK6String11lastIndexOfERKS_j+0x34>
}

char String::operator[]( unsigned int index ) const
{
  // need to check for valid index, to do later
  return _buffer[ index ];
    279a:	ed 91       	ld	r30, X+
    279c:	fc 91       	ld	r31, X
    279e:	11 97       	sbiw	r26, 0x01	; 1
    27a0:	90 80       	ld	r9, Z
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    27a2:	8a 01       	movw	r16, r20
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    27a4:	5e 01       	movw	r10, r28
    27a6:	08 94       	sec
    27a8:	a1 1c       	adc	r10, r1
    27aa:	b1 1c       	adc	r11, r1
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <_ZNK6String11lastIndexOfERKS_j+0x8c>
    27ae:	01 50       	subi	r16, 0x01	; 1
    27b0:	10 40       	sbci	r17, 0x00	; 0
    27b2:	17 fd       	sbrc	r17, 7
    27b4:	d2 cf       	rjmp	.-92     	; 0x275a <_ZNK6String11lastIndexOfERKS_j+0x34>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    27b6:	d6 01       	movw	r26, r12
    27b8:	ed 91       	ld	r30, X+
    27ba:	fc 91       	ld	r31, X
    27bc:	11 97       	sbiw	r26, 0x01	; 1
    27be:	e0 0f       	add	r30, r16
    27c0:	f1 1f       	adc	r31, r17
    27c2:	80 81       	ld	r24, Z
    27c4:	89 15       	cp	r24, r9
    27c6:	99 f7       	brne	.-26     	; 0x27ae <_ZNK6String11lastIndexOfERKS_j+0x88>
    27c8:	f7 01       	movw	r30, r14
    27ca:	24 81       	ldd	r18, Z+4	; 0x04
    27cc:	35 81       	ldd	r19, Z+5	; 0x05
    27ce:	20 0f       	add	r18, r16
    27d0:	31 1f       	adc	r19, r17
    27d2:	c5 01       	movw	r24, r10
    27d4:	b6 01       	movw	r22, r12
    27d6:	a8 01       	movw	r20, r16
    27d8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZNK6String9substringEjj>
    27dc:	c5 01       	movw	r24, r10
    27de:	b7 01       	movw	r22, r14
    27e0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <_ZNK6String6equalsERKS_>
    27e4:	88 2e       	mov	r8, r24
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    27ee:	88 20       	and	r8, r8
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <_ZNK6String11lastIndexOfERKS_j+0xce>
    27f2:	b5 cf       	rjmp	.-150    	; 0x275e <_ZNK6String11lastIndexOfERKS_j+0x38>
    27f4:	1c 82       	std	Y+4, r1	; 0x04
    27f6:	1b 82       	std	Y+3, r1	; 0x03
    27f8:	1e 82       	std	Y+6, r1	; 0x06
    27fa:	1d 82       	std	Y+5, r1	; 0x05
    27fc:	d8 cf       	rjmp	.-80     	; 0x27ae <_ZNK6String11lastIndexOfERKS_j+0x88>

000027fe <_ZNK6String11lastIndexOfERKS_>:
  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
    27fe:	fc 01       	movw	r30, r24
    2800:	44 81       	ldd	r20, Z+4	; 0x04
    2802:	55 81       	ldd	r21, Z+5	; 0x05
    2804:	fb 01       	movw	r30, r22
    2806:	24 81       	ldd	r18, Z+4	; 0x04
    2808:	35 81       	ldd	r19, Z+5	; 0x05
    280a:	42 1b       	sub	r20, r18
    280c:	53 0b       	sbc	r21, r19
    280e:	0e 94 93 13 	call	0x2726	; 0x2726 <_ZNK6String11lastIndexOfERKS_j>
}
    2812:	08 95       	ret

00002814 <_ZNK6String4trimEv>:
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
{
    2814:	6f 92       	push	r6
    2816:	7f 92       	push	r7
    2818:	8f 92       	push	r8
    281a:	9f 92       	push	r9
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <_ZNK6String4trimEv+0x1e>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <_ZNK6String4trimEv+0x20>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <_ZNK6String4trimEv+0x22>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	8c 01       	movw	r16, r24
    283c:	6b 01       	movw	r12, r22
  if ( _buffer == NULL ) return *this;
    283e:	fb 01       	movw	r30, r22
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	61 15       	cp	r22, r1
    2846:	71 05       	cpc	r23, r1
    2848:	09 f4       	brne	.+2      	; 0x284c <_ZNK6String4trimEv+0x38>
    284a:	63 c0       	rjmp	.+198    	; 0x2912 <_ZNK6String4trimEv+0xfe>
  String temp = _buffer;
    284c:	5e 01       	movw	r10, r28
    284e:	08 94       	sec
    2850:	a1 1c       	adc	r10, r1
    2852:	b1 1c       	adc	r11, r1
    2854:	c5 01       	movw	r24, r10
    2856:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    285a:	f6 01       	movw	r30, r12
    285c:	84 80       	ldd	r8, Z+4	; 0x04
    285e:	95 80       	ldd	r9, Z+5	; 0x05
    2860:	81 14       	cp	r8, r1
    2862:	91 04       	cpc	r9, r1
    2864:	09 f4       	brne	.+2      	; 0x2868 <_ZNK6String4trimEv+0x54>
    2866:	59 c0       	rjmp	.+178    	; 0x291a <_ZNK6String4trimEv+0x106>
    2868:	f6 01       	movw	r30, r12
    286a:	60 80       	ld	r6, Z
    286c:	71 80       	ldd	r7, Z+1	; 0x01
    286e:	ee 24       	eor	r14, r14
    2870:	ff 24       	eor	r15, r15
    2872:	06 c0       	rjmp	.+12     	; 0x2880 <_ZNK6String4trimEv+0x6c>
    2874:	08 94       	sec
    2876:	e1 1c       	adc	r14, r1
    2878:	f1 1c       	adc	r15, r1
    287a:	e8 14       	cp	r14, r8
    287c:	f9 04       	cpc	r15, r9
    287e:	48 f4       	brcc	.+18     	; 0x2892 <_ZNK6String4trimEv+0x7e>
  {
    if ( !isspace(_buffer[i]) )
    2880:	f3 01       	movw	r30, r6
    2882:	ee 0d       	add	r30, r14
    2884:	ff 1d       	adc	r31, r15
    2886:	80 81       	ld	r24, Z
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 51 29 	call	0x52a2	; 0x52a2 <isspace>
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	89 f7       	brne	.-30     	; 0x2874 <_ZNK6String4trimEv+0x60>
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    2892:	8d 80       	ldd	r8, Y+5	; 0x05
    2894:	9e 80       	ldd	r9, Y+6	; 0x06
    2896:	08 94       	sec
    2898:	81 08       	sbc	r8, r1
    289a:	91 08       	sbc	r9, r1
    289c:	e8 14       	cp	r14, r8
    289e:	f9 04       	cpc	r15, r9
    28a0:	b0 f4       	brcc	.+44     	; 0x28ce <_ZNK6String4trimEv+0xba>
    28a2:	f6 01       	movw	r30, r12
    28a4:	c0 80       	ld	r12, Z
    28a6:	d1 80       	ldd	r13, Z+1	; 0x01
    28a8:	c8 0c       	add	r12, r8
    28aa:	d9 1c       	adc	r13, r9
    28ac:	09 c0       	rjmp	.+18     	; 0x28c0 <_ZNK6String4trimEv+0xac>
    28ae:	08 94       	sec
    28b0:	81 08       	sbc	r8, r1
    28b2:	91 08       	sbc	r9, r1
    28b4:	08 94       	sec
    28b6:	c1 08       	sbc	r12, r1
    28b8:	d1 08       	sbc	r13, r1
    28ba:	e8 14       	cp	r14, r8
    28bc:	f9 04       	cpc	r15, r9
    28be:	38 f4       	brcc	.+14     	; 0x28ce <_ZNK6String4trimEv+0xba>
  {
    if ( !isspace(_buffer[j]) )
    28c0:	f6 01       	movw	r30, r12
    28c2:	80 81       	ld	r24, Z
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 51 29 	call	0x52a2	; 0x52a2 <isspace>
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	81 f7       	brne	.-32     	; 0x28ae <_ZNK6String4trimEv+0x9a>
      break;
  }

  return temp.substring( i, j + 1);
    28ce:	94 01       	movw	r18, r8
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	c8 01       	movw	r24, r16
    28d6:	b5 01       	movw	r22, r10
    28d8:	a7 01       	movw	r20, r14
    28da:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZNK6String9substringEjj>
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
}
    28e6:	c8 01       	movw	r24, r16
    28e8:	26 96       	adiw	r28, 0x06	; 6
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	9f 90       	pop	r9
    290a:	8f 90       	pop	r8
    290c:	7f 90       	pop	r7
    290e:	6f 90       	pop	r6
    2910:	08 95       	ret
  return temp;
}

String String::trim() const
{
  if ( _buffer == NULL ) return *this;
    2912:	b6 01       	movw	r22, r12
    2914:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN6StringC1ERKS_>
    2918:	e6 cf       	rjmp	.-52     	; 0x28e6 <_ZNK6String4trimEv+0xd2>
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    291a:	ee 24       	eor	r14, r14
    291c:	ff 24       	eor	r15, r15
    291e:	b9 cf       	rjmp	.-142    	; 0x2892 <_ZNK6String4trimEv+0x7e>

00002920 <_ZN6String7replaceERKS_S1_>:

  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
    2920:	2f 92       	push	r2
    2922:	3f 92       	push	r3
    2924:	4f 92       	push	r4
    2926:	5f 92       	push	r5
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	8f 92       	push	r8
    292e:	9f 92       	push	r9
    2930:	af 92       	push	r10
    2932:	bf 92       	push	r11
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	68 97       	sbiw	r28, 0x18	; 24
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	1c 01       	movw	r2, r24
    2956:	fb 01       	movw	r30, r22
    2958:	5a 01       	movw	r10, r20
    295a:	29 01       	movw	r4, r18
  if ( _buffer == NULL ) return *this;
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	61 15       	cp	r22, r1
    2962:	71 05       	cpc	r23, r1
    2964:	09 f4       	brne	.+2      	; 0x2968 <_ZN6String7replaceERKS_S1_+0x48>
    2966:	7e c0       	rjmp	.+252    	; 0x2a64 <_ZN6String7replaceERKS_S1_+0x144>
  String temp = _buffer, newString;
    2968:	8e 01       	movw	r16, r28
    296a:	0f 5f       	subi	r16, 0xFF	; 255
    296c:	1f 4f       	sbci	r17, 0xFF	; 255
    296e:	c8 01       	movw	r24, r16
    2970:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>
    2974:	47 e0       	ldi	r20, 0x07	; 7
    2976:	c4 2e       	mov	r12, r20
    2978:	d1 2c       	mov	r13, r1
    297a:	cc 0e       	add	r12, r28
    297c:	dd 1e       	adc	r13, r29
    297e:	c6 01       	movw	r24, r12
    2980:	62 e3       	ldi	r22, 0x32	; 50
    2982:	71 e0       	ldi	r23, 0x01	; 1
    2984:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    2988:	3d e0       	ldi	r19, 0x0D	; 13
    298a:	83 2e       	mov	r8, r19
    298c:	91 2c       	mov	r9, r1
    298e:	8c 0e       	add	r8, r28
    2990:	9d 1e       	adc	r9, r29
    newString += replace;
    temp = temp.substring( loc + match._length );
    2992:	23 e1       	ldi	r18, 0x13	; 19
    2994:	62 2e       	mov	r6, r18
    2996:	71 2c       	mov	r7, r1
    2998:	6c 0e       	add	r6, r28
    299a:	7d 1e       	adc	r7, r29
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    299c:	2c c0       	rjmp	.+88     	; 0x29f6 <_ZN6String7replaceERKS_S1_+0xd6>
  {
    newString += temp.substring( 0, loc );
    299e:	c4 01       	movw	r24, r8
    29a0:	b8 01       	movw	r22, r16
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	97 01       	movw	r18, r14
    29a8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <_ZNK6String9substringEjj>
    29ac:	c6 01       	movw	r24, r12
    29ae:	b4 01       	movw	r22, r8
    29b0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN6StringpLERKS_>
    29b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b8:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    29bc:	18 8a       	std	Y+16, r1	; 0x10
    29be:	1f 86       	std	Y+15, r1	; 0x0f
    29c0:	1a 8a       	std	Y+18, r1	; 0x12
    29c2:	19 8a       	std	Y+17, r1	; 0x11
    newString += replace;
    29c4:	c6 01       	movw	r24, r12
    29c6:	b2 01       	movw	r22, r4
    29c8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN6StringpLERKS_>
    temp = temp.substring( loc + match._length );
    29cc:	f5 01       	movw	r30, r10
    29ce:	44 81       	ldd	r20, Z+4	; 0x04
    29d0:	55 81       	ldd	r21, Z+5	; 0x05
    29d2:	4e 0d       	add	r20, r14
    29d4:	5f 1d       	adc	r21, r15
    29d6:	c3 01       	movw	r24, r6
    29d8:	b8 01       	movw	r22, r16
    29da:	0e 94 87 13 	call	0x270e	; 0x270e <_ZNK6String9substringEj>
    29de:	c8 01       	movw	r24, r16
    29e0:	b3 01       	movw	r22, r6
    29e2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN6StringaSERKS_>
    29e6:	8b 89       	ldd	r24, Y+19	; 0x13
    29e8:	9c 89       	ldd	r25, Y+20	; 0x14
    29ea:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    29ee:	1e 8a       	std	Y+22, r1	; 0x16
    29f0:	1d 8a       	std	Y+21, r1	; 0x15
    29f2:	18 8e       	std	Y+24, r1	; 0x18
    29f4:	1f 8a       	std	Y+23, r1	; 0x17
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    29f6:	c8 01       	movw	r24, r16
    29f8:	b5 01       	movw	r22, r10
    29fa:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZNK6String7indexOfERKS_>
    29fe:	7c 01       	movw	r14, r24
    2a00:	ff ef       	ldi	r31, 0xFF	; 255
    2a02:	8f 3f       	cpi	r24, 0xFF	; 255
    2a04:	9f 07       	cpc	r25, r31
    2a06:	59 f6       	brne	.-106    	; 0x299e <_ZN6String7replaceERKS_S1_+0x7e>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    2a08:	c6 01       	movw	r24, r12
    2a0a:	b8 01       	movw	r22, r16
    2a0c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN6StringpLERKS_>
  return newString;
    2a10:	c1 01       	movw	r24, r2
    2a12:	b6 01       	movw	r22, r12
    2a14:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN6StringC1ERKS_>
    2a18:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1a:	98 85       	ldd	r25, Y+8	; 0x08
    2a1c:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    2a20:	1a 86       	std	Y+10, r1	; 0x0a
    2a22:	19 86       	std	Y+9, r1	; 0x09
    2a24:	1c 86       	std	Y+12, r1	; 0x0c
    2a26:	1b 86       	std	Y+11, r1	; 0x0b
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
}
    2a30:	c1 01       	movw	r24, r2
    2a32:	68 96       	adiw	r28, 0x18	; 24
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	ff 90       	pop	r15
    2a48:	ef 90       	pop	r14
    2a4a:	df 90       	pop	r13
    2a4c:	cf 90       	pop	r12
    2a4e:	bf 90       	pop	r11
    2a50:	af 90       	pop	r10
    2a52:	9f 90       	pop	r9
    2a54:	8f 90       	pop	r8
    2a56:	7f 90       	pop	r7
    2a58:	6f 90       	pop	r6
    2a5a:	5f 90       	pop	r5
    2a5c:	4f 90       	pop	r4
    2a5e:	3f 90       	pop	r3
    2a60:	2f 90       	pop	r2
    2a62:	08 95       	ret
  return theReturn;
}

String String::replace( const String& match, const String& replace )
{
  if ( _buffer == NULL ) return *this;
    2a64:	bf 01       	movw	r22, r30
    2a66:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN6StringC1ERKS_>
    2a6a:	e2 cf       	rjmp	.-60     	; 0x2a30 <_ZN6String7replaceERKS_S1_+0x110>

00002a6c <_ZN6String7replaceEcc>:

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <_ZN6String7replaceEcc+0x12>
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <_ZN6String7replaceEcc+0x14>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <_ZN6String7replaceEcc+0x16>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	8c 01       	movw	r16, r24
    2a88:	fb 01       	movw	r30, r22
    2a8a:	f4 2e       	mov	r15, r20
    2a8c:	e2 2e       	mov	r14, r18
  if ( _buffer == NULL ) return *this;
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	61 15       	cp	r22, r1
    2a94:	71 05       	cpc	r23, r1
    2a96:	51 f1       	breq	.+84     	; 0x2aec <_ZN6String7replaceEcc+0x80>
  String theReturn = _buffer;
    2a98:	6e 01       	movw	r12, r28
    2a9a:	08 94       	sec
    2a9c:	c1 1c       	adc	r12, r1
    2a9e:	d1 1c       	adc	r13, r1
    2aa0:	c6 01       	movw	r24, r12
    2aa2:	0e 94 51 12 	call	0x24a2	; 0x24a2 <_ZN6StringC1EPKc>
  char* temp = theReturn._buffer;
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
  while( (temp = strchr( temp, findChar )) != 0 )
    2aaa:	01 c0       	rjmp	.+2      	; 0x2aae <_ZN6String7replaceEcc+0x42>
    *temp = replaceChar;
    2aac:	e0 82       	st	Z, r14
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    2aae:	6f 2d       	mov	r22, r15
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	0e 94 7d 29 	call	0x52fa	; 0x52fa <strchr>
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	c1 f7       	brne	.-16     	; 0x2aac <_ZN6String7replaceEcc+0x40>
    *temp = replaceChar;

  return theReturn;
    2abc:	c8 01       	movw	r24, r16
    2abe:	b6 01       	movw	r22, r12
    2ac0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN6StringC1ERKS_>
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
}
    2acc:	c8 01       	movw	r24, r16
    2ace:	26 96       	adiw	r28, 0x06	; 6
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	08 95       	ret
  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
    2aec:	bf 01       	movw	r22, r30
    2aee:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <_ZN6StringC1ERKS_>
    2af2:	ec cf       	rjmp	.-40     	; 0x2acc <_ZN6String7replaceEcc+0x60>

00002af4 <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
    2afe:	8b 01       	movw	r16, r22
{
  if ( value == NULL )
    2b00:	61 15       	cp	r22, r1
    2b02:	71 05       	cpc	r23, r1
    2b04:	21 f1       	breq	.+72     	; 0x2b4e <_ZN6StringC2EPKc+0x5a>
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    2b06:	fb 01       	movw	r30, r22
    2b08:	01 90       	ld	r0, Z+
    2b0a:	00 20       	and	r0, r0
    2b0c:	e9 f7       	brne	.-6      	; 0x2b08 <_ZN6StringC2EPKc+0x14>
    2b0e:	31 97       	sbiw	r30, 0x01	; 1
    2b10:	e6 1b       	sub	r30, r22
    2b12:	f7 0b       	sbc	r31, r23
    2b14:	cf 01       	movw	r24, r30
    2b16:	01 96       	adiw	r24, 0x01	; 1
{
  if ( value == NULL )
    value = "";
  getBuffer( _length = strlen( value ) );
    2b18:	fd 83       	std	Y+5, r31	; 0x05
    2b1a:	ec 83       	std	Y+4, r30	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2b1c:	fb 83       	std	Y+3, r31	; 0x03
    2b1e:	ea 83       	std	Y+2, r30	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2b20:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2b24:	99 83       	std	Y+1, r25	; 0x01
    2b26:	88 83       	st	Y, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	41 f0       	breq	.+16     	; 0x2b3c <_ZN6StringC2EPKc+0x48>
  if ( _buffer != NULL )
    strcpy( _buffer, value );
    2b2c:	b8 01       	movw	r22, r16
    2b2e:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	08 95       	ret
    2b3c:	1b 82       	std	Y+3, r1	; 0x03
    2b3e:	1a 82       	std	Y+2, r1	; 0x02
    2b40:	1d 82       	std	Y+5, r1	; 0x05
    2b42:	1c 82       	std	Y+4, r1	; 0x04
    2b44:	df 91       	pop	r29
    2b46:	cf 91       	pop	r28
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	08 95       	ret
#include "WString.h"


String::String( const char *value )
{
  if ( value == NULL )
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	e0 e0       	ldi	r30, 0x00	; 0
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	02 e3       	ldi	r16, 0x32	; 50
    2b58:	11 e0       	ldi	r17, 0x01	; 1
    2b5a:	de cf       	rjmp	.-68     	; 0x2b18 <_ZN6StringC2EPKc+0x24>

00002b5c <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	a1 97       	sbiw	r28, 0x21	; 33
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	7c 01       	movw	r14, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    2b7e:	8e 01       	movw	r16, r28
    2b80:	0f 5f       	subi	r16, 0xFF	; 255
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	a8 01       	movw	r20, r16
    2b86:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <ltoa>
  getBuffer( _length = strlen(buf) );
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	01 90       	ld	r0, Z+
    2b8e:	00 20       	and	r0, r0
    2b90:	e9 f7       	brne	.-6      	; 0x2b8c <_ZN6StringC1Eli+0x30>
    2b92:	cf 01       	movw	r24, r30
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	80 1b       	sub	r24, r16
    2b98:	91 0b       	sbc	r25, r17
    2b9a:	f7 01       	movw	r30, r14
    2b9c:	95 83       	std	Z+5, r25	; 0x05
    2b9e:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2ba0:	93 83       	std	Z+3, r25	; 0x03
    2ba2:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2baa:	f7 01       	movw	r30, r14
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	81 f0       	breq	.+32     	; 0x2bd4 <_ZN6StringC1Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2bb4:	b8 01       	movw	r22, r16
    2bb6:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2bba:	a1 96       	adiw	r28, 0x21	; 33
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	08 95       	ret
    2bd4:	13 82       	std	Z+3, r1	; 0x03
    2bd6:	12 82       	std	Z+2, r1	; 0x02
    2bd8:	15 82       	std	Z+5, r1	; 0x05
    2bda:	14 82       	std	Z+4, r1	; 0x04
    2bdc:	ee cf       	rjmp	.-36     	; 0x2bba <_ZN6StringC1Eli+0x5e>

00002bde <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62
    2bee:	a1 97       	sbiw	r28, 0x21	; 33
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	7c 01       	movw	r14, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	ba 01       	movw	r22, r20
{
  char buf[33];   
  ltoa(value, buf, base);
    2c00:	8e 01       	movw	r16, r28
    2c02:	0f 5f       	subi	r16, 0xFF	; 255
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	a8 01       	movw	r20, r16
    2c08:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <ltoa>
  getBuffer( _length = strlen(buf) );
    2c0c:	f8 01       	movw	r30, r16
    2c0e:	01 90       	ld	r0, Z+
    2c10:	00 20       	and	r0, r0
    2c12:	e9 f7       	brne	.-6      	; 0x2c0e <_ZN6StringC2Eli+0x30>
    2c14:	cf 01       	movw	r24, r30
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	80 1b       	sub	r24, r16
    2c1a:	91 0b       	sbc	r25, r17
    2c1c:	f7 01       	movw	r30, r14
    2c1e:	95 83       	std	Z+5, r25	; 0x05
    2c20:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2c22:	93 83       	std	Z+3, r25	; 0x03
    2c24:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2c26:	01 96       	adiw	r24, 0x01	; 1
    2c28:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2c2c:	f7 01       	movw	r30, r14
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	81 f0       	breq	.+32     	; 0x2c56 <_ZN6StringC2Eli+0x78>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2c36:	b8 01       	movw	r22, r16
    2c38:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2c3c:	a1 96       	adiw	r28, 0x21	; 33
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	1f 91       	pop	r17
    2c4e:	0f 91       	pop	r16
    2c50:	ff 90       	pop	r15
    2c52:	ef 90       	pop	r14
    2c54:	08 95       	ret
    2c56:	13 82       	std	Z+3, r1	; 0x03
    2c58:	12 82       	std	Z+2, r1	; 0x02
    2c5a:	15 82       	std	Z+5, r1	; 0x05
    2c5c:	14 82       	std	Z+4, r1	; 0x04
    2c5e:	ee cf       	rjmp	.-36     	; 0x2c3c <_ZN6StringC2Eli+0x5e>

00002c60 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    2c60:	ef 92       	push	r14
    2c62:	ff 92       	push	r15
    2c64:	0f 93       	push	r16
    2c66:	1f 93       	push	r17
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	a1 97       	sbiw	r28, 0x21	; 33
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	7c 01       	movw	r14, r24
    2c7e:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    2c80:	8e 01       	movw	r16, r28
    2c82:	0f 5f       	subi	r16, 0xFF	; 255
    2c84:	1f 4f       	sbci	r17, 0xFF	; 255
    2c86:	b8 01       	movw	r22, r16
    2c88:	0e 94 da 29 	call	0x53b4	; 0x53b4 <itoa>
  getBuffer( _length = strlen(buf) );
    2c8c:	f8 01       	movw	r30, r16
    2c8e:	01 90       	ld	r0, Z+
    2c90:	00 20       	and	r0, r0
    2c92:	e9 f7       	brne	.-6      	; 0x2c8e <_ZN6StringC1Eii+0x2e>
    2c94:	cf 01       	movw	r24, r30
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	80 1b       	sub	r24, r16
    2c9a:	91 0b       	sbc	r25, r17
    2c9c:	f7 01       	movw	r30, r14
    2c9e:	95 83       	std	Z+5, r25	; 0x05
    2ca0:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2ca2:	93 83       	std	Z+3, r25	; 0x03
    2ca4:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2ca6:	01 96       	adiw	r24, 0x01	; 1
    2ca8:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2cac:	f7 01       	movw	r30, r14
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	81 f0       	breq	.+32     	; 0x2cd6 <_ZN6StringC1Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2cb6:	b8 01       	movw	r22, r16
    2cb8:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2cbc:	a1 96       	adiw	r28, 0x21	; 33
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	f8 94       	cli
    2cc2:	de bf       	out	0x3e, r29	; 62
    2cc4:	0f be       	out	0x3f, r0	; 63
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	cf 91       	pop	r28
    2cca:	df 91       	pop	r29
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	08 95       	ret
    2cd6:	13 82       	std	Z+3, r1	; 0x03
    2cd8:	12 82       	std	Z+2, r1	; 0x02
    2cda:	15 82       	std	Z+5, r1	; 0x05
    2cdc:	14 82       	std	Z+4, r1	; 0x04
    2cde:	ee cf       	rjmp	.-36     	; 0x2cbc <_ZN6StringC1Eii+0x5c>

00002ce0 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	df 93       	push	r29
    2cea:	cf 93       	push	r28
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	a1 97       	sbiw	r28, 0x21	; 33
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	de bf       	out	0x3e, r29	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	cd bf       	out	0x3d, r28	; 61
    2cfc:	7c 01       	movw	r14, r24
    2cfe:	cb 01       	movw	r24, r22
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    2d00:	8e 01       	movw	r16, r28
    2d02:	0f 5f       	subi	r16, 0xFF	; 255
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	b8 01       	movw	r22, r16
    2d08:	0e 94 da 29 	call	0x53b4	; 0x53b4 <itoa>
  getBuffer( _length = strlen(buf) );
    2d0c:	f8 01       	movw	r30, r16
    2d0e:	01 90       	ld	r0, Z+
    2d10:	00 20       	and	r0, r0
    2d12:	e9 f7       	brne	.-6      	; 0x2d0e <_ZN6StringC2Eii+0x2e>
    2d14:	cf 01       	movw	r24, r30
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	80 1b       	sub	r24, r16
    2d1a:	91 0b       	sbc	r25, r17
    2d1c:	f7 01       	movw	r30, r14
    2d1e:	95 83       	std	Z+5, r25	; 0x05
    2d20:	84 83       	std	Z+4, r24	; 0x04
};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
{
  _capacity = maxStrLen;
    2d22:	93 83       	std	Z+3, r25	; 0x03
    2d24:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
    2d26:	01 96       	adiw	r24, 0x01	; 1
    2d28:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    2d2c:	f7 01       	movw	r30, r14
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	81 f0       	breq	.+32     	; 0x2d56 <_ZN6StringC2Eii+0x76>
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
    2d36:	b8 01       	movw	r22, r16
    2d38:	0e 94 91 29 	call	0x5322	; 0x5322 <strcpy>
}
    2d3c:	a1 96       	adiw	r28, 0x21	; 33
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	ef 90       	pop	r14
    2d54:	08 95       	ret
    2d56:	13 82       	std	Z+3, r1	; 0x03
    2d58:	12 82       	std	Z+2, r1	; 0x02
    2d5a:	15 82       	std	Z+5, r1	; 0x05
    2d5c:	14 82       	std	Z+4, r1	; 0x04
    2d5e:	ee cf       	rjmp	.-36     	; 0x2d3c <_ZN6StringC2Eii+0x5c>

00002d60 <__cxa_pure_virtual>:
#include <stdlib.h>

void __cxa_pure_virtual(void)
{

}
    2d60:	08 95       	ret

00002d62 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g)
{
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	fc 01       	movw	r30, r24
    2d68:	80 81       	ld	r24, Z
    2d6a:	88 23       	and	r24, r24
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <__cxa_guard_acquire+0x10>
    2d6e:	21 e0       	ldi	r18, 0x01	; 1
    2d70:	30 e0       	ldi	r19, 0x00	; 0
	return !*(char *)(g);
}
    2d72:	c9 01       	movw	r24, r18
    2d74:	08 95       	ret

00002d76 <__cxa_guard_release>:
 
void __cxa_guard_release (__guard *g)
{
	*(char *)g = 1;
    2d76:	21 e0       	ldi	r18, 0x01	; 1
    2d78:	fc 01       	movw	r30, r24
    2d7a:	20 83       	st	Z, r18
}
    2d7c:	08 95       	ret

00002d7e <__cxa_guard_abort>:
 
void __cxa_guard_abort (__guard *)
{

}
    2d7e:	08 95       	ret

00002d80 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    2d80:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
}
    2d84:	08 95       	ret

00002d86 <_Znwj>:

}

void* operator new(size_t size) 
{ 
  return malloc(size); 
    2d86:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
} 
    2d8a:	08 95       	ret

00002d8c <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    2d8c:	08 95       	ret

00002d8e <_ZN7TwoWireC1Ev>:
    2d8e:	08 95       	ret

00002d90 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	80 93 57 03 	sts	0x0357, r24
  // set address of targeted slave
  txAddress = address;
    2d96:	60 93 34 03 	sts	0x0334, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2d9a:	10 92 55 03 	sts	0x0355, r1
  txBufferLength = 0;
    2d9e:	10 92 56 03 	sts	0x0356, r1
}
    2da2:	08 95       	ret

00002da4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 57 03 	sts	0x0357, r24
  // set address of targeted slave
  txAddress = address;
    2daa:	60 93 34 03 	sts	0x0334, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2dae:	10 92 55 03 	sts	0x0355, r1
  txBufferLength = 0;
    2db2:	10 92 56 03 	sts	0x0356, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    2db6:	08 95       	ret

00002db8 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    2db8:	80 91 33 03 	lds	r24, 0x0333
    2dbc:	90 91 32 03 	lds	r25, 0x0332
  return rxBufferLength - rxBufferIndex;
}
    2dc0:	89 1b       	sub	r24, r25
    2dc2:	08 95       	ret

00002dc4 <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2dc4:	90 91 32 03 	lds	r25, 0x0332
    2dc8:	80 91 33 03 	lds	r24, 0x0333
    2dcc:	98 17       	cp	r25, r24
    2dce:	48 f4       	brcc	.+18     	; 0x2de2 <_ZN7TwoWire7receiveEv+0x1e>
    value = rxBuffer[rxBufferIndex];
    2dd0:	e9 2f       	mov	r30, r25
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	ee 5e       	subi	r30, 0xEE	; 238
    2dd6:	fc 4f       	sbci	r31, 0xFC	; 252
    2dd8:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    2dda:	9f 5f       	subi	r25, 0xFF	; 255
    2ddc:	90 93 32 03 	sts	0x0332, r25
  }

  return value;
}
    2de0:	08 95       	ret
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	08 95       	ret

00002de6 <_ZN7TwoWire16onReceiveServiceEPhi>:
  return value;
}

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	9c 01       	movw	r18, r24
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    2dec:	e0 91 5a 03 	lds	r30, 0x035A
    2df0:	f0 91 5b 03 	lds	r31, 0x035B
    2df4:	30 97       	sbiw	r30, 0x00	; 0
    2df6:	11 f1       	breq	.+68     	; 0x2e3c <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    2df8:	90 91 32 03 	lds	r25, 0x0332
    2dfc:	80 91 33 03 	lds	r24, 0x0333
    2e00:	98 17       	cp	r25, r24
    2e02:	e0 f0       	brcs	.+56     	; 0x2e3c <_ZN7TwoWire16onReceiveServiceEPhi+0x56>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2e04:	16 16       	cp	r1, r22
    2e06:	17 06       	cpc	r1, r23
    2e08:	9c f4       	brge	.+38     	; 0x2e30 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    2e0a:	a0 e0       	ldi	r26, 0x00	; 0
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    rxBuffer[i] = inBytes[i];    
    2e14:	ae 5e       	subi	r26, 0xEE	; 238
    2e16:	bc 4f       	sbci	r27, 0xFC	; 252
    2e18:	42 0f       	add	r20, r18
    2e1a:	53 1f       	adc	r21, r19
    2e1c:	ea 01       	movw	r28, r20
    2e1e:	48 81       	ld	r20, Y
    2e20:	4c 93       	st	X, r20
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    2e22:	9f 5f       	subi	r25, 0xFF	; 255
    2e24:	49 2f       	mov	r20, r25
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	da 01       	movw	r26, r20
    2e2a:	46 17       	cp	r20, r22
    2e2c:	57 07       	cpc	r21, r23
    2e2e:	94 f3       	brlt	.-28     	; 0x2e14 <_ZN7TwoWire16onReceiveServiceEPhi+0x2e>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    2e30:	10 92 32 03 	sts	0x0332, r1
  rxBufferLength = numBytes;
    2e34:	60 93 33 03 	sts	0x0333, r22
  // alert user program
  user_onReceive(numBytes);
    2e38:	cb 01       	movw	r24, r22
    2e3a:	09 95       	icall
}
    2e3c:	df 91       	pop	r29
    2e3e:	cf 91       	pop	r28
    2e40:	08 95       	ret

00002e42 <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    2e42:	e0 91 58 03 	lds	r30, 0x0358
    2e46:	f0 91 59 03 	lds	r31, 0x0359
    2e4a:	30 97       	sbiw	r30, 0x00	; 0
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2e4e:	10 92 55 03 	sts	0x0355, r1
  txBufferLength = 0;
    2e52:	10 92 56 03 	sts	0x0356, r1
  // alert user program
  user_onRequest();
    2e56:	09 95       	icall
    2e58:	08 95       	ret

00002e5a <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    2e5a:	70 93 5b 03 	sts	0x035B, r23
    2e5e:	60 93 5a 03 	sts	0x035A, r22
}
    2e62:	08 95       	ret

00002e64 <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2e64:	70 93 59 03 	sts	0x0359, r23
    2e68:	60 93 58 03 	sts	0x0358, r22
}
    2e6c:	08 95       	ret

00002e6e <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	0f 92       	push	r0
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2e7a:	80 91 57 03 	lds	r24, 0x0357
    2e7e:	88 23       	and	r24, r24
    2e80:	c1 f0       	breq	.+48     	; 0x2eb2 <_ZN7TwoWire4sendEh+0x44>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    2e82:	80 91 56 03 	lds	r24, 0x0356
    2e86:	80 32       	cpi	r24, 0x20	; 32
    2e88:	20 f0       	brcs	.+8      	; 0x2e92 <_ZN7TwoWire4sendEh+0x24>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2e92:	80 91 55 03 	lds	r24, 0x0355
    2e96:	e8 2f       	mov	r30, r24
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	eb 5c       	subi	r30, 0xCB	; 203
    2e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e9e:	60 83       	st	Z, r22
    ++txBufferIndex;
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	80 93 55 03 	sts	0x0355, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2ea6:	80 93 56 03 	sts	0x0356, r24
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
}
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret
    // update amount in buffer   
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	61 e0       	ldi	r22, 0x01	; 1
    2eb8:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <twi_transmit>
  }
}
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    2ec4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN7TwoWire4sendEh>
}
    2ec8:	08 95       	ret

00002eca <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	ec 01       	movw	r28, r24
    2ed8:	16 2f       	mov	r17, r22
    2eda:	04 2f       	mov	r16, r20
  if(transmitting){
    2edc:	80 91 57 03 	lds	r24, 0x0357
    2ee0:	88 23       	and	r24, r24
    2ee2:	a9 f0       	breq	.+42     	; 0x2f0e <_ZN7TwoWire4sendEPhh+0x44>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    2ee4:	44 23       	and	r20, r20
    2ee6:	61 f0       	breq	.+24     	; 0x2f00 <_ZN7TwoWire4sendEPhh+0x36>
    2ee8:	e6 2e       	mov	r14, r22
    2eea:	f7 2e       	mov	r15, r23
      send(data[i]);
    2eec:	ce 01       	movw	r24, r28
    2eee:	f7 01       	movw	r30, r14
    2ef0:	61 91       	ld	r22, Z+
    2ef2:	7f 01       	movw	r14, r30
    2ef4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN7TwoWire4sendEh>
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    2ef8:	8e 2d       	mov	r24, r14
    2efa:	81 1b       	sub	r24, r17
    2efc:	80 17       	cp	r24, r16
    2efe:	b0 f3       	brcs	.-20     	; 0x2eec <_ZN7TwoWire4sendEPhh+0x22>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
  }
}
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	08 95       	ret
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    2f0e:	86 2f       	mov	r24, r22
    2f10:	97 2f       	mov	r25, r23
    2f12:	64 2f       	mov	r22, r20
    2f14:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <twi_transmit>
  }
}
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	08 95       	ret

00002f26 <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    2f26:	db 01       	movw	r26, r22
    2f28:	0d 90       	ld	r0, X+
    2f2a:	00 20       	and	r0, r0
    2f2c:	e9 f7       	brne	.-6      	; 0x2f28 <_ZN7TwoWire4sendEPc+0x2>
    2f2e:	ad 01       	movw	r20, r26
    2f30:	41 50       	subi	r20, 0x01	; 1
    2f32:	50 40       	sbci	r21, 0x00	; 0
    2f34:	46 1b       	sub	r20, r22
    2f36:	57 0b       	sbc	r21, r23
    2f38:	0e 94 65 17 	call	0x2eca	; 0x2eca <_ZN7TwoWire4sendEPhh>
}
    2f3c:	08 95       	ret

00002f3e <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    2f3e:	80 91 34 03 	lds	r24, 0x0334
    2f42:	65 e3       	ldi	r22, 0x35	; 53
    2f44:	73 e0       	ldi	r23, 0x03	; 3
    2f46:	40 91 56 03 	lds	r20, 0x0356
    2f4a:	21 e0       	ldi	r18, 0x01	; 1
    2f4c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2f50:	10 92 55 03 	sts	0x0355, r1
  txBufferLength = 0;
    2f54:	10 92 56 03 	sts	0x0356, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2f58:	10 92 57 03 	sts	0x0357, r1
  return ret;
}
    2f5c:	08 95       	ret

00002f5e <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    2f5e:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    2f60:	41 32       	cpi	r20, 0x21	; 33
    2f62:	08 f0       	brcs	.+2      	; 0x2f66 <_ZN7TwoWire11requestFromEhh+0x8>
    2f64:	40 e2       	ldi	r20, 0x20	; 32
    2f66:	62 e1       	ldi	r22, 0x12	; 18
    2f68:	73 e0       	ldi	r23, 0x03	; 3
    2f6a:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    2f6e:	10 92 32 03 	sts	0x0332, r1
  rxBufferLength = read;
    2f72:	80 93 33 03 	sts	0x0333, r24

  return read;
}
    2f76:	08 95       	ret

00002f78 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    2f78:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <_ZN7TwoWire11requestFromEhh>
}
    2f7c:	08 95       	ret

00002f7e <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    2f7e:	10 92 32 03 	sts	0x0332, r1
  rxBufferLength = 0;
    2f82:	10 92 33 03 	sts	0x0333, r1

  txBufferIndex = 0;
    2f86:	10 92 55 03 	sts	0x0355, r1
  txBufferLength = 0;
    2f8a:	10 92 56 03 	sts	0x0356, r1

  twi_init();
    2f8e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <twi_init>
}
    2f92:	08 95       	ret

00002f94 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	ec 01       	movw	r28, r24
    2f9a:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    2f9c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    2fa0:	81 e2       	ldi	r24, 0x21	; 33
    2fa2:	97 e1       	ldi	r25, 0x17	; 23
    2fa4:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    2fa8:	83 ef       	ldi	r24, 0xF3	; 243
    2faa:	96 e1       	ldi	r25, 0x16	; 22
    2fac:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <twi_attachSlaveRxEvent>
  begin();
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <_ZN7TwoWire5beginEv>
}
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	08 95       	ret

00002fbc <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    2fbc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <_ZN7TwoWire5beginEh>
}
    2fc0:	08 95       	ret

00002fc2 <_ZN11EEPROMClass5writeEih>:
{
	return eeprom_read_byte((unsigned char *) address);
}

void EEPROMClass::write(int address, uint8_t value)
{
    2fc2:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    2fc4:	64 2f       	mov	r22, r20
    2fc6:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__eewr_byte_m328p>
}
    2fca:	08 95       	ret

00002fcc <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    2fcc:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    2fce:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <__eerd_byte_m328p>
}
    2fd2:	08 95       	ret

00002fd4 <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
    2fd4:	08 95       	ret

00002fd6 <_ZN17AFMotorControllerC1Ev>:
    2fd6:	08 95       	ret

00002fd8 <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
    2fd8:	fc 01       	movw	r30, r24
    2fda:	80 81       	ld	r24, Z
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	71 f0       	breq	.+28     	; 0x2ffc <_ZN10AF_DCMotor8setSpeedEh+0x24>
    2fe0:	83 30       	cpi	r24, 0x03	; 3
    2fe2:	28 f0       	brcs	.+10     	; 0x2fee <_ZN10AF_DCMotor8setSpeedEh+0x16>
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	69 f0       	breq	.+26     	; 0x3002 <_ZN10AF_DCMotor8setSpeedEh+0x2a>
    2fe8:	84 30       	cpi	r24, 0x04	; 4
    2fea:	31 f0       	breq	.+12     	; 0x2ff8 <_ZN10AF_DCMotor8setSpeedEh+0x20>
    2fec:	08 95       	ret
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	e9 f7       	brne	.-6      	; 0x2fec <_ZN10AF_DCMotor8setSpeedEh+0x14>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    2ff2:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
    2ff6:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    2ff8:	68 bd       	out	0x28, r22	; 40
    2ffa:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    2ffc:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
    3000:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    3002:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
    3004:	08 95       	ret

00003006 <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	ec 01       	movw	r28, r24
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
    300c:	88 81       	ld	r24, Y
    300e:	99 81       	ldd	r25, Y+1	; 0x01
    3010:	68 9f       	mul	r22, r24
    3012:	90 01       	movw	r18, r0
    3014:	69 9f       	mul	r22, r25
    3016:	30 0d       	add	r19, r0
    3018:	78 9f       	mul	r23, r24
    301a:	30 0d       	add	r19, r0
    301c:	11 24       	eor	r1, r1
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	77 e8       	ldi	r23, 0x87	; 135
    3026:	83 e9       	ldi	r24, 0x93	; 147
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    302e:	2b 83       	std	Y+3, r18	; 0x03
    3030:	3c 83       	std	Y+4, r19	; 0x04
    3032:	4d 83       	std	Y+5, r20	; 0x05
    3034:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
    3036:	1f 82       	std	Y+7, r1	; 0x07
    3038:	18 86       	std	Y+8, r1	; 0x08
    303a:	19 86       	std	Y+9, r1	; 0x09
    303c:	1a 86       	std	Y+10, r1	; 0x0a
}
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
    3044:	08 95       	ret

00003046 <_ZN17AFMotorController8latch_txEv>:
  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
  uint8_t i;

  //LATCH_PORT &= ~_BV(LATCH);
  digitalWrite(MOTORLATCH, LOW);
    304a:	8c e0       	ldi	r24, 0x0C	; 12
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);
    3052:	88 e0       	ldi	r24, 0x08	; 8
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    305a:	c7 e0       	ldi	r28, 0x07	; 7
    305c:	d0 e0       	ldi	r29, 0x00	; 0
    305e:	0d c0       	rjmp	.+26     	; 0x307a <_ZN17AFMotorController8latch_txEv+0x34>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);

    if (latch_state & _BV(7-i)) {
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    3060:	88 e0       	ldi	r24, 0x08	; 8
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
    3068:	84 e0       	ldi	r24, 0x04	; 4
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    3070:	21 97       	sbiw	r28, 0x01	; 1
  digitalWrite(MOTORLATCH, LOW);

  //SER_PORT &= ~_BV(SER);
  digitalWrite(MOTORDATA, LOW);

  for (i=0; i<8; i++) {
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	cf 3f       	cpi	r28, 0xFF	; 255
    3076:	d3 07       	cpc	r29, r19
    3078:	a1 f0       	breq	.+40     	; 0x30a2 <_ZN17AFMotorController8latch_txEv+0x5c>
    //CLK_PORT &= ~_BV(CLK);
    digitalWrite(MOTORCLK, LOW);
    307a:	84 e0       	ldi	r24, 0x04	; 4
    307c:	60 e0       	ldi	r22, 0x00	; 0
    307e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>

    if (latch_state & _BV(7-i)) {
    3082:	80 91 5d 03 	lds	r24, 0x035D
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0c 2e       	mov	r0, r28
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <_ZN17AFMotorController8latch_txEv+0x4a>
    308c:	95 95       	asr	r25
    308e:	87 95       	ror	r24
    3090:	0a 94       	dec	r0
    3092:	e2 f7       	brpl	.-8      	; 0x308c <_ZN17AFMotorController8latch_txEv+0x46>
    3094:	80 fd       	sbrc	r24, 0
    3096:	e4 cf       	rjmp	.-56     	; 0x3060 <_ZN17AFMotorController8latch_txEv+0x1a>
      //SER_PORT |= _BV(SER);
      digitalWrite(MOTORDATA, HIGH);
    } else {
      //SER_PORT &= ~_BV(SER);
      digitalWrite(MOTORDATA, LOW);
    3098:	88 e0       	ldi	r24, 0x08	; 8
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    30a0:	e3 cf       	rjmp	.-58     	; 0x3068 <_ZN17AFMotorController8latch_txEv+0x22>
    }
    //CLK_PORT |= _BV(CLK);
    digitalWrite(MOTORCLK, HIGH);
  }
  //LATCH_PORT |= _BV(LATCH);
  digitalWrite(MOTORLATCH, HIGH);
    30a2:	8c e0       	ldi	r24, 0x0C	; 12
    30a4:	61 e0       	ldi	r22, 0x01	; 1
    30a6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
}
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	08 95       	ret

000030b0 <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
    30b0:	df 92       	push	r13
    30b2:	ef 92       	push	r14
    30b4:	ff 92       	push	r15
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	81 30       	cpi	r24, 0x01	; 1
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <_ZN10AF_Stepper7onestepEhh+0x18>
    30c6:	71 c0       	rjmp	.+226    	; 0x31aa <_ZN10AF_Stepper7onestepEhh+0xfa>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	49 f0       	breq	.+18     	; 0x30de <_ZN10AF_Stepper7onestepEhh+0x2e>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
  }

 
  MC.latch_tx();
  return currentstep;
}
    30ce:	df 91       	pop	r29
    30d0:	cf 91       	pop	r28
    30d2:	1f 91       	pop	r17
    30d4:	0f 91       	pop	r16
    30d6:	ff 90       	pop	r15
    30d8:	ef 90       	pop	r14
    30da:	df 90       	pop	r13
    30dc:	08 95       	ret
  if (steppernum == 1) {
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    30de:	2e e1       	ldi	r18, 0x1E	; 30
    30e0:	91 e2       	ldi	r25, 0x21	; 33
    30e2:	d9 2e       	mov	r13, r25
    30e4:	30 e4       	ldi	r19, 0x40	; 64
    30e6:	50 e8       	ldi	r21, 0x80	; 128
    30e8:	e1 e0       	ldi	r30, 0x01	; 1
    30ea:	f0 e2       	ldi	r31, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    30ec:	41 30       	cpi	r20, 0x01	; 1
    30ee:	01 f1       	breq	.+64     	; 0x3130 <_ZN10AF_Stepper7onestepEhh+0x80>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    30f0:	42 30       	cpi	r20, 0x02	; 2
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <_ZN10AF_Stepper7onestepEhh+0x46>
    30f4:	95 c0       	rjmp	.+298    	; 0x3220 <_ZN10AF_Stepper7onestepEhh+0x170>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    30f6:	43 30       	cpi	r20, 0x03	; 3
    30f8:	09 f4       	brne	.+2      	; 0x30fc <_ZN10AF_Stepper7onestepEhh+0x4c>
    30fa:	a2 c0       	rjmp	.+324    	; 0x3240 <_ZN10AF_Stepper7onestepEhh+0x190>
    30fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    } else {
       currentstep -= MICROSTEPS/2;
    }
  } 

  if (style == MICROSTEP) {
    30fe:	44 30       	cpi	r20, 0x04	; 4
    3100:	21 f5       	brne	.+72     	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
    if (dir == FORWARD) {
    3102:	61 30       	cpi	r22, 0x01	; 1
    3104:	09 f4       	brne	.+2      	; 0x3108 <_ZN10AF_Stepper7onestepEhh+0x58>
    3106:	f3 c0       	rjmp	.+486    	; 0x32ee <_ZN10AF_Stepper7onestepEhh+0x23e>
      currentstep++;
    } else {
      // BACKWARDS
      currentstep--;
    3108:	91 50       	subi	r25, 0x01	; 1
    310a:	9b 87       	std	Y+11, r25	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
    310c:	9f 73       	andi	r25, 0x3F	; 63
    310e:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
    3110:	90 31       	cpi	r25, 0x10	; 16
    3112:	08 f0       	brcs	.+2      	; 0x3116 <_ZN10AF_Stepper7onestepEhh+0x66>
    3114:	99 c0       	rjmp	.+306    	; 0x3248 <_ZN10AF_Stepper7onestepEhh+0x198>
      ocra = microstepcurve[MICROSTEPS - currentstep];
    3116:	09 2f       	mov	r16, r25
    3118:	10 e0       	ldi	r17, 0x00	; 0
    311a:	63 e4       	ldi	r22, 0x43	; 67
    311c:	71 e0       	ldi	r23, 0x01	; 1
    311e:	60 1b       	sub	r22, r16
    3120:	71 0b       	sbc	r23, r17
    3122:	db 01       	movw	r26, r22
    3124:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep];
    3126:	0d 5c       	subi	r16, 0xCD	; 205
    3128:	1e 4f       	sbci	r17, 0xFE	; 254
    312a:	d8 01       	movw	r26, r16
    312c:	6c 91       	ld	r22, X
    312e:	0f c0       	rjmp	.+30     	; 0x314e <_ZN10AF_Stepper7onestepEhh+0x9e>
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
    3130:	9b 85       	ldd	r25, Y+11	; 0x0b
    3132:	79 2f       	mov	r23, r25
    3134:	76 95       	lsr	r23
    3136:	76 95       	lsr	r23
    3138:	76 95       	lsr	r23
    313a:	70 ff       	sbrs	r23, 0
    313c:	9b c0       	rjmp	.+310    	; 0x3274 <_ZN10AF_Stepper7onestepEhh+0x1c4>
      if (dir == FORWARD) {
    313e:	61 30       	cpi	r22, 0x01	; 1
    3140:	09 f4       	brne	.+2      	; 0x3144 <_ZN10AF_Stepper7onestepEhh+0x94>
    3142:	dc c0       	rjmp	.+440    	; 0x32fc <_ZN10AF_Stepper7onestepEhh+0x24c>
	currentstep += MICROSTEPS/2;
      }
      else {
	currentstep -= MICROSTEPS/2;
    3144:	98 50       	subi	r25, 0x08	; 8
    3146:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    3148:	9b 85       	ldd	r25, Y+11	; 0x0b
    314a:	7f ef       	ldi	r23, 0xFF	; 255
    314c:	6f ef       	ldi	r22, 0xFF	; 255
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
    314e:	9f 73       	andi	r25, 0x3F	; 63
    3150:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
    3152:	81 30       	cpi	r24, 0x01	; 1
    3154:	09 f4       	brne	.+2      	; 0x3158 <_ZN10AF_Stepper7onestepEhh+0xa8>
    3156:	5f c0       	rjmp	.+190    	; 0x3216 <_ZN10AF_Stepper7onestepEhh+0x166>
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
    3158:	82 30       	cpi	r24, 0x02	; 2
    315a:	09 f4       	brne	.+2      	; 0x315e <_ZN10AF_Stepper7onestepEhh+0xae>
    315c:	6e c0       	rjmp	.+220    	; 0x323a <_ZN10AF_Stepper7onestepEhh+0x18a>
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
    315e:	80 91 5d 03 	lds	r24, 0x035D
    3162:	82 23       	and	r24, r18
    3164:	80 93 5d 03 	sts	0x035D, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    3168:	44 30       	cpi	r20, 0x04	; 4
    316a:	91 f1       	breq	.+100    	; 0x31d0 <_ZN10AF_Stepper7onestepEhh+0x120>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    316c:	96 95       	lsr	r25
    316e:	96 95       	lsr	r25
    3170:	96 95       	lsr	r25
    3172:	94 30       	cpi	r25, 0x04	; 4
    3174:	09 f4       	brne	.+2      	; 0x3178 <_ZN10AF_Stepper7onestepEhh+0xc8>
    3176:	af c0       	rjmp	.+350    	; 0x32d6 <_ZN10AF_Stepper7onestepEhh+0x226>
    3178:	95 30       	cpi	r25, 0x05	; 5
    317a:	f8 f0       	brcs	.+62     	; 0x31ba <_ZN10AF_Stepper7onestepEhh+0x10a>
    317c:	96 30       	cpi	r25, 0x06	; 6
    317e:	09 f4       	brne	.+2      	; 0x3182 <_ZN10AF_Stepper7onestepEhh+0xd2>
    3180:	ae c0       	rjmp	.+348    	; 0x32de <_ZN10AF_Stepper7onestepEhh+0x22e>
    3182:	96 30       	cpi	r25, 0x06	; 6
    3184:	08 f0       	brcs	.+2      	; 0x3188 <_ZN10AF_Stepper7onestepEhh+0xd8>
    3186:	87 c0       	rjmp	.+270    	; 0x3296 <_ZN10AF_Stepper7onestepEhh+0x1e6>
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    3188:	35 2b       	or	r19, r21
    318a:	38 2b       	or	r19, r24
    318c:	30 93 5d 03 	sts	0x035D, r19
      break;
    }
  }

 
  MC.latch_tx();
    3190:	8c e5       	ldi	r24, 0x5C	; 92
    3192:	93 e0       	ldi	r25, 0x03	; 3
    3194:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    3198:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    319a:	df 91       	pop	r29
    319c:	cf 91       	pop	r28
    319e:	1f 91       	pop	r17
    31a0:	0f 91       	pop	r16
    31a2:	ff 90       	pop	r15
    31a4:	ef 90       	pop	r14
    31a6:	df 90       	pop	r13
    31a8:	08 95       	ret
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    31aa:	21 ee       	ldi	r18, 0xE1	; 225
    31ac:	36 e0       	ldi	r19, 0x06	; 6
    31ae:	d3 2e       	mov	r13, r19
    31b0:	30 e1       	ldi	r19, 0x10	; 16
    31b2:	58 e0       	ldi	r21, 0x08	; 8
    31b4:	e2 e0       	ldi	r30, 0x02	; 2
    31b6:	f4 e0       	ldi	r31, 0x04	; 4
    31b8:	99 cf       	rjmp	.-206    	; 0x30ec <_ZN10AF_Stepper7onestepEhh+0x3c>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    31ba:	92 30       	cpi	r25, 0x02	; 2
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <_ZN10AF_Stepper7onestepEhh+0x110>
    31be:	93 c0       	rjmp	.+294    	; 0x32e6 <_ZN10AF_Stepper7onestepEhh+0x236>
    31c0:	93 30       	cpi	r25, 0x03	; 3
    31c2:	08 f4       	brcc	.+2      	; 0x31c6 <_ZN10AF_Stepper7onestepEhh+0x116>
    31c4:	62 c0       	rjmp	.+196    	; 0x328a <_ZN10AF_Stepper7onestepEhh+0x1da>
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    31c6:	5e 2b       	or	r21, r30
    31c8:	58 2b       	or	r21, r24
    31ca:	50 93 5d 03 	sts	0x035D, r21
      break;
    31ce:	e0 cf       	rjmp	.-64     	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    31d0:	90 31       	cpi	r25, 0x10	; 16
    31d2:	18 f4       	brcc	.+6      	; 0x31da <_ZN10AF_Stepper7onestepEhh+0x12a>
      latch_state |= a | b;
    31d4:	8d 29       	or	r24, r13
    31d6:	80 93 5d 03 	sts	0x035D, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    31da:	89 2f       	mov	r24, r25
    31dc:	80 51       	subi	r24, 0x10	; 16
    31de:	80 31       	cpi	r24, 0x10	; 16
    31e0:	30 f4       	brcc	.+12     	; 0x31ee <_ZN10AF_Stepper7onestepEhh+0x13e>
      latch_state |= b | c;
    31e2:	e5 2b       	or	r30, r21
    31e4:	20 91 5d 03 	lds	r18, 0x035D
    31e8:	2e 2b       	or	r18, r30
    31ea:	20 93 5d 03 	sts	0x035D, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    31ee:	89 2f       	mov	r24, r25
    31f0:	80 52       	subi	r24, 0x20	; 32
    31f2:	80 31       	cpi	r24, 0x10	; 16
    31f4:	30 f4       	brcc	.+12     	; 0x3202 <_ZN10AF_Stepper7onestepEhh+0x152>
      latch_state |= c | d;
    31f6:	53 2b       	or	r21, r19
    31f8:	20 91 5d 03 	lds	r18, 0x035D
    31fc:	25 2b       	or	r18, r21
    31fe:	20 93 5d 03 	sts	0x035D, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    3202:	90 53       	subi	r25, 0x30	; 48
    3204:	90 31       	cpi	r25, 0x10	; 16
    3206:	20 f6       	brcc	.-120    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
      latch_state |= d | a;
    3208:	3f 2b       	or	r19, r31
    320a:	90 91 5d 03 	lds	r25, 0x035D
    320e:	93 2b       	or	r25, r19
    3210:	90 93 5d 03 	sts	0x035D, r25
    3214:	bd cf       	rjmp	.-134    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    3216:	70 93 b3 00 	sts	0x00B3, r23
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    321a:	60 93 b4 00 	sts	0x00B4, r22
    321e:	9f cf       	rjmp	.-194    	; 0x315e <_ZN10AF_Stepper7onestepEhh+0xae>
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    3220:	9b 85       	ldd	r25, Y+11	; 0x0b
    3222:	79 2f       	mov	r23, r25
    3224:	76 95       	lsr	r23
    3226:	76 95       	lsr	r23
    3228:	76 95       	lsr	r23
    322a:	70 fd       	sbrc	r23, 0
    322c:	29 c0       	rjmp	.+82     	; 0x3280 <_ZN10AF_Stepper7onestepEhh+0x1d0>
      if (dir == FORWARD) {
    322e:	61 30       	cpi	r22, 0x01	; 1
    3230:	09 f4       	brne	.+2      	; 0x3234 <_ZN10AF_Stepper7onestepEhh+0x184>
    3232:	47 c0       	rjmp	.+142    	; 0x32c2 <_ZN10AF_Stepper7onestepEhh+0x212>
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    3234:	98 50       	subi	r25, 0x08	; 8
    3236:	9b 87       	std	Y+11, r25	; 0x0b
    3238:	88 cf       	rjmp	.-240    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    323a:	77 bd       	out	0x27, r23	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    323c:	68 bd       	out	0x28, r22	; 40
    323e:	8f cf       	rjmp	.-226    	; 0x315e <_ZN10AF_Stepper7onestepEhh+0xae>
      } else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
    3240:	61 30       	cpi	r22, 0x01	; 1
    3242:	f1 f1       	breq	.+124    	; 0x32c0 <_ZN10AF_Stepper7onestepEhh+0x210>
       currentstep += MICROSTEPS/2;
    } else {
       currentstep -= MICROSTEPS/2;
    3244:	9b 85       	ldd	r25, Y+11	; 0x0b
    3246:	f6 cf       	rjmp	.-20     	; 0x3234 <_ZN10AF_Stepper7onestepEhh+0x184>

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    3248:	69 2f       	mov	r22, r25
    324a:	60 51       	subi	r22, 0x10	; 16
    324c:	60 31       	cpi	r22, 0x10	; 16
    324e:	50 f1       	brcs	.+84     	; 0x32a4 <_ZN10AF_Stepper7onestepEhh+0x1f4>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    3250:	69 2f       	mov	r22, r25
    3252:	60 52       	subi	r22, 0x20	; 32
    3254:	60 31       	cpi	r22, 0x10	; 16
    3256:	08 f0       	brcs	.+2      	; 0x325a <_ZN10AF_Stepper7onestepEhh+0x1aa>
    3258:	55 c0       	rjmp	.+170    	; 0x3304 <_ZN10AF_Stepper7onestepEhh+0x254>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    325a:	09 2f       	mov	r16, r25
    325c:	10 e0       	ldi	r17, 0x00	; 0
    325e:	63 e6       	ldi	r22, 0x63	; 99
    3260:	71 e0       	ldi	r23, 0x01	; 1
    3262:	60 1b       	sub	r22, r16
    3264:	71 0b       	sbc	r23, r17
    3266:	db 01       	movw	r26, r22
    3268:	7c 91       	ld	r23, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    326a:	0d 5e       	subi	r16, 0xED	; 237
    326c:	1e 4f       	sbci	r17, 0xFE	; 254
    326e:	d8 01       	movw	r26, r16
    3270:	6c 91       	ld	r22, X
    3272:	6d cf       	rjmp	.-294    	; 0x314e <_ZN10AF_Stepper7onestepEhh+0x9e>
      }
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
    3274:	61 30       	cpi	r22, 0x01	; 1
    3276:	f1 f1       	breq	.+124    	; 0x32f4 <_ZN10AF_Stepper7onestepEhh+0x244>
	currentstep += MICROSTEPS;
      }
      else {
	currentstep -= MICROSTEPS;
    3278:	90 51       	subi	r25, 0x10	; 16
    327a:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    327c:	9b 85       	ldd	r25, Y+11	; 0x0b
    327e:	65 cf       	rjmp	.-310    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    3280:	61 30       	cpi	r22, 0x01	; 1
    3282:	11 f1       	breq	.+68     	; 0x32c8 <_ZN10AF_Stepper7onestepEhh+0x218>
	currentstep += MICROSTEPS;
      } else {
	currentstep -= MICROSTEPS;
    3284:	90 51       	subi	r25, 0x10	; 16
    3286:	9b 87       	std	Y+11, r25	; 0x0b
    3288:	60 cf       	rjmp	.-320    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    328a:	91 30       	cpi	r25, 0x01	; 1
    328c:	01 f1       	breq	.+64     	; 0x32ce <_ZN10AF_Stepper7onestepEhh+0x21e>
    case 0:
      latch_state |= a; // energize coil 1 only
    328e:	8f 2b       	or	r24, r31
    3290:	80 93 5d 03 	sts	0x035D, r24
      break;
    3294:	7d cf       	rjmp	.-262    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
      latch_state |= c | d;
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
      latch_state |= d | a;
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    3296:	97 30       	cpi	r25, 0x07	; 7
    3298:	d1 f7       	brne	.-12     	; 0x328e <_ZN10AF_Stepper7onestepEhh+0x1de>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    329a:	3f 2b       	or	r19, r31
    329c:	38 2b       	or	r19, r24
    329e:	30 93 5d 03 	sts	0x035D, r19
    32a2:	76 cf       	rjmp	.-276    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
      ocra = microstepcurve[MICROSTEPS - currentstep];
      ocrb = microstepcurve[currentstep];
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
      ocra = microstepcurve[currentstep - MICROSTEPS];
    32a4:	e9 2e       	mov	r14, r25
    32a6:	ff 24       	eor	r15, r15
    32a8:	b7 01       	movw	r22, r14
    32aa:	6d 5d       	subi	r22, 0xDD	; 221
    32ac:	7e 4f       	sbci	r23, 0xFE	; 254
    32ae:	db 01       	movw	r26, r22
    32b0:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    32b2:	03 e5       	ldi	r16, 0x53	; 83
    32b4:	11 e0       	ldi	r17, 0x01	; 1
    32b6:	0e 19       	sub	r16, r14
    32b8:	1f 09       	sbc	r17, r15
    32ba:	d8 01       	movw	r26, r16
    32bc:	6c 91       	ld	r22, X
    32be:	47 cf       	rjmp	.-370    	; 0x314e <_ZN10AF_Stepper7onestepEhh+0x9e>
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == INTERLEAVE) {
    if (dir == FORWARD) {
       currentstep += MICROSTEPS/2;
    32c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32c2:	98 5f       	subi	r25, 0xF8	; 248
    32c4:	9b 87       	std	Y+11, r25	; 0x0b
    32c6:	41 cf       	rjmp	.-382    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    32c8:	90 5f       	subi	r25, 0xF0	; 240
    32ca:	9b 87       	std	Y+11, r25	; 0x0b
    32cc:	3e cf       	rjmp	.-388    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
    switch (currentstep/(MICROSTEPS/2)) {
    case 0:
      latch_state |= a; // energize coil 1 only
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    32ce:	8d 29       	or	r24, r13
    32d0:	80 93 5d 03 	sts	0x035D, r24
      break;
    32d4:	5d cf       	rjmp	.-326    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
      break;
    case 4:
      latch_state |= c; // energize coil 3 only
    32d6:	85 2b       	or	r24, r21
    32d8:	80 93 5d 03 	sts	0x035D, r24
      break; 
    32dc:	59 cf       	rjmp	.-334    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
    case 5:
      latch_state |= c | d; // energize coil 3+4
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    32de:	83 2b       	or	r24, r19
    32e0:	80 93 5d 03 	sts	0x035D, r24
      break;
    32e4:	55 cf       	rjmp	.-342    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
      break;
    case 2:
      latch_state |= b; // energize coil 2 only
    32e6:	8e 2b       	or	r24, r30
    32e8:	80 93 5d 03 	sts	0x035D, r24
      break;
    32ec:	51 cf       	rjmp	.-350    	; 0x3190 <_ZN10AF_Stepper7onestepEhh+0xe0>
    }
  } 

  if (style == MICROSTEP) {
    if (dir == FORWARD) {
      currentstep++;
    32ee:	9f 5f       	subi	r25, 0xFF	; 255
    32f0:	9b 87       	std	Y+11, r25	; 0x0b
    32f2:	0c cf       	rjmp	.-488    	; 0x310c <_ZN10AF_Stepper7onestepEhh+0x5c>
      else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next even step
      if (dir == FORWARD) {
	currentstep += MICROSTEPS;
    32f4:	90 5f       	subi	r25, 0xF0	; 240
    32f6:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    32f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    32fa:	27 cf       	rjmp	.-434    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
      if (dir == FORWARD) {
	currentstep += MICROSTEPS/2;
    32fc:	98 5f       	subi	r25, 0xF8	; 248
    32fe:	9b 87       	std	Y+11, r25	; 0x0b
    }
  }

 
  MC.latch_tx();
  return currentstep;
    3300:	9b 85       	ldd	r25, Y+11	; 0x0b
    3302:	23 cf       	rjmp	.-442    	; 0x314a <_ZN10AF_Stepper7onestepEhh+0x9a>
      ocra = microstepcurve[currentstep - MICROSTEPS];
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    3304:	69 2f       	mov	r22, r25
    3306:	60 53       	subi	r22, 0x30	; 48
    3308:	60 31       	cpi	r22, 0x10	; 16
    330a:	18 f0       	brcs	.+6      	; 0x3312 <_ZN10AF_Stepper7onestepEhh+0x262>
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	60 e0       	ldi	r22, 0x00	; 0
    3310:	1e cf       	rjmp	.-452    	; 0x314e <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    3312:	e9 2e       	mov	r14, r25
    3314:	ff 24       	eor	r15, r15
    3316:	b7 01       	movw	r22, r14
    3318:	6d 5f       	subi	r22, 0xFD	; 253
    331a:	7e 4f       	sbci	r23, 0xFE	; 254
    331c:	db 01       	movw	r26, r22
    331e:	7c 91       	ld	r23, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    3320:	03 e7       	ldi	r16, 0x73	; 115
    3322:	11 e0       	ldi	r17, 0x01	; 1
    3324:	0e 19       	sub	r16, r14
    3326:	1f 09       	sbc	r17, r15
    3328:	d8 01       	movw	r26, r16
    332a:	6c 91       	ld	r22, X
    332c:	10 cf       	rjmp	.-480    	; 0x314e <_ZN10AF_Stepper7onestepEhh+0x9e>

0000332e <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    332e:	5f 92       	push	r5
    3330:	6f 92       	push	r6
    3332:	7f 92       	push	r7
    3334:	8f 92       	push	r8
    3336:	9f 92       	push	r9
    3338:	af 92       	push	r10
    333a:	bf 92       	push	r11
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	ec 01       	movw	r28, r24
    334e:	8b 01       	movw	r16, r22
    3350:	54 2e       	mov	r5, r20
    3352:	f2 2e       	mov	r15, r18
  uint32_t uspers = usperstep;
    3354:	8b 80       	ldd	r8, Y+3	; 0x03
    3356:	9c 80       	ldd	r9, Y+4	; 0x04
    3358:	ad 80       	ldd	r10, Y+5	; 0x05
    335a:	be 80       	ldd	r11, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    335c:	23 e0       	ldi	r18, 0x03	; 3
    335e:	f2 16       	cp	r15, r18
    3360:	09 f4       	brne	.+2      	; 0x3364 <_ZN10AF_Stepper4stepEjhh+0x36>
    3362:	a5 c0       	rjmp	.+330    	; 0x34ae <_ZN10AF_Stepper4stepEjhh+0x180>
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    3364:	84 e0       	ldi	r24, 0x04	; 4
    3366:	f8 16       	cp	r15, r24
    3368:	09 f4       	brne	.+2      	; 0x336c <_ZN10AF_Stepper4stepEjhh+0x3e>
    336a:	a6 c0       	rjmp	.+332    	; 0x34b8 <_ZN10AF_Stepper4stepEjhh+0x18a>
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    336c:	c5 01       	movw	r24, r10
    336e:	b4 01       	movw	r22, r8
    3370:	28 ee       	ldi	r18, 0xE8	; 232
    3372:	33 e0       	ldi	r19, 0x03	; 3
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    337c:	72 2e       	mov	r7, r18
    337e:	c3 2e       	mov	r12, r19
    3380:	d4 2e       	mov	r13, r20
    3382:	e5 2e       	mov	r14, r21
    steppingcounter += (uspers % 1000);
    3384:	c5 01       	movw	r24, r10
    3386:	b4 01       	movw	r22, r8
    3388:	28 ee       	ldi	r18, 0xE8	; 232
    338a:	33 e0       	ldi	r19, 0x03	; 3
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    3394:	4b 01       	movw	r8, r22
    3396:	5c 01       	movw	r10, r24
    3398:	66 24       	eor	r6, r6
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <_ZN10AF_Stepper4stepEjhh+0x72>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    339c:	01 50       	subi	r16, 0x01	; 1
    339e:	10 40       	sbci	r17, 0x00	; 0
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    33a0:	01 15       	cp	r16, r1
    33a2:	11 05       	cpc	r17, r1
    33a4:	99 f1       	breq	.+102    	; 0x340c <_ZN10AF_Stepper4stepEjhh+0xde>
    ret = onestep(dir, style);
    33a6:	ce 01       	movw	r24, r28
    33a8:	65 2d       	mov	r22, r5
    33aa:	4f 2d       	mov	r20, r15
    33ac:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN10AF_Stepper7onestepEhh>
    33b0:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    33b2:	67 2d       	mov	r22, r7
    33b4:	7c 2d       	mov	r23, r12
    33b6:	8d 2d       	mov	r24, r13
    33b8:	9e 2d       	mov	r25, r14
    33ba:	0e 94 89 02 	call	0x512	; 0x512 <delay>
    steppingcounter += (uspers % 1000);
    33be:	8f 81       	ldd	r24, Y+7	; 0x07
    33c0:	98 85       	ldd	r25, Y+8	; 0x08
    33c2:	a9 85       	ldd	r26, Y+9	; 0x09
    33c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    33c6:	88 0d       	add	r24, r8
    33c8:	99 1d       	adc	r25, r9
    33ca:	aa 1d       	adc	r26, r10
    33cc:	bb 1d       	adc	r27, r11
    33ce:	8f 83       	std	Y+7, r24	; 0x07
    33d0:	98 87       	std	Y+8, r25	; 0x08
    33d2:	a9 87       	std	Y+9, r26	; 0x09
    33d4:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    33d6:	88 3e       	cpi	r24, 0xE8	; 232
    33d8:	23 e0       	ldi	r18, 0x03	; 3
    33da:	92 07       	cpc	r25, r18
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	a2 07       	cpc	r26, r18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	b2 07       	cpc	r27, r18
    33e4:	d8 f2       	brcs	.-74     	; 0x339c <_ZN10AF_Stepper4stepEjhh+0x6e>
      delay(1);
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 89 02 	call	0x512	; 0x512 <delay>
      steppingcounter -= 1000;
    33f2:	8f 81       	ldd	r24, Y+7	; 0x07
    33f4:	98 85       	ldd	r25, Y+8	; 0x08
    33f6:	a9 85       	ldd	r26, Y+9	; 0x09
    33f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    33fa:	88 5e       	subi	r24, 0xE8	; 232
    33fc:	93 40       	sbci	r25, 0x03	; 3
    33fe:	a0 40       	sbci	r26, 0x00	; 0
    3400:	b0 40       	sbci	r27, 0x00	; 0
    3402:	8f 83       	std	Y+7, r24	; 0x07
    3404:	98 87       	std	Y+8, r25	; 0x08
    3406:	a9 87       	std	Y+9, r26	; 0x09
    3408:	ba 87       	std	Y+10, r27	; 0x0a
    340a:	c8 cf       	rjmp	.-112    	; 0x339c <_ZN10AF_Stepper4stepEjhh+0x6e>
    }
  }
  if (style == MICROSTEP) {
    340c:	84 e0       	ldi	r24, 0x04	; 4
    340e:	f8 16       	cp	r15, r24
    3410:	81 f0       	breq	.+32     	; 0x3432 <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	ff 90       	pop	r15
    341c:	ef 90       	pop	r14
    341e:	df 90       	pop	r13
    3420:	cf 90       	pop	r12
    3422:	bf 90       	pop	r11
    3424:	af 90       	pop	r10
    3426:	9f 90       	pop	r9
    3428:	8f 90       	pop	r8
    342a:	7f 90       	pop	r7
    342c:	6f 90       	pop	r6
    342e:	5f 90       	pop	r5
    3430:	08 95       	ret
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    3432:	66 20       	and	r6, r6
    3434:	71 f3       	breq	.-36     	; 0x3412 <_ZN10AF_Stepper4stepEjhh+0xe4>
    3436:	20 e1       	ldi	r18, 0x10	; 16
    3438:	62 16       	cp	r6, r18
    343a:	19 f4       	brne	.+6      	; 0x3442 <_ZN10AF_Stepper4stepEjhh+0x114>
    343c:	ea cf       	rjmp	.-44     	; 0x3412 <_ZN10AF_Stepper4stepEjhh+0xe4>
    343e:	00 31       	cpi	r16, 0x10	; 16
    3440:	41 f3       	breq	.-48     	; 0x3412 <_ZN10AF_Stepper4stepEjhh+0xe4>
      ret = onestep(dir, style);
    3442:	ce 01       	movw	r24, r28
    3444:	65 2d       	mov	r22, r5
    3446:	44 e0       	ldi	r20, 0x04	; 4
    3448:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN10AF_Stepper7onestepEhh>
    344c:	08 2f       	mov	r16, r24
      delay(uspers/1000); // in ms
    344e:	67 2d       	mov	r22, r7
    3450:	7c 2d       	mov	r23, r12
    3452:	8d 2d       	mov	r24, r13
    3454:	9e 2d       	mov	r25, r14
    3456:	0e 94 89 02 	call	0x512	; 0x512 <delay>
      steppingcounter += (uspers % 1000);
    345a:	8f 81       	ldd	r24, Y+7	; 0x07
    345c:	98 85       	ldd	r25, Y+8	; 0x08
    345e:	a9 85       	ldd	r26, Y+9	; 0x09
    3460:	ba 85       	ldd	r27, Y+10	; 0x0a
    3462:	88 0d       	add	r24, r8
    3464:	99 1d       	adc	r25, r9
    3466:	aa 1d       	adc	r26, r10
    3468:	bb 1d       	adc	r27, r11
    346a:	8f 83       	std	Y+7, r24	; 0x07
    346c:	98 87       	std	Y+8, r25	; 0x08
    346e:	a9 87       	std	Y+9, r26	; 0x09
    3470:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    3472:	88 3e       	cpi	r24, 0xE8	; 232
    3474:	23 e0       	ldi	r18, 0x03	; 3
    3476:	92 07       	cpc	r25, r18
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	a2 07       	cpc	r26, r18
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	b2 07       	cpc	r27, r18
    3480:	90 f0       	brcs	.+36     	; 0x34a6 <_ZN10AF_Stepper4stepEjhh+0x178>
	delay(1);
    3482:	61 e0       	ldi	r22, 0x01	; 1
    3484:	70 e0       	ldi	r23, 0x00	; 0
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 89 02 	call	0x512	; 0x512 <delay>
	steppingcounter -= 1000;
    348e:	8f 81       	ldd	r24, Y+7	; 0x07
    3490:	98 85       	ldd	r25, Y+8	; 0x08
    3492:	a9 85       	ldd	r26, Y+9	; 0x09
    3494:	ba 85       	ldd	r27, Y+10	; 0x0a
    3496:	88 5e       	subi	r24, 0xE8	; 232
    3498:	93 40       	sbci	r25, 0x03	; 3
    349a:	a0 40       	sbci	r26, 0x00	; 0
    349c:	b0 40       	sbci	r27, 0x00	; 0
    349e:	8f 83       	std	Y+7, r24	; 0x07
    34a0:	98 87       	std	Y+8, r25	; 0x08
    34a2:	a9 87       	std	Y+9, r26	; 0x09
    34a4:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    34a6:	00 23       	and	r16, r16
    34a8:	09 f4       	brne	.+2      	; 0x34ac <_ZN10AF_Stepper4stepEjhh+0x17e>
    34aa:	b3 cf       	rjmp	.-154    	; 0x3412 <_ZN10AF_Stepper4stepEjhh+0xe4>
    34ac:	c8 cf       	rjmp	.-112    	; 0x343e <_ZN10AF_Stepper4stepEjhh+0x110>
void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
  uint32_t uspers = usperstep;
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
    34ae:	b6 94       	lsr	r11
    34b0:	a7 94       	ror	r10
    34b2:	97 94       	ror	r9
    34b4:	87 94       	ror	r8
    34b6:	5a cf       	rjmp	.-332    	; 0x336c <_ZN10AF_Stepper4stepEjhh+0x3e>
  }
 else if (style == MICROSTEP) {
    uspers /= MICROSTEPS;
    34b8:	54 e0       	ldi	r21, 0x04	; 4
    34ba:	b6 94       	lsr	r11
    34bc:	a7 94       	ror	r10
    34be:	97 94       	ror	r9
    34c0:	87 94       	ror	r8
    34c2:	5a 95       	dec	r21
    34c4:	d1 f7       	brne	.-12     	; 0x34ba <_ZN10AF_Stepper4stepEjhh+0x18c>
    steps *= MICROSTEPS;
    34c6:	02 95       	swap	r16
    34c8:	12 95       	swap	r17
    34ca:	10 7f       	andi	r17, 0xF0	; 240
    34cc:	10 27       	eor	r17, r16
    34ce:	00 7f       	andi	r16, 0xF0	; 240
    34d0:	10 27       	eor	r17, r16
    34d2:	4c cf       	rjmp	.-360    	; 0x336c <_ZN10AF_Stepper4stepEjhh+0x3e>

000034d4 <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    34d4:	fc 01       	movw	r30, r24
    34d6:	82 81       	ldd	r24, Z+2	; 0x02
    34d8:	81 30       	cpi	r24, 0x01	; 1
    34da:	69 f0       	breq	.+26     	; 0x34f6 <_ZN10AF_Stepper7releaseEv+0x22>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    MC.latch_tx();
  } else if (steppernum == 2) {
    34dc:	82 30       	cpi	r24, 0x02	; 2
    34de:	09 f0       	breq	.+2      	; 0x34e2 <_ZN10AF_Stepper7releaseEv+0xe>
    34e0:	08 95       	ret
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    34e2:	80 91 5d 03 	lds	r24, 0x035D
    34e6:	8e 71       	andi	r24, 0x1E	; 30
    34e8:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    34ec:	8c e5       	ldi	r24, 0x5C	; 92
    34ee:	93 e0       	ldi	r25, 0x03	; 3
    34f0:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    34f4:	08 95       	ret
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    34f6:	80 91 5d 03 	lds	r24, 0x035D
    34fa:	81 7e       	andi	r24, 0xE1	; 225
    34fc:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    3500:	8c e5       	ldi	r24, 0x5C	; 92
    3502:	93 e0       	ldi	r25, 0x03	; 3
    3504:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    3508:	08 95       	ret

0000350a <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    350a:	fc 01       	movw	r30, r24
    350c:	80 81       	ld	r24, Z
    350e:	82 30       	cpi	r24, 0x02	; 2
    3510:	09 f4       	brne	.+2      	; 0x3514 <_ZN10AF_DCMotor3runEh+0xa>
    3512:	6a c0       	rjmp	.+212    	; 0x35e8 <_ZN10AF_DCMotor3runEh+0xde>
    3514:	83 30       	cpi	r24, 0x03	; 3
    3516:	30 f0       	brcs	.+12     	; 0x3524 <_ZN10AF_DCMotor3runEh+0x1a>
    3518:	83 30       	cpi	r24, 0x03	; 3
    351a:	09 f4       	brne	.+2      	; 0x351e <_ZN10AF_DCMotor3runEh+0x14>
    351c:	62 c0       	rjmp	.+196    	; 0x35e2 <_ZN10AF_DCMotor3runEh+0xd8>
    351e:	84 30       	cpi	r24, 0x04	; 4
    3520:	39 f1       	breq	.+78     	; 0x3570 <_ZN10AF_DCMotor3runEh+0x66>
    3522:	08 95       	ret
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	e9 f7       	brne	.-6      	; 0x3522 <_ZN10AF_DCMotor3runEh+0x18>
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	92 e0       	ldi	r25, 0x02	; 2
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    352c:	62 30       	cpi	r22, 0x02	; 2
    352e:	21 f1       	breq	.+72     	; 0x3578 <_ZN10AF_DCMotor3runEh+0x6e>
    3530:	64 30       	cpi	r22, 0x04	; 4
    3532:	09 f4       	brne	.+2      	; 0x3536 <_ZN10AF_DCMotor3runEh+0x2c>
    3534:	3b c0       	rjmp	.+118    	; 0x35ac <_ZN10AF_DCMotor3runEh+0xa2>
    3536:	61 30       	cpi	r22, 0x01	; 1
    3538:	a1 f7       	brne	.-24     	; 0x3522 <_ZN10AF_DCMotor3runEh+0x18>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    353a:	21 e0       	ldi	r18, 0x01	; 1
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	a9 01       	movw	r20, r18
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <_ZN10AF_DCMotor3runEh+0x3c>
    3542:	44 0f       	add	r20, r20
    3544:	55 1f       	adc	r21, r21
    3546:	8a 95       	dec	r24
    3548:	e2 f7       	brpl	.-8      	; 0x3542 <_ZN10AF_DCMotor3runEh+0x38>
    354a:	84 2f       	mov	r24, r20
    354c:	80 95       	com	r24
    354e:	a9 01       	movw	r20, r18
    3550:	02 c0       	rjmp	.+4      	; 0x3556 <_ZN10AF_DCMotor3runEh+0x4c>
    3552:	44 0f       	add	r20, r20
    3554:	55 1f       	adc	r21, r21
    3556:	9a 95       	dec	r25
    3558:	e2 f7       	brpl	.-8      	; 0x3552 <_ZN10AF_DCMotor3runEh+0x48>
    355a:	20 91 5d 03 	lds	r18, 0x035D
    355e:	24 2b       	or	r18, r20
    3560:	82 23       	and	r24, r18
    3562:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    3566:	8c e5       	ldi	r24, 0x5C	; 92
    3568:	93 e0       	ldi	r25, 0x03	; 3
    356a:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    break;
    356e:	08 95       	ret
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    3570:	86 e0       	ldi	r24, 0x06	; 6
    3572:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    3574:	62 30       	cpi	r22, 0x02	; 2
    3576:	e1 f6       	brne	.-72     	; 0x3530 <_ZN10AF_DCMotor3runEh+0x26>
    latch_state &= ~_BV(b); 
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    3578:	21 e0       	ldi	r18, 0x01	; 1
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	a9 01       	movw	r20, r18
    357e:	02 c0       	rjmp	.+4      	; 0x3584 <_ZN10AF_DCMotor3runEh+0x7a>
    3580:	44 0f       	add	r20, r20
    3582:	55 1f       	adc	r21, r21
    3584:	9a 95       	dec	r25
    3586:	e2 f7       	brpl	.-8      	; 0x3580 <_ZN10AF_DCMotor3runEh+0x76>
    3588:	94 2f       	mov	r25, r20
    358a:	90 95       	com	r25
    358c:	40 91 5d 03 	lds	r20, 0x035D
    3590:	94 23       	and	r25, r20
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <_ZN10AF_DCMotor3runEh+0x8e>
    3594:	22 0f       	add	r18, r18
    3596:	33 1f       	adc	r19, r19
    3598:	8a 95       	dec	r24
    359a:	e2 f7       	brpl	.-8      	; 0x3594 <_ZN10AF_DCMotor3runEh+0x8a>
    359c:	92 2b       	or	r25, r18
    359e:	90 93 5d 03 	sts	0x035D, r25
    MC.latch_tx();
    35a2:	8c e5       	ldi	r24, 0x5C	; 92
    35a4:	93 e0       	ldi	r25, 0x03	; 3
    35a6:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    break;
    35aa:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    35ac:	21 e0       	ldi	r18, 0x01	; 1
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	a9 01       	movw	r20, r18
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <_ZN10AF_DCMotor3runEh+0xae>
    35b4:	44 0f       	add	r20, r20
    35b6:	55 1f       	adc	r21, r21
    35b8:	9a 95       	dec	r25
    35ba:	e2 f7       	brpl	.-8      	; 0x35b4 <_ZN10AF_DCMotor3runEh+0xaa>
    35bc:	b9 01       	movw	r22, r18
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <_ZN10AF_DCMotor3runEh+0xba>
    35c0:	66 0f       	add	r22, r22
    35c2:	77 1f       	adc	r23, r23
    35c4:	8a 95       	dec	r24
    35c6:	e2 f7       	brpl	.-8      	; 0x35c0 <_ZN10AF_DCMotor3runEh+0xb6>
    35c8:	cb 01       	movw	r24, r22
    35ca:	84 2b       	or	r24, r20
    35cc:	80 95       	com	r24
    35ce:	20 91 5d 03 	lds	r18, 0x035D
    35d2:	28 23       	and	r18, r24
    35d4:	20 93 5d 03 	sts	0x035D, r18
    MC.latch_tx();
    35d8:	8c e5       	ldi	r24, 0x5C	; 92
    35da:	93 e0       	ldi	r25, 0x03	; 3
    35dc:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    35e0:	08 95       	ret
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    35e2:	87 e0       	ldi	r24, 0x07	; 7
    35e4:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    35e6:	a2 cf       	rjmp	.-188    	; 0x352c <_ZN10AF_DCMotor3runEh+0x22>
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    35e8:	84 e0       	ldi	r24, 0x04	; 4
    35ea:	91 e0       	ldi	r25, 0x01	; 1
    35ec:	9f cf       	rjmp	.-194    	; 0x352c <_ZN10AF_DCMotor3runEh+0x22>

000035ee <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
    35f2:	ec 01       	movw	r28, r24
  LATCH_DDR |= _BV(LATCH);
  ENABLE_DDR |= _BV(ENABLE);
  CLK_DDR |= _BV(CLK);
  SER_DDR |= _BV(SER);
  */
  pinMode(MOTORLATCH, OUTPUT);
    35f4:	8c e0       	ldi	r24, 0x0C	; 12
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
  pinMode(MOTORENABLE, OUTPUT);
    35fc:	87 e0       	ldi	r24, 0x07	; 7
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
  pinMode(MOTORDATA, OUTPUT);
    3604:	88 e0       	ldi	r24, 0x08	; 8
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
  pinMode(MOTORCLK, OUTPUT);
    360c:	84 e0       	ldi	r24, 0x04	; 4
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>

  latch_state = 0;
    3614:	10 92 5d 03 	sts	0x035D, r1

  latch_tx();  // "reset"
    3618:	ce 01       	movw	r24, r28
    361a:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>

  //ENABLE_PORT &= ~_BV(ENABLE); // enable the chip outputs!
  digitalWrite(MOTORENABLE, LOW);
    361e:	87 e0       	ldi	r24, 0x07	; 7
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
}
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	08 95       	ret

0000362c <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    362c:	ef 92       	push	r14
    362e:	ff 92       	push	r15
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	df 93       	push	r29
    3636:	ec 01       	movw	r28, r24
    3638:	7b 01       	movw	r14, r22
    363a:	14 2f       	mov	r17, r20
  MC.enable();
    363c:	8c e5       	ldi	r24, 0x5C	; 92
    363e:	93 e0       	ldi	r25, 0x03	; 3
    3640:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    3644:	f9 82       	std	Y+1, r15	; 0x01
    3646:	e8 82       	st	Y, r14
  steppernum = num;
    3648:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    364a:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    364c:	11 30       	cpi	r17, 0x01	; 1
    364e:	d1 f1       	breq	.+116    	; 0x36c4 <_ZN10AF_StepperC1Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    3650:	12 30       	cpi	r17, 0x02	; 2
    3652:	31 f0       	breq	.+12     	; 0x3660 <_ZN10AF_StepperC1Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    3654:	df 91       	pop	r29
    3656:	cf 91       	pop	r28
    3658:	1f 91       	pop	r17
    365a:	ff 90       	pop	r15
    365c:	ef 90       	pop	r14
    365e:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    3660:	80 91 5d 03 	lds	r24, 0x035D
    3664:	8e 71       	andi	r24, 0x1E	; 30
    3666:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    366a:	8c e5       	ldi	r24, 0x5C	; 92
    366c:	93 e0       	ldi	r25, 0x03	; 3
    366e:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    3672:	85 e0       	ldi	r24, 0x05	; 5
    3674:	61 e0       	ldi	r22, 0x01	; 1
    3676:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    pinMode(6, OUTPUT);
    367a:	86 e0       	ldi	r24, 0x06	; 6
    367c:	61 e0       	ldi	r22, 0x01	; 1
    367e:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    digitalWrite(5, HIGH);
    3682:	85 e0       	ldi	r24, 0x05	; 5
    3684:	61 e0       	ldi	r22, 0x01	; 1
    3686:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    digitalWrite(6, HIGH);
    368a:	86 e0       	ldi	r24, 0x06	; 6
    368c:	61 e0       	ldi	r22, 0x01	; 1
    368e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    3692:	84 b5       	in	r24, 0x24	; 36
    3694:	83 68       	ori	r24, 0x83	; 131
    3696:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    3698:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    369a:	86 e0       	ldi	r24, 0x06	; 6
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    36a2:	84 b5       	in	r24, 0x24	; 36
    36a4:	83 62       	ori	r24, 0x23	; 35
    36a6:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    36a8:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    36aa:	85 e0       	ldi	r24, 0x05	; 5
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    36b2:	8f ef       	ldi	r24, 0xFF	; 255
    36b4:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    36b6:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    36c4:	80 91 5d 03 	lds	r24, 0x035D
    36c8:	81 7e       	andi	r24, 0xE1	; 225
    36ca:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    36ce:	8c e5       	ldi	r24, 0x5C	; 92
    36d0:	93 e0       	ldi	r25, 0x03	; 3
    36d2:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    36d6:	8b e0       	ldi	r24, 0x0B	; 11
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    pinMode(3, OUTPUT);
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    digitalWrite(11, HIGH);
    36e6:	8b e0       	ldi	r24, 0x0B	; 11
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    digitalWrite(3, HIGH);
    36ee:	83 e0       	ldi	r24, 0x03	; 3
    36f0:	61 e0       	ldi	r22, 0x01	; 1
    36f2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    36f6:	80 91 b0 00 	lds	r24, 0x00B0
    36fa:	83 68       	ori	r24, 0x83	; 131
    36fc:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3700:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    3704:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    3708:	8b e0       	ldi	r24, 0x0B	; 11
    370a:	61 e0       	ldi	r22, 0x01	; 1
    370c:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    3710:	80 91 b0 00 	lds	r24, 0x00B0
    3714:	83 62       	ori	r24, 0x23	; 35
    3716:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    371a:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    371e:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    3722:	83 e0       	ldi	r24, 0x03	; 3
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    372a:	8f ef       	ldi	r24, 0xFF	; 255
    372c:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    3730:	80 93 b4 00 	sts	0x00B4, r24
    3734:	8f cf       	rjmp	.-226    	; 0x3654 <_ZN10AF_StepperC1Ejh+0x28>

00003736 <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    3736:	1f 93       	push	r17
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	0f 92       	push	r0
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	fc 01       	movw	r30, r24
    3744:	14 2f       	mov	r17, r20
  motornum = num;
    3746:	60 83       	st	Z, r22
  pwmfreq = freq;
    3748:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    374a:	8c e5       	ldi	r24, 0x5C	; 92
    374c:	93 e0       	ldi	r25, 0x03	; 3
    374e:	69 83       	std	Y+1, r22	; 0x01
    3750:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN17AFMotorController6enableEv>

  switch (num) {
    3754:	69 81       	ldd	r22, Y+1	; 0x01
    3756:	62 30       	cpi	r22, 0x02	; 2
    3758:	09 f4       	brne	.+2      	; 0x375c <_ZN10AF_DCMotorC2Ehh+0x26>
    375a:	50 c0       	rjmp	.+160    	; 0x37fc <_ZN10AF_DCMotorC2Ehh+0xc6>
    375c:	63 30       	cpi	r22, 0x03	; 3
    375e:	f0 f4       	brcc	.+60     	; 0x379c <_ZN10AF_DCMotorC2Ehh+0x66>
    3760:	61 30       	cpi	r22, 0x01	; 1
    3762:	b9 f4       	brne	.+46     	; 0x3792 <_ZN10AF_DCMotorC2Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    3764:	80 91 5d 03 	lds	r24, 0x035D
    3768:	83 7f       	andi	r24, 0xF3	; 243
    376a:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    376e:	8c e5       	ldi	r24, 0x5C	; 92
    3770:	93 e0       	ldi	r25, 0x03	; 3
    3772:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    3776:	80 91 b0 00 	lds	r24, 0x00B0
    377a:	83 68       	ori	r24, 0x83	; 131
    377c:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3780:	17 70       	andi	r17, 0x07	; 7
    3782:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    3786:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    378a:	8b e0       	ldi	r24, 0x0B	; 11
    378c:	61 e0       	ldi	r22, 0x01	; 1
    378e:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    3792:	0f 90       	pop	r0
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	1f 91       	pop	r17
    379a:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    379c:	63 30       	cpi	r22, 0x03	; 3
    379e:	c1 f0       	breq	.+48     	; 0x37d0 <_ZN10AF_DCMotorC2Ehh+0x9a>
    37a0:	64 30       	cpi	r22, 0x04	; 4
    37a2:	b9 f7       	brne	.-18     	; 0x3792 <_ZN10AF_DCMotorC2Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    37a4:	80 91 5d 03 	lds	r24, 0x035D
    37a8:	8e 7b       	andi	r24, 0xBE	; 190
    37aa:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    37ae:	8c e5       	ldi	r24, 0x5C	; 92
    37b0:	93 e0       	ldi	r25, 0x03	; 3
    37b2:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    37b6:	84 b5       	in	r24, 0x24	; 36
    37b8:	83 62       	ori	r24, 0x23	; 35
    37ba:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    37bc:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    37be:	85 e0       	ldi	r24, 0x05	; 5
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    37c6:	0f 90       	pop	r0
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	1f 91       	pop	r17
    37ce:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    37d0:	80 91 5d 03 	lds	r24, 0x035D
    37d4:	8f 75       	andi	r24, 0x5F	; 95
    37d6:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    37da:	8c e5       	ldi	r24, 0x5C	; 92
    37dc:	93 e0       	ldi	r25, 0x03	; 3
    37de:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    37e2:	84 b5       	in	r24, 0x24	; 36
    37e4:	83 68       	ori	r24, 0x83	; 131
    37e6:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    37e8:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    37ea:	86 e0       	ldi	r24, 0x06	; 6
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    37f2:	0f 90       	pop	r0
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	1f 91       	pop	r17
    37fa:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    37fc:	80 91 5d 03 	lds	r24, 0x035D
    3800:	8d 7e       	andi	r24, 0xED	; 237
    3802:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    3806:	8c e5       	ldi	r24, 0x5C	; 92
    3808:	93 e0       	ldi	r25, 0x03	; 3
    380a:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    380e:	80 91 b0 00 	lds	r24, 0x00B0
    3812:	83 62       	ori	r24, 0x23	; 35
    3814:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3818:	17 70       	andi	r17, 0x07	; 7
    381a:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    381e:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	61 e0       	ldi	r22, 0x01	; 1
    3826:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	1f 91       	pop	r17
    3832:	08 95       	ret

00003834 <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    3834:	1f 93       	push	r17
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	0f 92       	push	r0
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	fc 01       	movw	r30, r24
    3842:	14 2f       	mov	r17, r20
  motornum = num;
    3844:	60 83       	st	Z, r22
  pwmfreq = freq;
    3846:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    3848:	8c e5       	ldi	r24, 0x5C	; 92
    384a:	93 e0       	ldi	r25, 0x03	; 3
    384c:	69 83       	std	Y+1, r22	; 0x01
    384e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN17AFMotorController6enableEv>

  switch (num) {
    3852:	69 81       	ldd	r22, Y+1	; 0x01
    3854:	62 30       	cpi	r22, 0x02	; 2
    3856:	09 f4       	brne	.+2      	; 0x385a <_ZN10AF_DCMotorC1Ehh+0x26>
    3858:	50 c0       	rjmp	.+160    	; 0x38fa <_ZN10AF_DCMotorC1Ehh+0xc6>
    385a:	63 30       	cpi	r22, 0x03	; 3
    385c:	f0 f4       	brcc	.+60     	; 0x389a <_ZN10AF_DCMotorC1Ehh+0x66>
    385e:	61 30       	cpi	r22, 0x01	; 1
    3860:	b9 f4       	brne	.+46     	; 0x3890 <_ZN10AF_DCMotorC1Ehh+0x5c>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    3862:	80 91 5d 03 	lds	r24, 0x035D
    3866:	83 7f       	andi	r24, 0xF3	; 243
    3868:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    386c:	8c e5       	ldi	r24, 0x5C	; 92
    386e:	93 e0       	ldi	r25, 0x03	; 3
    3870:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    3874:	80 91 b0 00 	lds	r24, 0x00B0
    3878:	83 68       	ori	r24, 0x83	; 131
    387a:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    387e:	17 70       	andi	r17, 0x07	; 7
    3880:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    3884:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    3888:	8b e0       	ldi	r24, 0x0B	; 11
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    3890:	0f 90       	pop	r0
    3892:	cf 91       	pop	r28
    3894:	df 91       	pop	r29
    3896:	1f 91       	pop	r17
    3898:	08 95       	ret
  motornum = num;
  pwmfreq = freq;

  MC.enable();

  switch (num) {
    389a:	63 30       	cpi	r22, 0x03	; 3
    389c:	c1 f0       	breq	.+48     	; 0x38ce <_ZN10AF_DCMotorC1Ehh+0x9a>
    389e:	64 30       	cpi	r22, 0x04	; 4
    38a0:	b9 f7       	brne	.-18     	; 0x3890 <_ZN10AF_DCMotorC1Ehh+0x5c>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM3(freq);
    break;
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    38a2:	80 91 5d 03 	lds	r24, 0x035D
    38a6:	8e 7b       	andi	r24, 0xBE	; 190
    38a8:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    38ac:	8c e5       	ldi	r24, 0x5C	; 92
    38ae:	93 e0       	ldi	r25, 0x03	; 3
    38b0:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    38b4:	84 b5       	in	r24, 0x24	; 36
    38b6:	83 62       	ori	r24, 0x23	; 35
    38b8:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    38ba:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    38bc:	85 e0       	ldi	r24, 0x05	; 5
    38be:	61 e0       	ldi	r22, 0x01	; 1
    38c0:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    38c4:	0f 90       	pop	r0
    38c6:	cf 91       	pop	r28
    38c8:	df 91       	pop	r29
    38ca:	1f 91       	pop	r17
    38cc:	08 95       	ret
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM2(freq);
    break;
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    38ce:	80 91 5d 03 	lds	r24, 0x035D
    38d2:	8f 75       	andi	r24, 0x5F	; 95
    38d4:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    38d8:	8c e5       	ldi	r24, 0x5C	; 92
    38da:	93 e0       	ldi	r25, 0x03	; 3
    38dc:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    38e0:	84 b5       	in	r24, 0x24	; 36
    38e2:	83 68       	ori	r24, 0x83	; 131
    38e4:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    38e6:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    38e8:	86 e0       	ldi	r24, 0x06	; 6
    38ea:	61 e0       	ldi	r22, 0x01	; 1
    38ec:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    38f0:	0f 90       	pop	r0
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	1f 91       	pop	r17
    38f8:	08 95       	ret
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM1(freq);
    break;
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    38fa:	80 91 5d 03 	lds	r24, 0x035D
    38fe:	8d 7e       	andi	r24, 0xED	; 237
    3900:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    3904:	8c e5       	ldi	r24, 0x5C	; 92
    3906:	93 e0       	ldi	r25, 0x03	; 3
    3908:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    390c:	80 91 b0 00 	lds	r24, 0x00B0
    3910:	83 62       	ori	r24, 0x23	; 35
    3912:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3916:	17 70       	andi	r17, 0x07	; 7
    3918:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    391c:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    3920:	83 e0       	ldi	r24, 0x03	; 3
    3922:	61 e0       	ldi	r22, 0x01	; 1
    3924:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    MC.latch_tx();
    initPWM4(freq);
    break;
  }
}
    3928:	0f 90       	pop	r0
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	1f 91       	pop	r17
    3930:	08 95       	ret

00003932 <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    3932:	ef 92       	push	r14
    3934:	ff 92       	push	r15
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	ec 01       	movw	r28, r24
    393e:	7b 01       	movw	r14, r22
    3940:	14 2f       	mov	r17, r20
  MC.enable();
    3942:	8c e5       	ldi	r24, 0x5C	; 92
    3944:	93 e0       	ldi	r25, 0x03	; 3
    3946:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    394a:	f9 82       	std	Y+1, r15	; 0x01
    394c:	e8 82       	st	Y, r14
  steppernum = num;
    394e:	1a 83       	std	Y+2, r17	; 0x02
  currentstep = 0;
    3950:	1b 86       	std	Y+11, r1	; 0x0b

  if (steppernum == 1) {
    3952:	11 30       	cpi	r17, 0x01	; 1
    3954:	d1 f1       	breq	.+116    	; 0x39ca <_ZN10AF_StepperC2Ejh+0x98>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    3956:	12 30       	cpi	r17, 0x02	; 2
    3958:	31 f0       	breq	.+12     	; 0x3966 <_ZN10AF_StepperC2Ejh+0x34>
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    395a:	df 91       	pop	r29
    395c:	cf 91       	pop	r28
    395e:	1f 91       	pop	r17
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	08 95       	ret
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    3966:	80 91 5d 03 	lds	r24, 0x035D
    396a:	8e 71       	andi	r24, 0x1E	; 30
    396c:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    3970:	8c e5       	ldi	r24, 0x5C	; 92
    3972:	93 e0       	ldi	r25, 0x03	; 3
    3974:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    3978:	85 e0       	ldi	r24, 0x05	; 5
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    pinMode(6, OUTPUT);
    3980:	86 e0       	ldi	r24, 0x06	; 6
    3982:	61 e0       	ldi	r22, 0x01	; 1
    3984:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    digitalWrite(5, HIGH);
    3988:	85 e0       	ldi	r24, 0x05	; 5
    398a:	61 e0       	ldi	r22, 0x01	; 1
    398c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    digitalWrite(6, HIGH);
    3990:	86 e0       	ldi	r24, 0x06	; 6
    3992:	61 e0       	ldi	r22, 0x01	; 1
    3994:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on OC0A
    3998:	84 b5       	in	r24, 0x24	; 36
    399a:	83 68       	ori	r24, 0x83	; 131
    399c:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    399e:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    39a0:	86 e0       	ldi	r24, 0x06	; 6
    39a2:	61 e0       	ldi	r22, 0x01	; 1
    39a4:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01); // fast PWM, turn on oc0a
    39a8:	84 b5       	in	r24, 0x24	; 36
    39aa:	83 62       	ori	r24, 0x23	; 35
    39ac:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    39ae:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    39b0:	85 e0       	ldi	r24, 0x05	; 5
    39b2:	61 e0       	ldi	r22, 0x01	; 1
    39b4:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    39b8:	8f ef       	ldi	r24, 0xFF	; 255
    39ba:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    39bc:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	ff 90       	pop	r15
    39c6:	ef 90       	pop	r14
    39c8:	08 95       	ret
  steppernum = num;
  currentstep = 0;

  if (steppernum == 1) {
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    39ca:	80 91 5d 03 	lds	r24, 0x035D
    39ce:	81 7e       	andi	r24, 0xE1	; 225
    39d0:	80 93 5d 03 	sts	0x035D, r24
    MC.latch_tx();
    39d4:	8c e5       	ldi	r24, 0x5C	; 92
    39d6:	93 e0       	ldi	r25, 0x03	; 3
    39d8:	0e 94 23 18 	call	0x3046	; 0x3046 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    39dc:	8b e0       	ldi	r24, 0x0B	; 11
    39de:	61 e0       	ldi	r22, 0x01	; 1
    39e0:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    pinMode(3, OUTPUT);
    39e4:	83 e0       	ldi	r24, 0x03	; 3
    39e6:	61 e0       	ldi	r22, 0x01	; 1
    39e8:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    digitalWrite(11, HIGH);
    39ec:	8b e0       	ldi	r24, 0x0B	; 11
    39ee:	61 e0       	ldi	r22, 0x01	; 1
    39f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    digitalWrite(3, HIGH);
    39f4:	83 e0       	ldi	r24, 0x03	; 3
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalWrite>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2a
    39fc:	80 91 b0 00 	lds	r24, 0x00B0
    3a00:	83 68       	ori	r24, 0x83	; 131
    3a02:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3a06:	10 93 b1 00 	sts	0x00B1, r17
    OCR2A = 0;
    3a0a:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    3a0e:	8b e0       	ldi	r24, 0x0B	; 11
    3a10:	61 e0       	ldi	r22, 0x01	; 1
    3a12:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21); // fast PWM, turn on oc2b
    3a16:	80 91 b0 00 	lds	r24, 0x00B0
    3a1a:	83 62       	ori	r24, 0x23	; 35
    3a1c:	80 93 b0 00 	sts	0x00B0, r24
    TCCR2B = freq & 0x7;
    3a20:	10 93 b1 00 	sts	0x00B1, r17
    OCR2B = 0;
    3a24:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    3a28:	83 e0       	ldi	r24, 0x03	; 3
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	0e 94 92 03 	call	0x724	; 0x724 <pinMode>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    3a30:	8f ef       	ldi	r24, 0xFF	; 255
    3a32:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    3a36:	80 93 b4 00 	sts	0x00B4, r24
    3a3a:	8f cf       	rjmp	.-226    	; 0x395a <_ZN10AF_StepperC2Ejh+0x28>

00003a3c <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    3a3c:	10 92 82 03 	sts	0x0382, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
    3a40:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
    3a42:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    3a44:	e9 eb       	ldi	r30, 0xB9	; 185
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	8e 7f       	andi	r24, 0xFE	; 254
    3a4c:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
    3a4e:	80 81       	ld	r24, Z
    3a50:	8d 7f       	andi	r24, 0xFD	; 253
    3a52:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
    3a54:	88 e4       	ldi	r24, 0x48	; 72
    3a56:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    3a5a:	85 e4       	ldi	r24, 0x45	; 69
    3a5c:	80 93 bc 00 	sts	0x00BC, r24
}
    3a60:	08 95       	ret

00003a62 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    3a62:	88 0f       	add	r24, r24
    3a64:	80 93 ba 00 	sts	0x00BA, r24
}
    3a68:	08 95       	ret

00003a6a <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3a6a:	41 32       	cpi	r20, 0x21	; 33
    3a6c:	a0 f5       	brcc	.+104    	; 0x3ad6 <twi_readFrom+0x6c>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    3a6e:	90 91 82 03 	lds	r25, 0x0382
    3a72:	99 23       	and	r25, r25
    3a74:	e1 f7       	brne	.-8      	; 0x3a6e <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	90 93 82 03 	sts	0x0382, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3a7c:	9f ef       	ldi	r25, 0xFF	; 255
    3a7e:	90 93 81 03 	sts	0x0381, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3a82:	10 92 5f 03 	sts	0x035F, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    3a86:	94 2f       	mov	r25, r20
    3a88:	91 50       	subi	r25, 0x01	; 1
    3a8a:	90 93 60 03 	sts	0x0360, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
    3a8e:	88 0f       	add	r24, r24
    3a90:	81 60       	ori	r24, 0x01	; 1
    3a92:	80 93 5e 03 	sts	0x035E, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3a96:	85 ee       	ldi	r24, 0xE5	; 229
    3a98:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    3a9c:	80 91 82 03 	lds	r24, 0x0382
    3aa0:	81 30       	cpi	r24, 0x01	; 1
    3aa2:	e1 f3       	breq	.-8      	; 0x3a9c <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
    3aa4:	80 91 5f 03 	lds	r24, 0x035F
    3aa8:	84 17       	cp	r24, r20
    3aaa:	90 f0       	brcs	.+36     	; 0x3ad0 <twi_readFrom+0x66>
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3aac:	44 23       	and	r20, r20
    3aae:	71 f0       	breq	.+28     	; 0x3acc <twi_readFrom+0x62>
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    data[i] = twi_masterBuffer[i];
    3ab4:	fb 01       	movw	r30, r22
    3ab6:	e2 0f       	add	r30, r18
    3ab8:	f3 1f       	adc	r31, r19
    3aba:	d9 01       	movw	r26, r18
    3abc:	af 59       	subi	r26, 0x9F	; 159
    3abe:	bc 4f       	sbci	r27, 0xFC	; 252
    3ac0:	9c 91       	ld	r25, X
    3ac2:	90 83       	st	Z, r25
    3ac4:	2f 5f       	subi	r18, 0xFF	; 255
    3ac6:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    3ac8:	24 17       	cp	r18, r20
    3aca:	a0 f3       	brcs	.-24     	; 0x3ab4 <twi_readFrom+0x4a>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3acc:	84 2f       	mov	r24, r20
    3ace:	08 95       	ret
  while(TWI_MRX == twi_state){
    continue;
  }

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;
    3ad0:	40 91 5f 03 	lds	r20, 0x035F
    3ad4:	eb cf       	rjmp	.-42     	; 0x3aac <twi_readFrom+0x42>
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
    3ad8:	84 2f       	mov	r24, r20
    3ada:	08 95       	ret

00003adc <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3ae0:	41 32       	cpi	r20, 0x21	; 33
    3ae2:	08 f0       	brcs	.+2      	; 0x3ae6 <twi_writeTo+0xa>
    3ae4:	43 c0       	rjmp	.+134    	; 0x3b6c <twi_writeTo+0x90>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    3ae6:	90 91 82 03 	lds	r25, 0x0382
    3aea:	99 23       	and	r25, r25
    3aec:	e1 f7       	brne	.-8      	; 0x3ae6 <twi_writeTo+0xa>
    continue;
  }
  twi_state = TWI_MTX;
    3aee:	92 e0       	ldi	r25, 0x02	; 2
    3af0:	90 93 82 03 	sts	0x0382, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    3af4:	9f ef       	ldi	r25, 0xFF	; 255
    3af6:	90 93 81 03 	sts	0x0381, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    3afa:	10 92 5f 03 	sts	0x035F, r1
  twi_masterBufferLength = length;
    3afe:	40 93 60 03 	sts	0x0360, r20
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3b02:	44 23       	and	r20, r20
    3b04:	69 f0       	breq	.+26     	; 0x3b20 <twi_writeTo+0x44>
    3b06:	e0 e0       	ldi	r30, 0x00	; 0
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    twi_masterBuffer[i] = data[i];
    3b0a:	df 01       	movw	r26, r30
    3b0c:	af 59       	subi	r26, 0x9F	; 159
    3b0e:	bc 4f       	sbci	r27, 0xFC	; 252
    3b10:	eb 01       	movw	r28, r22
    3b12:	ce 0f       	add	r28, r30
    3b14:	df 1f       	adc	r29, r31
    3b16:	98 81       	ld	r25, Y
    3b18:	9c 93       	st	X, r25
    3b1a:	31 96       	adiw	r30, 0x01	; 1
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    3b1c:	e4 17       	cp	r30, r20
    3b1e:	a8 f3       	brcs	.-22     	; 0x3b0a <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	88 0f       	add	r24, r24
    3b24:	99 1f       	adc	r25, r25
    3b26:	80 93 5e 03 	sts	0x035E, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    3b2a:	85 ee       	ldi	r24, 0xE5	; 229
    3b2c:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3b30:	22 23       	and	r18, r18
    3b32:	81 f4       	brne	.+32     	; 0x3b54 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3b34:	80 91 81 03 	lds	r24, 0x0381
    3b38:	8f 3f       	cpi	r24, 0xFF	; 255
    3b3a:	a1 f0       	breq	.+40     	; 0x3b64 <twi_writeTo+0x88>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3b3c:	80 91 81 03 	lds	r24, 0x0381
    3b40:	80 32       	cpi	r24, 0x20	; 32
    3b42:	c1 f0       	breq	.+48     	; 0x3b74 <twi_writeTo+0x98>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3b44:	80 91 81 03 	lds	r24, 0x0381
    3b48:	80 33       	cpi	r24, 0x30	; 48
    3b4a:	b1 f0       	breq	.+44     	; 0x3b78 <twi_writeTo+0x9c>
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	08 95       	ret
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    3b54:	80 91 82 03 	lds	r24, 0x0382
    3b58:	82 30       	cpi	r24, 0x02	; 2
    3b5a:	e1 f3       	breq	.-8      	; 0x3b54 <twi_writeTo+0x78>
    continue;
  }
  
  if (twi_error == 0xFF)
    3b5c:	80 91 81 03 	lds	r24, 0x0381
    3b60:	8f 3f       	cpi	r24, 0xFF	; 255
    3b62:	61 f7       	brne	.-40     	; 0x3b3c <twi_writeTo+0x60>
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	08 95       	ret
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
    3b6e:	df 91       	pop	r29
    3b70:	cf 91       	pop	r28
    3b72:	08 95       	ret
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
    3b74:	82 e0       	ldi	r24, 0x02	; 2
    3b76:	eb cf       	rjmp	.-42     	; 0x3b4e <twi_writeTo+0x72>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    3b78:	83 e0       	ldi	r24, 0x03	; 3
    3b7a:	e9 cf       	rjmp	.-46     	; 0x3b4e <twi_writeTo+0x72>

00003b7c <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3b7c:	61 32       	cpi	r22, 0x21	; 33
    3b7e:	d0 f4       	brcc	.+52     	; 0x3bb4 <twi_transmit+0x38>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    3b80:	20 91 82 03 	lds	r18, 0x0382
    3b84:	24 30       	cpi	r18, 0x04	; 4
    3b86:	11 f0       	breq	.+4      	; 0x3b8c <twi_transmit+0x10>
    3b88:	82 e0       	ldi	r24, 0x02	; 2
    3b8a:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
    3b8c:	60 93 a7 03 	sts	0x03A7, r22
  for(i = 0; i < length; ++i){
    3b90:	66 23       	and	r22, r22
    3b92:	71 f0       	breq	.+28     	; 0x3bb0 <twi_transmit+0x34>
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    twi_txBuffer[i] = data[i];
    3b98:	f9 01       	movw	r30, r18
    3b9a:	e6 55       	subi	r30, 0x56	; 86
    3b9c:	fc 4f       	sbci	r31, 0xFC	; 252
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	a2 0f       	add	r26, r18
    3ba2:	b3 1f       	adc	r27, r19
    3ba4:	4c 91       	ld	r20, X
    3ba6:	40 83       	st	Z, r20
    3ba8:	2f 5f       	subi	r18, 0xFF	; 255
    3baa:	3f 4f       	sbci	r19, 0xFF	; 255
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
    3bac:	26 17       	cp	r18, r22
    3bae:	a0 f3       	brcs	.-24     	; 0x3b98 <twi_transmit+0x1c>
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
    3bb2:	08 95       	ret
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	08 95       	ret

00003bb8 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    3bb8:	90 93 a5 03 	sts	0x03A5, r25
    3bbc:	80 93 a4 03 	sts	0x03A4, r24
}
    3bc0:	08 95       	ret

00003bc2 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    3bc2:	90 93 a9 03 	sts	0x03A9, r25
    3bc6:	80 93 a8 03 	sts	0x03A8, r24
}
    3bca:	08 95       	ret

00003bcc <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    3bcc:	88 23       	and	r24, r24
    3bce:	21 f4       	brne	.+8      	; 0x3bd8 <twi_reply+0xc>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3bd0:	85 e8       	ldi	r24, 0x85	; 133
    3bd2:	80 93 bc 00 	sts	0x00BC, r24
    3bd6:	08 95       	ret
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3bd8:	85 ec       	ldi	r24, 0xC5	; 197
    3bda:	80 93 bc 00 	sts	0x00BC, r24
    3bde:	08 95       	ret

00003be0 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3be0:	85 ed       	ldi	r24, 0xD5	; 213
    3be2:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3be6:	80 91 bc 00 	lds	r24, 0x00BC
    3bea:	84 fd       	sbrc	r24, 4
    3bec:	fc cf       	rjmp	.-8      	; 0x3be6 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3bee:	10 92 82 03 	sts	0x0382, r1
}
    3bf2:	08 95       	ret

00003bf4 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3bf4:	85 ec       	ldi	r24, 0xC5	; 197
    3bf6:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3bfa:	10 92 82 03 	sts	0x0382, r1
}
    3bfe:	08 95       	ret

00003c00 <__vector_24>:

SIGNAL(TWI_vect)
{
    3c00:	1f 92       	push	r1
    3c02:	0f 92       	push	r0
    3c04:	0f b6       	in	r0, 0x3f	; 63
    3c06:	0f 92       	push	r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	2f 93       	push	r18
    3c0c:	3f 93       	push	r19
    3c0e:	4f 93       	push	r20
    3c10:	5f 93       	push	r21
    3c12:	6f 93       	push	r22
    3c14:	7f 93       	push	r23
    3c16:	8f 93       	push	r24
    3c18:	9f 93       	push	r25
    3c1a:	af 93       	push	r26
    3c1c:	bf 93       	push	r27
    3c1e:	ef 93       	push	r30
    3c20:	ff 93       	push	r31
  switch(TW_STATUS){
    3c22:	80 91 b9 00 	lds	r24, 0x00B9
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	a0 e0       	ldi	r26, 0x00	; 0
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	88 7f       	andi	r24, 0xF8	; 248
    3c2e:	90 70       	andi	r25, 0x00	; 0
    3c30:	a0 70       	andi	r26, 0x00	; 0
    3c32:	b0 70       	andi	r27, 0x00	; 0
    3c34:	89 3c       	cpi	r24, 0xC9	; 201
    3c36:	91 05       	cpc	r25, r1
    3c38:	98 f5       	brcc	.+102    	; 0x3ca0 <__vector_24+0xa0>
    3c3a:	8c 5c       	subi	r24, 0xCC	; 204
    3c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3e:	fc 01       	movw	r30, r24
    3c40:	ee 0f       	add	r30, r30
    3c42:	ff 1f       	adc	r31, r31
    3c44:	05 90       	lpm	r0, Z+
    3c46:	f4 91       	lpm	r31, Z+
    3c48:	e0 2d       	mov	r30, r0
    3c4a:	09 94       	ijmp
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3c4c:	84 e0       	ldi	r24, 0x04	; 4
    3c4e:	80 93 82 03 	sts	0x0382, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3c52:	10 92 a6 03 	sts	0x03A6, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3c56:	10 92 a7 03 	sts	0x03A7, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3c5a:	e0 91 a8 03 	lds	r30, 0x03A8
    3c5e:	f0 91 a9 03 	lds	r31, 0x03A9
    3c62:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3c64:	80 91 a7 03 	lds	r24, 0x03A7
    3c68:	88 23       	and	r24, r24
    3c6a:	29 f4       	brne	.+10     	; 0x3c76 <__vector_24+0x76>
        twi_txBufferLength = 1;
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	80 93 a7 03 	sts	0x03A7, r24
        twi_txBuffer[0] = 0x00;
    3c72:	10 92 aa 03 	sts	0x03AA, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3c76:	80 91 a6 03 	lds	r24, 0x03A6
    3c7a:	e8 2f       	mov	r30, r24
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	e6 55       	subi	r30, 0x56	; 86
    3c80:	fc 4f       	sbci	r31, 0xFC	; 252
    3c82:	90 81       	ld	r25, Z
    3c84:	90 93 bb 00 	sts	0x00BB, r25
    3c88:	8f 5f       	subi	r24, 0xFF	; 255
    3c8a:	80 93 a6 03 	sts	0x03A6, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3c8e:	90 91 a6 03 	lds	r25, 0x03A6
    3c92:	80 91 a7 03 	lds	r24, 0x03A7
    3c96:	98 17       	cp	r25, r24
    3c98:	c8 f4       	brcc	.+50     	; 0x3ccc <__vector_24+0xcc>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3c9a:	85 ec       	ldi	r24, 0xC5	; 197
    3c9c:	80 93 bc 00 	sts	0x00BC, r24
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    3ca0:	ff 91       	pop	r31
    3ca2:	ef 91       	pop	r30
    3ca4:	bf 91       	pop	r27
    3ca6:	af 91       	pop	r26
    3ca8:	9f 91       	pop	r25
    3caa:	8f 91       	pop	r24
    3cac:	7f 91       	pop	r23
    3cae:	6f 91       	pop	r22
    3cb0:	5f 91       	pop	r21
    3cb2:	4f 91       	pop	r20
    3cb4:	3f 91       	pop	r19
    3cb6:	2f 91       	pop	r18
    3cb8:	0f 90       	pop	r0
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	0f 90       	pop	r0
    3cbe:	1f 90       	pop	r1
    3cc0:	18 95       	reti
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3cc2:	80 91 83 03 	lds	r24, 0x0383
    3cc6:	80 32       	cpi	r24, 0x20	; 32
    3cc8:	08 f4       	brcc	.+2      	; 0x3ccc <__vector_24+0xcc>
    3cca:	9c c0       	rjmp	.+312    	; 0x3e04 <__vector_24+0x204>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3ccc:	85 e8       	ldi	r24, 0x85	; 133
    3cce:	80 93 bc 00 	sts	0x00BC, r24
    3cd2:	e6 cf       	rjmp	.-52     	; 0x3ca0 <__vector_24+0xa0>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3cd4:	80 91 5f 03 	lds	r24, 0x035F
    3cd8:	90 91 bb 00 	lds	r25, 0x00BB
    3cdc:	e8 2f       	mov	r30, r24
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	ef 59       	subi	r30, 0x9F	; 159
    3ce2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ce4:	90 83       	st	Z, r25
    3ce6:	8f 5f       	subi	r24, 0xFF	; 255
    3ce8:	80 93 5f 03 	sts	0x035F, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3cec:	90 91 5f 03 	lds	r25, 0x035F
    3cf0:	80 91 60 03 	lds	r24, 0x0360
    3cf4:	98 17       	cp	r25, r24
    3cf6:	50 f7       	brcc	.-44     	; 0x3ccc <__vector_24+0xcc>
    3cf8:	d0 cf       	rjmp	.-96     	; 0x3c9a <__vector_24+0x9a>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3cfa:	80 91 5f 03 	lds	r24, 0x035F
    3cfe:	90 91 bb 00 	lds	r25, 0x00BB
    3d02:	e8 2f       	mov	r30, r24
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	ef 59       	subi	r30, 0x9F	; 159
    3d08:	fc 4f       	sbci	r31, 0xFC	; 252
    3d0a:	90 83       	st	Z, r25
    3d0c:	8f 5f       	subi	r24, 0xFF	; 255
    3d0e:	80 93 5f 03 	sts	0x035F, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3d12:	85 ed       	ldi	r24, 0xD5	; 213
    3d14:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d18:	80 91 bc 00 	lds	r24, 0x00BC
    3d1c:	84 fd       	sbrc	r24, 4
    3d1e:	fc cf       	rjmp	.-8      	; 0x3d18 <__vector_24+0x118>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3d20:	10 92 82 03 	sts	0x0382, r1
    3d24:	bd cf       	rjmp	.-134    	; 0x3ca0 <__vector_24+0xa0>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d26:	85 ec       	ldi	r24, 0xC5	; 197
    3d28:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3d2c:	10 92 82 03 	sts	0x0382, r1
      break;
    3d30:	b7 cf       	rjmp	.-146    	; 0x3ca0 <__vector_24+0xa0>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3d32:	83 e0       	ldi	r24, 0x03	; 3
    3d34:	80 93 82 03 	sts	0x0382, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3d38:	10 92 83 03 	sts	0x0383, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d3c:	85 ec       	ldi	r24, 0xC5	; 197
    3d3e:	80 93 bc 00 	sts	0x00BC, r24
    3d42:	ae cf       	rjmp	.-164    	; 0x3ca0 <__vector_24+0xa0>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3d44:	10 92 81 03 	sts	0x0381, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3d48:	85 ed       	ldi	r24, 0xD5	; 213
    3d4a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d4e:	80 91 bc 00 	lds	r24, 0x00BC
    3d52:	84 fd       	sbrc	r24, 4
    3d54:	fc cf       	rjmp	.-8      	; 0x3d4e <__vector_24+0x14e>
    3d56:	e4 cf       	rjmp	.-56     	; 0x3d20 <__vector_24+0x120>
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3d58:	80 91 5e 03 	lds	r24, 0x035E
    3d5c:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3d60:	85 ec       	ldi	r24, 0xC5	; 197
    3d62:	80 93 bc 00 	sts	0x00BC, r24
    3d66:	9c cf       	rjmp	.-200    	; 0x3ca0 <__vector_24+0xa0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3d68:	90 91 5f 03 	lds	r25, 0x035F
    3d6c:	80 91 60 03 	lds	r24, 0x0360
    3d70:	98 17       	cp	r25, r24
    3d72:	08 f4       	brcc	.+2      	; 0x3d76 <__vector_24+0x176>
    3d74:	5e c0       	rjmp	.+188    	; 0x3e32 <__vector_24+0x232>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3d76:	85 ed       	ldi	r24, 0xD5	; 213
    3d78:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d7c:	80 91 bc 00 	lds	r24, 0x00BC
    3d80:	84 fd       	sbrc	r24, 4
    3d82:	fc cf       	rjmp	.-8      	; 0x3d7c <__vector_24+0x17c>
    3d84:	cd cf       	rjmp	.-102    	; 0x3d20 <__vector_24+0x120>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    3d86:	80 e2       	ldi	r24, 0x20	; 32
    3d88:	80 93 81 03 	sts	0x0381, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3d8c:	85 ed       	ldi	r24, 0xD5	; 213
    3d8e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3d92:	80 91 bc 00 	lds	r24, 0x00BC
    3d96:	84 fd       	sbrc	r24, 4
    3d98:	fc cf       	rjmp	.-8      	; 0x3d92 <__vector_24+0x192>
    3d9a:	c2 cf       	rjmp	.-124    	; 0x3d20 <__vector_24+0x120>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3d9c:	80 91 83 03 	lds	r24, 0x0383
    3da0:	80 32       	cpi	r24, 0x20	; 32
    3da2:	08 f4       	brcc	.+2      	; 0x3da6 <__vector_24+0x1a6>
    3da4:	3f c0       	rjmp	.+126    	; 0x3e24 <__vector_24+0x224>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3da6:	85 ed       	ldi	r24, 0xD5	; 213
    3da8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3dac:	80 91 bc 00 	lds	r24, 0x00BC
    3db0:	84 fd       	sbrc	r24, 4
    3db2:	fc cf       	rjmp	.-8      	; 0x3dac <__vector_24+0x1ac>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3db4:	10 92 82 03 	sts	0x0382, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3db8:	60 91 83 03 	lds	r22, 0x0383
    3dbc:	e0 91 a4 03 	lds	r30, 0x03A4
    3dc0:	f0 91 a5 03 	lds	r31, 0x03A5
    3dc4:	84 e8       	ldi	r24, 0x84	; 132
    3dc6:	93 e0       	ldi	r25, 0x03	; 3
    3dc8:	70 e0       	ldi	r23, 0x00	; 0
    3dca:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3dcc:	10 92 83 03 	sts	0x0383, r1
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3dd0:	85 ec       	ldi	r24, 0xC5	; 197
    3dd2:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3dd6:	10 92 82 03 	sts	0x0382, r1
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      break;
    3dda:	62 cf       	rjmp	.-316    	; 0x3ca0 <__vector_24+0xa0>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3ddc:	80 e3       	ldi	r24, 0x30	; 48
    3dde:	80 93 81 03 	sts	0x0381, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3de2:	85 ed       	ldi	r24, 0xD5	; 213
    3de4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3de8:	80 91 bc 00 	lds	r24, 0x00BC
    3dec:	84 fd       	sbrc	r24, 4
    3dee:	fc cf       	rjmp	.-8      	; 0x3de8 <__vector_24+0x1e8>
    3df0:	97 cf       	rjmp	.-210    	; 0x3d20 <__vector_24+0x120>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3df2:	88 e3       	ldi	r24, 0x38	; 56
    3df4:	80 93 81 03 	sts	0x0381, r24
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3df8:	85 ec       	ldi	r24, 0xC5	; 197
    3dfa:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    3dfe:	10 92 82 03 	sts	0x0382, r1
    3e02:	4e cf       	rjmp	.-356    	; 0x3ca0 <__vector_24+0xa0>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3e04:	80 91 83 03 	lds	r24, 0x0383
    3e08:	90 91 bb 00 	lds	r25, 0x00BB
    3e0c:	e8 2f       	mov	r30, r24
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	ec 57       	subi	r30, 0x7C	; 124
    3e12:	fc 4f       	sbci	r31, 0xFC	; 252
    3e14:	90 83       	st	Z, r25
    3e16:	8f 5f       	subi	r24, 0xFF	; 255
    3e18:	80 93 83 03 	sts	0x0383, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e1c:	85 ec       	ldi	r24, 0xC5	; 197
    3e1e:	80 93 bc 00 	sts	0x00BC, r24
    3e22:	3e cf       	rjmp	.-388    	; 0x3ca0 <__vector_24+0xa0>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3e24:	e0 91 83 03 	lds	r30, 0x0383
    3e28:	f0 e0       	ldi	r31, 0x00	; 0
    3e2a:	ec 57       	subi	r30, 0x7C	; 124
    3e2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3e2e:	10 82       	st	Z, r1
    3e30:	ba cf       	rjmp	.-140    	; 0x3da6 <__vector_24+0x1a6>
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3e32:	80 91 5f 03 	lds	r24, 0x035F
    3e36:	e8 2f       	mov	r30, r24
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	ef 59       	subi	r30, 0x9F	; 159
    3e3c:	fc 4f       	sbci	r31, 0xFC	; 252
    3e3e:	90 81       	ld	r25, Z
    3e40:	90 93 bb 00 	sts	0x00BB, r25
    3e44:	8f 5f       	subi	r24, 0xFF	; 255
    3e46:	80 93 5f 03 	sts	0x035F, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3e4a:	85 ec       	ldi	r24, 0xC5	; 197
    3e4c:	80 93 bc 00 	sts	0x00BC, r24
    3e50:	27 cf       	rjmp	.-434    	; 0x3ca0 <__vector_24+0xa0>

00003e52 <__fixunssfsi>:
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	7b 01       	movw	r14, r22
    3e5c:	8c 01       	movw	r16, r24
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	5f e4       	ldi	r21, 0x4F	; 79
    3e66:	0e 94 a9 22 	call	0x4552	; 0x4552 <__gesf2>
    3e6a:	88 23       	and	r24, r24
    3e6c:	8c f0       	brlt	.+34     	; 0x3e90 <__fixunssfsi+0x3e>
    3e6e:	c8 01       	movw	r24, r16
    3e70:	b7 01       	movw	r22, r14
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	5f e4       	ldi	r21, 0x4F	; 79
    3e7a:	0e 94 a5 20 	call	0x414a	; 0x414a <__subsf3>
    3e7e:	0e 94 66 23 	call	0x46cc	; 0x46cc <__fixsfsi>
    3e82:	9b 01       	movw	r18, r22
    3e84:	ac 01       	movw	r20, r24
    3e86:	20 50       	subi	r18, 0x00	; 0
    3e88:	30 40       	sbci	r19, 0x00	; 0
    3e8a:	40 40       	sbci	r20, 0x00	; 0
    3e8c:	50 48       	sbci	r21, 0x80	; 128
    3e8e:	06 c0       	rjmp	.+12     	; 0x3e9c <__fixunssfsi+0x4a>
    3e90:	c8 01       	movw	r24, r16
    3e92:	b7 01       	movw	r22, r14
    3e94:	0e 94 66 23 	call	0x46cc	; 0x46cc <__fixsfsi>
    3e98:	9b 01       	movw	r18, r22
    3e9a:	ac 01       	movw	r20, r24
    3e9c:	b9 01       	movw	r22, r18
    3e9e:	ca 01       	movw	r24, r20
    3ea0:	1f 91       	pop	r17
    3ea2:	0f 91       	pop	r16
    3ea4:	ff 90       	pop	r15
    3ea6:	ef 90       	pop	r14
    3ea8:	08 95       	ret

00003eaa <_fpadd_parts>:
    3eaa:	a0 e0       	ldi	r26, 0x00	; 0
    3eac:	b0 e0       	ldi	r27, 0x00	; 0
    3eae:	eb e5       	ldi	r30, 0x5B	; 91
    3eb0:	ff e1       	ldi	r31, 0x1F	; 31
    3eb2:	0c 94 84 26 	jmp	0x4d08	; 0x4d08 <__prologue_saves__+0x4>
    3eb6:	fc 01       	movw	r30, r24
    3eb8:	2b 01       	movw	r4, r22
    3eba:	ea 01       	movw	r28, r20
    3ebc:	80 81       	ld	r24, Z
    3ebe:	82 30       	cpi	r24, 0x02	; 2
    3ec0:	08 f4       	brcc	.+2      	; 0x3ec4 <_fpadd_parts+0x1a>
    3ec2:	3d c1       	rjmp	.+634    	; 0x413e <_fpadd_parts+0x294>
    3ec4:	db 01       	movw	r26, r22
    3ec6:	9c 91       	ld	r25, X
    3ec8:	92 30       	cpi	r25, 0x02	; 2
    3eca:	08 f4       	brcc	.+2      	; 0x3ece <_fpadd_parts+0x24>
    3ecc:	37 c1       	rjmp	.+622    	; 0x413c <_fpadd_parts+0x292>
    3ece:	84 30       	cpi	r24, 0x04	; 4
    3ed0:	69 f4       	brne	.+26     	; 0x3eec <_fpadd_parts+0x42>
    3ed2:	94 30       	cpi	r25, 0x04	; 4
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <_fpadd_parts+0x2e>
    3ed6:	33 c1       	rjmp	.+614    	; 0x413e <_fpadd_parts+0x294>
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	11 96       	adiw	r26, 0x01	; 1
    3edc:	8c 91       	ld	r24, X
    3ede:	11 97       	sbiw	r26, 0x01	; 1
    3ee0:	98 17       	cp	r25, r24
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <_fpadd_parts+0x3c>
    3ee4:	2c c1       	rjmp	.+600    	; 0x413e <_fpadd_parts+0x294>
    3ee6:	e4 e4       	ldi	r30, 0x44	; 68
    3ee8:	f1 e0       	ldi	r31, 0x01	; 1
    3eea:	29 c1       	rjmp	.+594    	; 0x413e <_fpadd_parts+0x294>
    3eec:	94 30       	cpi	r25, 0x04	; 4
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <_fpadd_parts+0x48>
    3ef0:	25 c1       	rjmp	.+586    	; 0x413c <_fpadd_parts+0x292>
    3ef2:	92 30       	cpi	r25, 0x02	; 2
    3ef4:	a9 f4       	brne	.+42     	; 0x3f20 <_fpadd_parts+0x76>
    3ef6:	82 30       	cpi	r24, 0x02	; 2
    3ef8:	09 f0       	breq	.+2      	; 0x3efc <_fpadd_parts+0x52>
    3efa:	21 c1       	rjmp	.+578    	; 0x413e <_fpadd_parts+0x294>
    3efc:	9f 01       	movw	r18, r30
    3efe:	88 e0       	ldi	r24, 0x08	; 8
    3f00:	d9 01       	movw	r26, r18
    3f02:	0d 90       	ld	r0, X+
    3f04:	9d 01       	movw	r18, r26
    3f06:	da 01       	movw	r26, r20
    3f08:	0d 92       	st	X+, r0
    3f0a:	ad 01       	movw	r20, r26
    3f0c:	81 50       	subi	r24, 0x01	; 1
    3f0e:	c1 f7       	brne	.-16     	; 0x3f00 <_fpadd_parts+0x56>
    3f10:	d2 01       	movw	r26, r4
    3f12:	11 96       	adiw	r26, 0x01	; 1
    3f14:	8c 91       	ld	r24, X
    3f16:	11 97       	sbiw	r26, 0x01	; 1
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	89 23       	and	r24, r25
    3f1c:	89 83       	std	Y+1, r24	; 0x01
    3f1e:	0c c1       	rjmp	.+536    	; 0x4138 <_fpadd_parts+0x28e>
    3f20:	82 30       	cpi	r24, 0x02	; 2
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <_fpadd_parts+0x7c>
    3f24:	0b c1       	rjmp	.+534    	; 0x413c <_fpadd_parts+0x292>
    3f26:	82 81       	ldd	r24, Z+2	; 0x02
    3f28:	93 81       	ldd	r25, Z+3	; 0x03
    3f2a:	db 01       	movw	r26, r22
    3f2c:	12 96       	adiw	r26, 0x02	; 2
    3f2e:	4d 91       	ld	r20, X+
    3f30:	5c 91       	ld	r21, X
    3f32:	13 97       	sbiw	r26, 0x03	; 3
    3f34:	e4 80       	ldd	r14, Z+4	; 0x04
    3f36:	f5 80       	ldd	r15, Z+5	; 0x05
    3f38:	06 81       	ldd	r16, Z+6	; 0x06
    3f3a:	17 81       	ldd	r17, Z+7	; 0x07
    3f3c:	14 96       	adiw	r26, 0x04	; 4
    3f3e:	ad 90       	ld	r10, X+
    3f40:	bd 90       	ld	r11, X+
    3f42:	cd 90       	ld	r12, X+
    3f44:	dc 90       	ld	r13, X
    3f46:	17 97       	sbiw	r26, 0x07	; 7
    3f48:	9c 01       	movw	r18, r24
    3f4a:	24 1b       	sub	r18, r20
    3f4c:	35 0b       	sbc	r19, r21
    3f4e:	b9 01       	movw	r22, r18
    3f50:	37 ff       	sbrs	r19, 7
    3f52:	04 c0       	rjmp	.+8      	; 0x3f5c <_fpadd_parts+0xb2>
    3f54:	66 27       	eor	r22, r22
    3f56:	77 27       	eor	r23, r23
    3f58:	62 1b       	sub	r22, r18
    3f5a:	73 0b       	sbc	r23, r19
    3f5c:	60 32       	cpi	r22, 0x20	; 32
    3f5e:	71 05       	cpc	r23, r1
    3f60:	0c f0       	brlt	.+2      	; 0x3f64 <_fpadd_parts+0xba>
    3f62:	62 c0       	rjmp	.+196    	; 0x4028 <_fpadd_parts+0x17e>
    3f64:	12 16       	cp	r1, r18
    3f66:	13 06       	cpc	r1, r19
    3f68:	6c f5       	brge	.+90     	; 0x3fc4 <_fpadd_parts+0x11a>
    3f6a:	35 01       	movw	r6, r10
    3f6c:	46 01       	movw	r8, r12
    3f6e:	06 2e       	mov	r0, r22
    3f70:	04 c0       	rjmp	.+8      	; 0x3f7a <_fpadd_parts+0xd0>
    3f72:	96 94       	lsr	r9
    3f74:	87 94       	ror	r8
    3f76:	77 94       	ror	r7
    3f78:	67 94       	ror	r6
    3f7a:	0a 94       	dec	r0
    3f7c:	d2 f7       	brpl	.-12     	; 0x3f72 <_fpadd_parts+0xc8>
    3f7e:	21 e0       	ldi	r18, 0x01	; 1
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	50 e0       	ldi	r21, 0x00	; 0
    3f86:	04 c0       	rjmp	.+8      	; 0x3f90 <_fpadd_parts+0xe6>
    3f88:	22 0f       	add	r18, r18
    3f8a:	33 1f       	adc	r19, r19
    3f8c:	44 1f       	adc	r20, r20
    3f8e:	55 1f       	adc	r21, r21
    3f90:	6a 95       	dec	r22
    3f92:	d2 f7       	brpl	.-12     	; 0x3f88 <_fpadd_parts+0xde>
    3f94:	21 50       	subi	r18, 0x01	; 1
    3f96:	30 40       	sbci	r19, 0x00	; 0
    3f98:	40 40       	sbci	r20, 0x00	; 0
    3f9a:	50 40       	sbci	r21, 0x00	; 0
    3f9c:	2a 21       	and	r18, r10
    3f9e:	3b 21       	and	r19, r11
    3fa0:	4c 21       	and	r20, r12
    3fa2:	5d 21       	and	r21, r13
    3fa4:	21 15       	cp	r18, r1
    3fa6:	31 05       	cpc	r19, r1
    3fa8:	41 05       	cpc	r20, r1
    3faa:	51 05       	cpc	r21, r1
    3fac:	21 f0       	breq	.+8      	; 0x3fb6 <_fpadd_parts+0x10c>
    3fae:	21 e0       	ldi	r18, 0x01	; 1
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	50 e0       	ldi	r21, 0x00	; 0
    3fb6:	59 01       	movw	r10, r18
    3fb8:	6a 01       	movw	r12, r20
    3fba:	a6 28       	or	r10, r6
    3fbc:	b7 28       	or	r11, r7
    3fbe:	c8 28       	or	r12, r8
    3fc0:	d9 28       	or	r13, r9
    3fc2:	3d c0       	rjmp	.+122    	; 0x403e <_fpadd_parts+0x194>
    3fc4:	21 15       	cp	r18, r1
    3fc6:	31 05       	cpc	r19, r1
    3fc8:	d1 f1       	breq	.+116    	; 0x403e <_fpadd_parts+0x194>
    3fca:	86 0f       	add	r24, r22
    3fcc:	97 1f       	adc	r25, r23
    3fce:	37 01       	movw	r6, r14
    3fd0:	48 01       	movw	r8, r16
    3fd2:	06 2e       	mov	r0, r22
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <_fpadd_parts+0x134>
    3fd6:	96 94       	lsr	r9
    3fd8:	87 94       	ror	r8
    3fda:	77 94       	ror	r7
    3fdc:	67 94       	ror	r6
    3fde:	0a 94       	dec	r0
    3fe0:	d2 f7       	brpl	.-12     	; 0x3fd6 <_fpadd_parts+0x12c>
    3fe2:	21 e0       	ldi	r18, 0x01	; 1
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	40 e0       	ldi	r20, 0x00	; 0
    3fe8:	50 e0       	ldi	r21, 0x00	; 0
    3fea:	04 c0       	rjmp	.+8      	; 0x3ff4 <_fpadd_parts+0x14a>
    3fec:	22 0f       	add	r18, r18
    3fee:	33 1f       	adc	r19, r19
    3ff0:	44 1f       	adc	r20, r20
    3ff2:	55 1f       	adc	r21, r21
    3ff4:	6a 95       	dec	r22
    3ff6:	d2 f7       	brpl	.-12     	; 0x3fec <_fpadd_parts+0x142>
    3ff8:	21 50       	subi	r18, 0x01	; 1
    3ffa:	30 40       	sbci	r19, 0x00	; 0
    3ffc:	40 40       	sbci	r20, 0x00	; 0
    3ffe:	50 40       	sbci	r21, 0x00	; 0
    4000:	2e 21       	and	r18, r14
    4002:	3f 21       	and	r19, r15
    4004:	40 23       	and	r20, r16
    4006:	51 23       	and	r21, r17
    4008:	21 15       	cp	r18, r1
    400a:	31 05       	cpc	r19, r1
    400c:	41 05       	cpc	r20, r1
    400e:	51 05       	cpc	r21, r1
    4010:	21 f0       	breq	.+8      	; 0x401a <_fpadd_parts+0x170>
    4012:	21 e0       	ldi	r18, 0x01	; 1
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e0       	ldi	r20, 0x00	; 0
    4018:	50 e0       	ldi	r21, 0x00	; 0
    401a:	79 01       	movw	r14, r18
    401c:	8a 01       	movw	r16, r20
    401e:	e6 28       	or	r14, r6
    4020:	f7 28       	or	r15, r7
    4022:	08 29       	or	r16, r8
    4024:	19 29       	or	r17, r9
    4026:	0b c0       	rjmp	.+22     	; 0x403e <_fpadd_parts+0x194>
    4028:	48 17       	cp	r20, r24
    402a:	59 07       	cpc	r21, r25
    402c:	2c f0       	brlt	.+10     	; 0x4038 <_fpadd_parts+0x18e>
    402e:	ca 01       	movw	r24, r20
    4030:	ee 24       	eor	r14, r14
    4032:	ff 24       	eor	r15, r15
    4034:	87 01       	movw	r16, r14
    4036:	03 c0       	rjmp	.+6      	; 0x403e <_fpadd_parts+0x194>
    4038:	aa 24       	eor	r10, r10
    403a:	bb 24       	eor	r11, r11
    403c:	65 01       	movw	r12, r10
    403e:	21 81       	ldd	r18, Z+1	; 0x01
    4040:	f2 01       	movw	r30, r4
    4042:	31 81       	ldd	r19, Z+1	; 0x01
    4044:	23 17       	cp	r18, r19
    4046:	09 f4       	brne	.+2      	; 0x404a <_fpadd_parts+0x1a0>
    4048:	4a c0       	rjmp	.+148    	; 0x40de <_fpadd_parts+0x234>
    404a:	22 23       	and	r18, r18
    404c:	49 f0       	breq	.+18     	; 0x4060 <_fpadd_parts+0x1b6>
    404e:	a6 01       	movw	r20, r12
    4050:	95 01       	movw	r18, r10
    4052:	2e 19       	sub	r18, r14
    4054:	3f 09       	sbc	r19, r15
    4056:	40 0b       	sbc	r20, r16
    4058:	51 0b       	sbc	r21, r17
    405a:	79 01       	movw	r14, r18
    405c:	8a 01       	movw	r16, r20
    405e:	04 c0       	rjmp	.+8      	; 0x4068 <_fpadd_parts+0x1be>
    4060:	ea 18       	sub	r14, r10
    4062:	fb 08       	sbc	r15, r11
    4064:	0c 09       	sbc	r16, r12
    4066:	1d 09       	sbc	r17, r13
    4068:	17 fd       	sbrc	r17, 7
    406a:	0c c0       	rjmp	.+24     	; 0x4084 <_fpadd_parts+0x1da>
    406c:	19 82       	std	Y+1, r1	; 0x01
    406e:	9b 83       	std	Y+3, r25	; 0x03
    4070:	8a 83       	std	Y+2, r24	; 0x02
    4072:	ec 82       	std	Y+4, r14	; 0x04
    4074:	fd 82       	std	Y+5, r15	; 0x05
    4076:	0e 83       	std	Y+6, r16	; 0x06
    4078:	1f 83       	std	Y+7, r17	; 0x07
    407a:	8c 81       	ldd	r24, Y+4	; 0x04
    407c:	9d 81       	ldd	r25, Y+5	; 0x05
    407e:	ae 81       	ldd	r26, Y+6	; 0x06
    4080:	bf 81       	ldd	r27, Y+7	; 0x07
    4082:	1a c0       	rjmp	.+52     	; 0x40b8 <_fpadd_parts+0x20e>
    4084:	21 e0       	ldi	r18, 0x01	; 1
    4086:	29 83       	std	Y+1, r18	; 0x01
    4088:	9b 83       	std	Y+3, r25	; 0x03
    408a:	8a 83       	std	Y+2, r24	; 0x02
    408c:	88 27       	eor	r24, r24
    408e:	99 27       	eor	r25, r25
    4090:	dc 01       	movw	r26, r24
    4092:	8e 19       	sub	r24, r14
    4094:	9f 09       	sbc	r25, r15
    4096:	a0 0b       	sbc	r26, r16
    4098:	b1 0b       	sbc	r27, r17
    409a:	8c 83       	std	Y+4, r24	; 0x04
    409c:	9d 83       	std	Y+5, r25	; 0x05
    409e:	ae 83       	std	Y+6, r26	; 0x06
    40a0:	bf 83       	std	Y+7, r27	; 0x07
    40a2:	eb cf       	rjmp	.-42     	; 0x407a <_fpadd_parts+0x1d0>
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	aa 1f       	adc	r26, r26
    40aa:	bb 1f       	adc	r27, r27
    40ac:	2a 81       	ldd	r18, Y+2	; 0x02
    40ae:	3b 81       	ldd	r19, Y+3	; 0x03
    40b0:	21 50       	subi	r18, 0x01	; 1
    40b2:	30 40       	sbci	r19, 0x00	; 0
    40b4:	3b 83       	std	Y+3, r19	; 0x03
    40b6:	2a 83       	std	Y+2, r18	; 0x02
    40b8:	9c 01       	movw	r18, r24
    40ba:	ad 01       	movw	r20, r26
    40bc:	21 50       	subi	r18, 0x01	; 1
    40be:	30 40       	sbci	r19, 0x00	; 0
    40c0:	40 40       	sbci	r20, 0x00	; 0
    40c2:	50 40       	sbci	r21, 0x00	; 0
    40c4:	2f 3f       	cpi	r18, 0xFF	; 255
    40c6:	6f ef       	ldi	r22, 0xFF	; 255
    40c8:	36 07       	cpc	r19, r22
    40ca:	6f ef       	ldi	r22, 0xFF	; 255
    40cc:	46 07       	cpc	r20, r22
    40ce:	6f e3       	ldi	r22, 0x3F	; 63
    40d0:	56 07       	cpc	r21, r22
    40d2:	40 f3       	brcs	.-48     	; 0x40a4 <_fpadd_parts+0x1fa>
    40d4:	8c 83       	std	Y+4, r24	; 0x04
    40d6:	9d 83       	std	Y+5, r25	; 0x05
    40d8:	ae 83       	std	Y+6, r26	; 0x06
    40da:	bf 83       	std	Y+7, r27	; 0x07
    40dc:	0b c0       	rjmp	.+22     	; 0x40f4 <_fpadd_parts+0x24a>
    40de:	29 83       	std	Y+1, r18	; 0x01
    40e0:	9b 83       	std	Y+3, r25	; 0x03
    40e2:	8a 83       	std	Y+2, r24	; 0x02
    40e4:	ea 0c       	add	r14, r10
    40e6:	fb 1c       	adc	r15, r11
    40e8:	0c 1d       	adc	r16, r12
    40ea:	1d 1d       	adc	r17, r13
    40ec:	ec 82       	std	Y+4, r14	; 0x04
    40ee:	fd 82       	std	Y+5, r15	; 0x05
    40f0:	0e 83       	std	Y+6, r16	; 0x06
    40f2:	1f 83       	std	Y+7, r17	; 0x07
    40f4:	83 e0       	ldi	r24, 0x03	; 3
    40f6:	88 83       	st	Y, r24
    40f8:	2c 81       	ldd	r18, Y+4	; 0x04
    40fa:	3d 81       	ldd	r19, Y+5	; 0x05
    40fc:	4e 81       	ldd	r20, Y+6	; 0x06
    40fe:	5f 81       	ldd	r21, Y+7	; 0x07
    4100:	57 ff       	sbrs	r21, 7
    4102:	1a c0       	rjmp	.+52     	; 0x4138 <_fpadd_parts+0x28e>
    4104:	c9 01       	movw	r24, r18
    4106:	aa 27       	eor	r26, r26
    4108:	97 fd       	sbrc	r25, 7
    410a:	a0 95       	com	r26
    410c:	ba 2f       	mov	r27, r26
    410e:	81 70       	andi	r24, 0x01	; 1
    4110:	90 70       	andi	r25, 0x00	; 0
    4112:	a0 70       	andi	r26, 0x00	; 0
    4114:	b0 70       	andi	r27, 0x00	; 0
    4116:	56 95       	lsr	r21
    4118:	47 95       	ror	r20
    411a:	37 95       	ror	r19
    411c:	27 95       	ror	r18
    411e:	82 2b       	or	r24, r18
    4120:	93 2b       	or	r25, r19
    4122:	a4 2b       	or	r26, r20
    4124:	b5 2b       	or	r27, r21
    4126:	8c 83       	std	Y+4, r24	; 0x04
    4128:	9d 83       	std	Y+5, r25	; 0x05
    412a:	ae 83       	std	Y+6, r26	; 0x06
    412c:	bf 83       	std	Y+7, r27	; 0x07
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	9b 81       	ldd	r25, Y+3	; 0x03
    4132:	01 96       	adiw	r24, 0x01	; 1
    4134:	9b 83       	std	Y+3, r25	; 0x03
    4136:	8a 83       	std	Y+2, r24	; 0x02
    4138:	fe 01       	movw	r30, r28
    413a:	01 c0       	rjmp	.+2      	; 0x413e <_fpadd_parts+0x294>
    413c:	f2 01       	movw	r30, r4
    413e:	cf 01       	movw	r24, r30
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	e0 e1       	ldi	r30, 0x10	; 16
    4146:	0c 94 a0 26 	jmp	0x4d40	; 0x4d40 <__epilogue_restores__+0x4>

0000414a <__subsf3>:
    414a:	a0 e2       	ldi	r26, 0x20	; 32
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	eb ea       	ldi	r30, 0xAB	; 171
    4150:	f0 e2       	ldi	r31, 0x20	; 32
    4152:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__prologue_saves__+0x18>
    4156:	69 83       	std	Y+1, r22	; 0x01
    4158:	7a 83       	std	Y+2, r23	; 0x02
    415a:	8b 83       	std	Y+3, r24	; 0x03
    415c:	9c 83       	std	Y+4, r25	; 0x04
    415e:	2d 83       	std	Y+5, r18	; 0x05
    4160:	3e 83       	std	Y+6, r19	; 0x06
    4162:	4f 83       	std	Y+7, r20	; 0x07
    4164:	58 87       	std	Y+8, r21	; 0x08
    4166:	e9 e0       	ldi	r30, 0x09	; 9
    4168:	ee 2e       	mov	r14, r30
    416a:	f1 2c       	mov	r15, r1
    416c:	ec 0e       	add	r14, r28
    416e:	fd 1e       	adc	r15, r29
    4170:	ce 01       	movw	r24, r28
    4172:	01 96       	adiw	r24, 0x01	; 1
    4174:	b7 01       	movw	r22, r14
    4176:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    417a:	8e 01       	movw	r16, r28
    417c:	0f 5e       	subi	r16, 0xEF	; 239
    417e:	1f 4f       	sbci	r17, 0xFF	; 255
    4180:	ce 01       	movw	r24, r28
    4182:	05 96       	adiw	r24, 0x05	; 5
    4184:	b8 01       	movw	r22, r16
    4186:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    418a:	8a 89       	ldd	r24, Y+18	; 0x12
    418c:	91 e0       	ldi	r25, 0x01	; 1
    418e:	89 27       	eor	r24, r25
    4190:	8a 8b       	std	Y+18, r24	; 0x12
    4192:	c7 01       	movw	r24, r14
    4194:	b8 01       	movw	r22, r16
    4196:	ae 01       	movw	r20, r28
    4198:	47 5e       	subi	r20, 0xE7	; 231
    419a:	5f 4f       	sbci	r21, 0xFF	; 255
    419c:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_fpadd_parts>
    41a0:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    41a4:	a0 96       	adiw	r28, 0x20	; 32
    41a6:	e6 e0       	ldi	r30, 0x06	; 6
    41a8:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__epilogue_restores__+0x18>

000041ac <__addsf3>:
    41ac:	a0 e2       	ldi	r26, 0x20	; 32
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	ec ed       	ldi	r30, 0xDC	; 220
    41b2:	f0 e2       	ldi	r31, 0x20	; 32
    41b4:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__prologue_saves__+0x18>
    41b8:	69 83       	std	Y+1, r22	; 0x01
    41ba:	7a 83       	std	Y+2, r23	; 0x02
    41bc:	8b 83       	std	Y+3, r24	; 0x03
    41be:	9c 83       	std	Y+4, r25	; 0x04
    41c0:	2d 83       	std	Y+5, r18	; 0x05
    41c2:	3e 83       	std	Y+6, r19	; 0x06
    41c4:	4f 83       	std	Y+7, r20	; 0x07
    41c6:	58 87       	std	Y+8, r21	; 0x08
    41c8:	f9 e0       	ldi	r31, 0x09	; 9
    41ca:	ef 2e       	mov	r14, r31
    41cc:	f1 2c       	mov	r15, r1
    41ce:	ec 0e       	add	r14, r28
    41d0:	fd 1e       	adc	r15, r29
    41d2:	ce 01       	movw	r24, r28
    41d4:	01 96       	adiw	r24, 0x01	; 1
    41d6:	b7 01       	movw	r22, r14
    41d8:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    41dc:	8e 01       	movw	r16, r28
    41de:	0f 5e       	subi	r16, 0xEF	; 239
    41e0:	1f 4f       	sbci	r17, 0xFF	; 255
    41e2:	ce 01       	movw	r24, r28
    41e4:	05 96       	adiw	r24, 0x05	; 5
    41e6:	b8 01       	movw	r22, r16
    41e8:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    41ec:	c7 01       	movw	r24, r14
    41ee:	b8 01       	movw	r22, r16
    41f0:	ae 01       	movw	r20, r28
    41f2:	47 5e       	subi	r20, 0xE7	; 231
    41f4:	5f 4f       	sbci	r21, 0xFF	; 255
    41f6:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_fpadd_parts>
    41fa:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    41fe:	a0 96       	adiw	r28, 0x20	; 32
    4200:	e6 e0       	ldi	r30, 0x06	; 6
    4202:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__epilogue_restores__+0x18>

00004206 <__mulsf3>:
    4206:	a0 e2       	ldi	r26, 0x20	; 32
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	e9 e0       	ldi	r30, 0x09	; 9
    420c:	f1 e2       	ldi	r31, 0x21	; 33
    420e:	0c 94 82 26 	jmp	0x4d04	; 0x4d04 <__prologue_saves__>
    4212:	69 83       	std	Y+1, r22	; 0x01
    4214:	7a 83       	std	Y+2, r23	; 0x02
    4216:	8b 83       	std	Y+3, r24	; 0x03
    4218:	9c 83       	std	Y+4, r25	; 0x04
    421a:	2d 83       	std	Y+5, r18	; 0x05
    421c:	3e 83       	std	Y+6, r19	; 0x06
    421e:	4f 83       	std	Y+7, r20	; 0x07
    4220:	58 87       	std	Y+8, r21	; 0x08
    4222:	ce 01       	movw	r24, r28
    4224:	01 96       	adiw	r24, 0x01	; 1
    4226:	be 01       	movw	r22, r28
    4228:	67 5f       	subi	r22, 0xF7	; 247
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    4230:	ce 01       	movw	r24, r28
    4232:	05 96       	adiw	r24, 0x05	; 5
    4234:	be 01       	movw	r22, r28
    4236:	6f 5e       	subi	r22, 0xEF	; 239
    4238:	7f 4f       	sbci	r23, 0xFF	; 255
    423a:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    423e:	99 85       	ldd	r25, Y+9	; 0x09
    4240:	92 30       	cpi	r25, 0x02	; 2
    4242:	88 f0       	brcs	.+34     	; 0x4266 <__mulsf3+0x60>
    4244:	89 89       	ldd	r24, Y+17	; 0x11
    4246:	82 30       	cpi	r24, 0x02	; 2
    4248:	c8 f0       	brcs	.+50     	; 0x427c <__mulsf3+0x76>
    424a:	94 30       	cpi	r25, 0x04	; 4
    424c:	19 f4       	brne	.+6      	; 0x4254 <__mulsf3+0x4e>
    424e:	82 30       	cpi	r24, 0x02	; 2
    4250:	51 f4       	brne	.+20     	; 0x4266 <__mulsf3+0x60>
    4252:	04 c0       	rjmp	.+8      	; 0x425c <__mulsf3+0x56>
    4254:	84 30       	cpi	r24, 0x04	; 4
    4256:	29 f4       	brne	.+10     	; 0x4262 <__mulsf3+0x5c>
    4258:	92 30       	cpi	r25, 0x02	; 2
    425a:	81 f4       	brne	.+32     	; 0x427c <__mulsf3+0x76>
    425c:	84 e4       	ldi	r24, 0x44	; 68
    425e:	91 e0       	ldi	r25, 0x01	; 1
    4260:	c4 c0       	rjmp	.+392    	; 0x43ea <__mulsf3+0x1e4>
    4262:	92 30       	cpi	r25, 0x02	; 2
    4264:	49 f4       	brne	.+18     	; 0x4278 <__mulsf3+0x72>
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	2a 85       	ldd	r18, Y+10	; 0x0a
    426a:	9a 89       	ldd	r25, Y+18	; 0x12
    426c:	29 13       	cpse	r18, r25
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	8a 87       	std	Y+10, r24	; 0x0a
    4272:	ce 01       	movw	r24, r28
    4274:	09 96       	adiw	r24, 0x09	; 9
    4276:	b9 c0       	rjmp	.+370    	; 0x43ea <__mulsf3+0x1e4>
    4278:	82 30       	cpi	r24, 0x02	; 2
    427a:	49 f4       	brne	.+18     	; 0x428e <__mulsf3+0x88>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4280:	9a 89       	ldd	r25, Y+18	; 0x12
    4282:	29 13       	cpse	r18, r25
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	8a 8b       	std	Y+18, r24	; 0x12
    4288:	ce 01       	movw	r24, r28
    428a:	41 96       	adiw	r24, 0x11	; 17
    428c:	ae c0       	rjmp	.+348    	; 0x43ea <__mulsf3+0x1e4>
    428e:	6d 84       	ldd	r6, Y+13	; 0x0d
    4290:	7e 84       	ldd	r7, Y+14	; 0x0e
    4292:	8f 84       	ldd	r8, Y+15	; 0x0f
    4294:	98 88       	ldd	r9, Y+16	; 0x10
    4296:	ad 88       	ldd	r10, Y+21	; 0x15
    4298:	be 88       	ldd	r11, Y+22	; 0x16
    429a:	cf 88       	ldd	r12, Y+23	; 0x17
    429c:	d8 8c       	ldd	r13, Y+24	; 0x18
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	70 e0       	ldi	r23, 0x00	; 0
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	dc 01       	movw	r26, r24
    42a8:	ee 24       	eor	r14, r14
    42aa:	ff 24       	eor	r15, r15
    42ac:	87 01       	movw	r16, r14
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	a9 01       	movw	r20, r18
    42b4:	f3 01       	movw	r30, r6
    42b6:	e1 70       	andi	r30, 0x01	; 1
    42b8:	f0 70       	andi	r31, 0x00	; 0
    42ba:	30 97       	sbiw	r30, 0x00	; 0
    42bc:	c9 f0       	breq	.+50     	; 0x42f0 <__mulsf3+0xea>
    42be:	2a 0d       	add	r18, r10
    42c0:	3b 1d       	adc	r19, r11
    42c2:	4c 1d       	adc	r20, r12
    42c4:	5d 1d       	adc	r21, r13
    42c6:	8e 0d       	add	r24, r14
    42c8:	9f 1d       	adc	r25, r15
    42ca:	a0 1f       	adc	r26, r16
    42cc:	b1 1f       	adc	r27, r17
    42ce:	22 24       	eor	r2, r2
    42d0:	33 24       	eor	r3, r3
    42d2:	21 01       	movw	r4, r2
    42d4:	2a 15       	cp	r18, r10
    42d6:	3b 05       	cpc	r19, r11
    42d8:	4c 05       	cpc	r20, r12
    42da:	5d 05       	cpc	r21, r13
    42dc:	28 f4       	brcc	.+10     	; 0x42e8 <__mulsf3+0xe2>
    42de:	e1 e0       	ldi	r30, 0x01	; 1
    42e0:	2e 2e       	mov	r2, r30
    42e2:	31 2c       	mov	r3, r1
    42e4:	41 2c       	mov	r4, r1
    42e6:	51 2c       	mov	r5, r1
    42e8:	82 0d       	add	r24, r2
    42ea:	93 1d       	adc	r25, r3
    42ec:	a4 1d       	adc	r26, r4
    42ee:	b5 1d       	adc	r27, r5
    42f0:	ee 0c       	add	r14, r14
    42f2:	ff 1c       	adc	r15, r15
    42f4:	00 1f       	adc	r16, r16
    42f6:	11 1f       	adc	r17, r17
    42f8:	d7 fe       	sbrs	r13, 7
    42fa:	09 c0       	rjmp	.+18     	; 0x430e <__mulsf3+0x108>
    42fc:	e1 e0       	ldi	r30, 0x01	; 1
    42fe:	2e 2e       	mov	r2, r30
    4300:	31 2c       	mov	r3, r1
    4302:	41 2c       	mov	r4, r1
    4304:	51 2c       	mov	r5, r1
    4306:	e2 28       	or	r14, r2
    4308:	f3 28       	or	r15, r3
    430a:	04 29       	or	r16, r4
    430c:	15 29       	or	r17, r5
    430e:	6f 5f       	subi	r22, 0xFF	; 255
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	60 32       	cpi	r22, 0x20	; 32
    4314:	71 05       	cpc	r23, r1
    4316:	49 f0       	breq	.+18     	; 0x432a <__mulsf3+0x124>
    4318:	aa 0c       	add	r10, r10
    431a:	bb 1c       	adc	r11, r11
    431c:	cc 1c       	adc	r12, r12
    431e:	dd 1c       	adc	r13, r13
    4320:	96 94       	lsr	r9
    4322:	87 94       	ror	r8
    4324:	77 94       	ror	r7
    4326:	67 94       	ror	r6
    4328:	c5 cf       	rjmp	.-118    	; 0x42b4 <__mulsf3+0xae>
    432a:	6b 89       	ldd	r22, Y+19	; 0x13
    432c:	7c 89       	ldd	r23, Y+20	; 0x14
    432e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4330:	fc 85       	ldd	r31, Y+12	; 0x0c
    4332:	6e 0f       	add	r22, r30
    4334:	7f 1f       	adc	r23, r31
    4336:	6e 5f       	subi	r22, 0xFE	; 254
    4338:	7f 4f       	sbci	r23, 0xFF	; 255
    433a:	7c 8f       	std	Y+28, r23	; 0x1c
    433c:	6b 8f       	std	Y+27, r22	; 0x1b
    433e:	1a 8e       	std	Y+26, r1	; 0x1a
    4340:	7a 85       	ldd	r23, Y+10	; 0x0a
    4342:	6a 89       	ldd	r22, Y+18	; 0x12
    4344:	76 17       	cp	r23, r22
    4346:	11 f0       	breq	.+4      	; 0x434c <__mulsf3+0x146>
    4348:	61 e0       	ldi	r22, 0x01	; 1
    434a:	6a 8f       	std	Y+26, r22	; 0x1a
    434c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    434e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4350:	10 c0       	rjmp	.+32     	; 0x4372 <__mulsf3+0x16c>
    4352:	fc 01       	movw	r30, r24
    4354:	e1 70       	andi	r30, 0x01	; 1
    4356:	f0 70       	andi	r31, 0x00	; 0
    4358:	30 97       	sbiw	r30, 0x00	; 0
    435a:	29 f0       	breq	.+10     	; 0x4366 <__mulsf3+0x160>
    435c:	56 95       	lsr	r21
    435e:	47 95       	ror	r20
    4360:	37 95       	ror	r19
    4362:	27 95       	ror	r18
    4364:	50 68       	ori	r21, 0x80	; 128
    4366:	b6 95       	lsr	r27
    4368:	a7 95       	ror	r26
    436a:	97 95       	ror	r25
    436c:	87 95       	ror	r24
    436e:	6f 5f       	subi	r22, 0xFF	; 255
    4370:	7f 4f       	sbci	r23, 0xFF	; 255
    4372:	b7 fd       	sbrc	r27, 7
    4374:	ee cf       	rjmp	.-36     	; 0x4352 <__mulsf3+0x14c>
    4376:	0c c0       	rjmp	.+24     	; 0x4390 <__mulsf3+0x18a>
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	aa 1f       	adc	r26, r26
    437e:	bb 1f       	adc	r27, r27
    4380:	57 fd       	sbrc	r21, 7
    4382:	81 60       	ori	r24, 0x01	; 1
    4384:	22 0f       	add	r18, r18
    4386:	33 1f       	adc	r19, r19
    4388:	44 1f       	adc	r20, r20
    438a:	55 1f       	adc	r21, r21
    438c:	61 50       	subi	r22, 0x01	; 1
    438e:	70 40       	sbci	r23, 0x00	; 0
    4390:	80 30       	cpi	r24, 0x00	; 0
    4392:	e0 e0       	ldi	r30, 0x00	; 0
    4394:	9e 07       	cpc	r25, r30
    4396:	e0 e0       	ldi	r30, 0x00	; 0
    4398:	ae 07       	cpc	r26, r30
    439a:	e0 e4       	ldi	r30, 0x40	; 64
    439c:	be 07       	cpc	r27, r30
    439e:	60 f3       	brcs	.-40     	; 0x4378 <__mulsf3+0x172>
    43a0:	6b 8f       	std	Y+27, r22	; 0x1b
    43a2:	7c 8f       	std	Y+28, r23	; 0x1c
    43a4:	6f e7       	ldi	r22, 0x7F	; 127
    43a6:	e6 2e       	mov	r14, r22
    43a8:	f1 2c       	mov	r15, r1
    43aa:	01 2d       	mov	r16, r1
    43ac:	11 2d       	mov	r17, r1
    43ae:	e8 22       	and	r14, r24
    43b0:	f9 22       	and	r15, r25
    43b2:	0a 23       	and	r16, r26
    43b4:	1b 23       	and	r17, r27
    43b6:	60 e4       	ldi	r22, 0x40	; 64
    43b8:	e6 16       	cp	r14, r22
    43ba:	f1 04       	cpc	r15, r1
    43bc:	01 05       	cpc	r16, r1
    43be:	11 05       	cpc	r17, r1
    43c0:	61 f4       	brne	.+24     	; 0x43da <__mulsf3+0x1d4>
    43c2:	87 fd       	sbrc	r24, 7
    43c4:	0a c0       	rjmp	.+20     	; 0x43da <__mulsf3+0x1d4>
    43c6:	21 15       	cp	r18, r1
    43c8:	31 05       	cpc	r19, r1
    43ca:	41 05       	cpc	r20, r1
    43cc:	51 05       	cpc	r21, r1
    43ce:	29 f0       	breq	.+10     	; 0x43da <__mulsf3+0x1d4>
    43d0:	80 5c       	subi	r24, 0xC0	; 192
    43d2:	9f 4f       	sbci	r25, 0xFF	; 255
    43d4:	af 4f       	sbci	r26, 0xFF	; 255
    43d6:	bf 4f       	sbci	r27, 0xFF	; 255
    43d8:	80 78       	andi	r24, 0x80	; 128
    43da:	8d 8f       	std	Y+29, r24	; 0x1d
    43dc:	9e 8f       	std	Y+30, r25	; 0x1e
    43de:	af 8f       	std	Y+31, r26	; 0x1f
    43e0:	b8 a3       	std	Y+32, r27	; 0x20
    43e2:	83 e0       	ldi	r24, 0x03	; 3
    43e4:	89 8f       	std	Y+25, r24	; 0x19
    43e6:	ce 01       	movw	r24, r28
    43e8:	49 96       	adiw	r24, 0x19	; 25
    43ea:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    43ee:	a0 96       	adiw	r28, 0x20	; 32
    43f0:	e2 e1       	ldi	r30, 0x12	; 18
    43f2:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <__epilogue_restores__>

000043f6 <__divsf3>:
    43f6:	a8 e1       	ldi	r26, 0x18	; 24
    43f8:	b0 e0       	ldi	r27, 0x00	; 0
    43fa:	e1 e0       	ldi	r30, 0x01	; 1
    43fc:	f2 e2       	ldi	r31, 0x22	; 34
    43fe:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__prologue_saves__+0x10>
    4402:	69 83       	std	Y+1, r22	; 0x01
    4404:	7a 83       	std	Y+2, r23	; 0x02
    4406:	8b 83       	std	Y+3, r24	; 0x03
    4408:	9c 83       	std	Y+4, r25	; 0x04
    440a:	2d 83       	std	Y+5, r18	; 0x05
    440c:	3e 83       	std	Y+6, r19	; 0x06
    440e:	4f 83       	std	Y+7, r20	; 0x07
    4410:	58 87       	std	Y+8, r21	; 0x08
    4412:	8e 01       	movw	r16, r28
    4414:	07 5f       	subi	r16, 0xF7	; 247
    4416:	1f 4f       	sbci	r17, 0xFF	; 255
    4418:	ce 01       	movw	r24, r28
    441a:	01 96       	adiw	r24, 0x01	; 1
    441c:	b8 01       	movw	r22, r16
    441e:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    4422:	81 e1       	ldi	r24, 0x11	; 17
    4424:	e8 2e       	mov	r14, r24
    4426:	f1 2c       	mov	r15, r1
    4428:	ec 0e       	add	r14, r28
    442a:	fd 1e       	adc	r15, r29
    442c:	ce 01       	movw	r24, r28
    442e:	05 96       	adiw	r24, 0x05	; 5
    4430:	b7 01       	movw	r22, r14
    4432:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    4436:	99 85       	ldd	r25, Y+9	; 0x09
    4438:	92 30       	cpi	r25, 0x02	; 2
    443a:	08 f4       	brcc	.+2      	; 0x443e <__divsf3+0x48>
    443c:	83 c0       	rjmp	.+262    	; 0x4544 <__divsf3+0x14e>
    443e:	89 89       	ldd	r24, Y+17	; 0x11
    4440:	82 30       	cpi	r24, 0x02	; 2
    4442:	10 f4       	brcc	.+4      	; 0x4448 <__divsf3+0x52>
    4444:	87 01       	movw	r16, r14
    4446:	7e c0       	rjmp	.+252    	; 0x4544 <__divsf3+0x14e>
    4448:	2a 85       	ldd	r18, Y+10	; 0x0a
    444a:	3a 89       	ldd	r19, Y+18	; 0x12
    444c:	23 27       	eor	r18, r19
    444e:	2a 87       	std	Y+10, r18	; 0x0a
    4450:	94 30       	cpi	r25, 0x04	; 4
    4452:	11 f0       	breq	.+4      	; 0x4458 <__divsf3+0x62>
    4454:	92 30       	cpi	r25, 0x02	; 2
    4456:	31 f4       	brne	.+12     	; 0x4464 <__divsf3+0x6e>
    4458:	98 17       	cp	r25, r24
    445a:	09 f0       	breq	.+2      	; 0x445e <__divsf3+0x68>
    445c:	70 c0       	rjmp	.+224    	; 0x453e <__divsf3+0x148>
    445e:	04 e4       	ldi	r16, 0x44	; 68
    4460:	11 e0       	ldi	r17, 0x01	; 1
    4462:	70 c0       	rjmp	.+224    	; 0x4544 <__divsf3+0x14e>
    4464:	84 30       	cpi	r24, 0x04	; 4
    4466:	39 f4       	brne	.+14     	; 0x4476 <__divsf3+0x80>
    4468:	1d 86       	std	Y+13, r1	; 0x0d
    446a:	1e 86       	std	Y+14, r1	; 0x0e
    446c:	1f 86       	std	Y+15, r1	; 0x0f
    446e:	18 8a       	std	Y+16, r1	; 0x10
    4470:	1c 86       	std	Y+12, r1	; 0x0c
    4472:	1b 86       	std	Y+11, r1	; 0x0b
    4474:	67 c0       	rjmp	.+206    	; 0x4544 <__divsf3+0x14e>
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	19 f4       	brne	.+6      	; 0x4480 <__divsf3+0x8a>
    447a:	84 e0       	ldi	r24, 0x04	; 4
    447c:	89 87       	std	Y+9, r24	; 0x09
    447e:	62 c0       	rjmp	.+196    	; 0x4544 <__divsf3+0x14e>
    4480:	8b 85       	ldd	r24, Y+11	; 0x0b
    4482:	9c 85       	ldd	r25, Y+12	; 0x0c
    4484:	2b 89       	ldd	r18, Y+19	; 0x13
    4486:	3c 89       	ldd	r19, Y+20	; 0x14
    4488:	82 1b       	sub	r24, r18
    448a:	93 0b       	sbc	r25, r19
    448c:	9c 87       	std	Y+12, r25	; 0x0c
    448e:	8b 87       	std	Y+11, r24	; 0x0b
    4490:	2d 85       	ldd	r18, Y+13	; 0x0d
    4492:	3e 85       	ldd	r19, Y+14	; 0x0e
    4494:	4f 85       	ldd	r20, Y+15	; 0x0f
    4496:	58 89       	ldd	r21, Y+16	; 0x10
    4498:	ad 88       	ldd	r10, Y+21	; 0x15
    449a:	be 88       	ldd	r11, Y+22	; 0x16
    449c:	cf 88       	ldd	r12, Y+23	; 0x17
    449e:	d8 8c       	ldd	r13, Y+24	; 0x18
    44a0:	2a 15       	cp	r18, r10
    44a2:	3b 05       	cpc	r19, r11
    44a4:	4c 05       	cpc	r20, r12
    44a6:	5d 05       	cpc	r21, r13
    44a8:	38 f4       	brcc	.+14     	; 0x44b8 <__divsf3+0xc2>
    44aa:	22 0f       	add	r18, r18
    44ac:	33 1f       	adc	r19, r19
    44ae:	44 1f       	adc	r20, r20
    44b0:	55 1f       	adc	r21, r21
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	9c 87       	std	Y+12, r25	; 0x0c
    44b6:	8b 87       	std	Y+11, r24	; 0x0b
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	e1 2c       	mov	r14, r1
    44be:	f1 2c       	mov	r15, r1
    44c0:	01 2d       	mov	r16, r1
    44c2:	a0 e4       	ldi	r26, 0x40	; 64
    44c4:	1a 2f       	mov	r17, r26
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	dc 01       	movw	r26, r24
    44cc:	2a 15       	cp	r18, r10
    44ce:	3b 05       	cpc	r19, r11
    44d0:	4c 05       	cpc	r20, r12
    44d2:	5d 05       	cpc	r21, r13
    44d4:	40 f0       	brcs	.+16     	; 0x44e6 <__divsf3+0xf0>
    44d6:	8e 29       	or	r24, r14
    44d8:	9f 29       	or	r25, r15
    44da:	a0 2b       	or	r26, r16
    44dc:	b1 2b       	or	r27, r17
    44de:	2a 19       	sub	r18, r10
    44e0:	3b 09       	sbc	r19, r11
    44e2:	4c 09       	sbc	r20, r12
    44e4:	5d 09       	sbc	r21, r13
    44e6:	16 95       	lsr	r17
    44e8:	07 95       	ror	r16
    44ea:	f7 94       	ror	r15
    44ec:	e7 94       	ror	r14
    44ee:	22 0f       	add	r18, r18
    44f0:	33 1f       	adc	r19, r19
    44f2:	44 1f       	adc	r20, r20
    44f4:	55 1f       	adc	r21, r21
    44f6:	6f 5f       	subi	r22, 0xFF	; 255
    44f8:	7f 4f       	sbci	r23, 0xFF	; 255
    44fa:	6f 31       	cpi	r22, 0x1F	; 31
    44fc:	71 05       	cpc	r23, r1
    44fe:	31 f7       	brne	.-52     	; 0x44cc <__divsf3+0xd6>
    4500:	6f e7       	ldi	r22, 0x7F	; 127
    4502:	e6 2e       	mov	r14, r22
    4504:	f1 2c       	mov	r15, r1
    4506:	01 2d       	mov	r16, r1
    4508:	11 2d       	mov	r17, r1
    450a:	e8 22       	and	r14, r24
    450c:	f9 22       	and	r15, r25
    450e:	0a 23       	and	r16, r26
    4510:	1b 23       	and	r17, r27
    4512:	60 e4       	ldi	r22, 0x40	; 64
    4514:	e6 16       	cp	r14, r22
    4516:	f1 04       	cpc	r15, r1
    4518:	01 05       	cpc	r16, r1
    451a:	11 05       	cpc	r17, r1
    451c:	61 f4       	brne	.+24     	; 0x4536 <__divsf3+0x140>
    451e:	87 fd       	sbrc	r24, 7
    4520:	0a c0       	rjmp	.+20     	; 0x4536 <__divsf3+0x140>
    4522:	21 15       	cp	r18, r1
    4524:	31 05       	cpc	r19, r1
    4526:	41 05       	cpc	r20, r1
    4528:	51 05       	cpc	r21, r1
    452a:	29 f0       	breq	.+10     	; 0x4536 <__divsf3+0x140>
    452c:	80 5c       	subi	r24, 0xC0	; 192
    452e:	9f 4f       	sbci	r25, 0xFF	; 255
    4530:	af 4f       	sbci	r26, 0xFF	; 255
    4532:	bf 4f       	sbci	r27, 0xFF	; 255
    4534:	80 78       	andi	r24, 0x80	; 128
    4536:	8d 87       	std	Y+13, r24	; 0x0d
    4538:	9e 87       	std	Y+14, r25	; 0x0e
    453a:	af 87       	std	Y+15, r26	; 0x0f
    453c:	b8 8b       	std	Y+16, r27	; 0x10
    453e:	8e 01       	movw	r16, r28
    4540:	07 5f       	subi	r16, 0xF7	; 247
    4542:	1f 4f       	sbci	r17, 0xFF	; 255
    4544:	c8 01       	movw	r24, r16
    4546:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    454a:	68 96       	adiw	r28, 0x18	; 24
    454c:	ea e0       	ldi	r30, 0x0A	; 10
    454e:	0c 94 a6 26 	jmp	0x4d4c	; 0x4d4c <__epilogue_restores__+0x10>

00004552 <__gesf2>:
    4552:	a8 e1       	ldi	r26, 0x18	; 24
    4554:	b0 e0       	ldi	r27, 0x00	; 0
    4556:	ef ea       	ldi	r30, 0xAF	; 175
    4558:	f2 e2       	ldi	r31, 0x22	; 34
    455a:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__prologue_saves__+0x18>
    455e:	69 83       	std	Y+1, r22	; 0x01
    4560:	7a 83       	std	Y+2, r23	; 0x02
    4562:	8b 83       	std	Y+3, r24	; 0x03
    4564:	9c 83       	std	Y+4, r25	; 0x04
    4566:	2d 83       	std	Y+5, r18	; 0x05
    4568:	3e 83       	std	Y+6, r19	; 0x06
    456a:	4f 83       	std	Y+7, r20	; 0x07
    456c:	58 87       	std	Y+8, r21	; 0x08
    456e:	89 e0       	ldi	r24, 0x09	; 9
    4570:	e8 2e       	mov	r14, r24
    4572:	f1 2c       	mov	r15, r1
    4574:	ec 0e       	add	r14, r28
    4576:	fd 1e       	adc	r15, r29
    4578:	ce 01       	movw	r24, r28
    457a:	01 96       	adiw	r24, 0x01	; 1
    457c:	b7 01       	movw	r22, r14
    457e:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    4582:	8e 01       	movw	r16, r28
    4584:	0f 5e       	subi	r16, 0xEF	; 239
    4586:	1f 4f       	sbci	r17, 0xFF	; 255
    4588:	ce 01       	movw	r24, r28
    458a:	05 96       	adiw	r24, 0x05	; 5
    458c:	b8 01       	movw	r22, r16
    458e:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    4592:	89 85       	ldd	r24, Y+9	; 0x09
    4594:	82 30       	cpi	r24, 0x02	; 2
    4596:	40 f0       	brcs	.+16     	; 0x45a8 <__gesf2+0x56>
    4598:	89 89       	ldd	r24, Y+17	; 0x11
    459a:	82 30       	cpi	r24, 0x02	; 2
    459c:	28 f0       	brcs	.+10     	; 0x45a8 <__gesf2+0x56>
    459e:	c7 01       	movw	r24, r14
    45a0:	b8 01       	movw	r22, r16
    45a2:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__fpcmp_parts_f>
    45a6:	01 c0       	rjmp	.+2      	; 0x45aa <__gesf2+0x58>
    45a8:	8f ef       	ldi	r24, 0xFF	; 255
    45aa:	68 96       	adiw	r28, 0x18	; 24
    45ac:	e6 e0       	ldi	r30, 0x06	; 6
    45ae:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__epilogue_restores__+0x18>

000045b2 <__ltsf2>:
    45b2:	a8 e1       	ldi	r26, 0x18	; 24
    45b4:	b0 e0       	ldi	r27, 0x00	; 0
    45b6:	ef ed       	ldi	r30, 0xDF	; 223
    45b8:	f2 e2       	ldi	r31, 0x22	; 34
    45ba:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <__prologue_saves__+0x18>
    45be:	69 83       	std	Y+1, r22	; 0x01
    45c0:	7a 83       	std	Y+2, r23	; 0x02
    45c2:	8b 83       	std	Y+3, r24	; 0x03
    45c4:	9c 83       	std	Y+4, r25	; 0x04
    45c6:	2d 83       	std	Y+5, r18	; 0x05
    45c8:	3e 83       	std	Y+6, r19	; 0x06
    45ca:	4f 83       	std	Y+7, r20	; 0x07
    45cc:	58 87       	std	Y+8, r21	; 0x08
    45ce:	89 e0       	ldi	r24, 0x09	; 9
    45d0:	e8 2e       	mov	r14, r24
    45d2:	f1 2c       	mov	r15, r1
    45d4:	ec 0e       	add	r14, r28
    45d6:	fd 1e       	adc	r15, r29
    45d8:	ce 01       	movw	r24, r28
    45da:	01 96       	adiw	r24, 0x01	; 1
    45dc:	b7 01       	movw	r22, r14
    45de:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    45e2:	8e 01       	movw	r16, r28
    45e4:	0f 5e       	subi	r16, 0xEF	; 239
    45e6:	1f 4f       	sbci	r17, 0xFF	; 255
    45e8:	ce 01       	movw	r24, r28
    45ea:	05 96       	adiw	r24, 0x05	; 5
    45ec:	b8 01       	movw	r22, r16
    45ee:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    45f2:	89 85       	ldd	r24, Y+9	; 0x09
    45f4:	82 30       	cpi	r24, 0x02	; 2
    45f6:	40 f0       	brcs	.+16     	; 0x4608 <__ltsf2+0x56>
    45f8:	89 89       	ldd	r24, Y+17	; 0x11
    45fa:	82 30       	cpi	r24, 0x02	; 2
    45fc:	28 f0       	brcs	.+10     	; 0x4608 <__ltsf2+0x56>
    45fe:	c7 01       	movw	r24, r14
    4600:	b8 01       	movw	r22, r16
    4602:	0e 94 c7 25 	call	0x4b8e	; 0x4b8e <__fpcmp_parts_f>
    4606:	01 c0       	rjmp	.+2      	; 0x460a <__ltsf2+0x58>
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	68 96       	adiw	r28, 0x18	; 24
    460c:	e6 e0       	ldi	r30, 0x06	; 6
    460e:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__epilogue_restores__+0x18>

00004612 <__floatsisf>:
    4612:	a8 e0       	ldi	r26, 0x08	; 8
    4614:	b0 e0       	ldi	r27, 0x00	; 0
    4616:	ef e0       	ldi	r30, 0x0F	; 15
    4618:	f3 e2       	ldi	r31, 0x23	; 35
    461a:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__prologue_saves__+0x14>
    461e:	23 e0       	ldi	r18, 0x03	; 3
    4620:	29 83       	std	Y+1, r18	; 0x01
    4622:	9b 01       	movw	r18, r22
    4624:	ac 01       	movw	r20, r24
    4626:	22 27       	eor	r18, r18
    4628:	57 fd       	sbrc	r21, 7
    462a:	23 95       	inc	r18
    462c:	33 27       	eor	r19, r19
    462e:	44 27       	eor	r20, r20
    4630:	55 27       	eor	r21, r21
    4632:	2a 83       	std	Y+2, r18	; 0x02
    4634:	61 15       	cp	r22, r1
    4636:	71 05       	cpc	r23, r1
    4638:	81 05       	cpc	r24, r1
    463a:	91 05       	cpc	r25, r1
    463c:	19 f4       	brne	.+6      	; 0x4644 <__floatsisf+0x32>
    463e:	82 e0       	ldi	r24, 0x02	; 2
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	3c c0       	rjmp	.+120    	; 0x46bc <__floatsisf+0xaa>
    4644:	22 23       	and	r18, r18
    4646:	a9 f0       	breq	.+42     	; 0x4672 <__floatsisf+0x60>
    4648:	60 30       	cpi	r22, 0x00	; 0
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	72 07       	cpc	r23, r18
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	82 07       	cpc	r24, r18
    4652:	20 e8       	ldi	r18, 0x80	; 128
    4654:	92 07       	cpc	r25, r18
    4656:	29 f4       	brne	.+10     	; 0x4662 <__floatsisf+0x50>
    4658:	60 e0       	ldi	r22, 0x00	; 0
    465a:	70 e0       	ldi	r23, 0x00	; 0
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	9f ec       	ldi	r25, 0xCF	; 207
    4660:	31 c0       	rjmp	.+98     	; 0x46c4 <__floatsisf+0xb2>
    4662:	ee 24       	eor	r14, r14
    4664:	ff 24       	eor	r15, r15
    4666:	87 01       	movw	r16, r14
    4668:	e6 1a       	sub	r14, r22
    466a:	f7 0a       	sbc	r15, r23
    466c:	08 0b       	sbc	r16, r24
    466e:	19 0b       	sbc	r17, r25
    4670:	02 c0       	rjmp	.+4      	; 0x4676 <__floatsisf+0x64>
    4672:	7b 01       	movw	r14, r22
    4674:	8c 01       	movw	r16, r24
    4676:	8e e1       	ldi	r24, 0x1E	; 30
    4678:	c8 2e       	mov	r12, r24
    467a:	d1 2c       	mov	r13, r1
    467c:	dc 82       	std	Y+4, r13	; 0x04
    467e:	cb 82       	std	Y+3, r12	; 0x03
    4680:	ed 82       	std	Y+5, r14	; 0x05
    4682:	fe 82       	std	Y+6, r15	; 0x06
    4684:	0f 83       	std	Y+7, r16	; 0x07
    4686:	18 87       	std	Y+8, r17	; 0x08
    4688:	c8 01       	movw	r24, r16
    468a:	b7 01       	movw	r22, r14
    468c:	0e 94 31 24 	call	0x4862	; 0x4862 <__clzsi2>
    4690:	9c 01       	movw	r18, r24
    4692:	21 50       	subi	r18, 0x01	; 1
    4694:	30 40       	sbci	r19, 0x00	; 0
    4696:	12 16       	cp	r1, r18
    4698:	13 06       	cpc	r1, r19
    469a:	84 f4       	brge	.+32     	; 0x46bc <__floatsisf+0xaa>
    469c:	02 2e       	mov	r0, r18
    469e:	04 c0       	rjmp	.+8      	; 0x46a8 <__floatsisf+0x96>
    46a0:	ee 0c       	add	r14, r14
    46a2:	ff 1c       	adc	r15, r15
    46a4:	00 1f       	adc	r16, r16
    46a6:	11 1f       	adc	r17, r17
    46a8:	0a 94       	dec	r0
    46aa:	d2 f7       	brpl	.-12     	; 0x46a0 <__floatsisf+0x8e>
    46ac:	ed 82       	std	Y+5, r14	; 0x05
    46ae:	fe 82       	std	Y+6, r15	; 0x06
    46b0:	0f 83       	std	Y+7, r16	; 0x07
    46b2:	18 87       	std	Y+8, r17	; 0x08
    46b4:	c2 1a       	sub	r12, r18
    46b6:	d3 0a       	sbc	r13, r19
    46b8:	dc 82       	std	Y+4, r13	; 0x04
    46ba:	cb 82       	std	Y+3, r12	; 0x03
    46bc:	ce 01       	movw	r24, r28
    46be:	01 96       	adiw	r24, 0x01	; 1
    46c0:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    46c4:	28 96       	adiw	r28, 0x08	; 8
    46c6:	e8 e0       	ldi	r30, 0x08	; 8
    46c8:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__epilogue_restores__+0x14>

000046cc <__fixsfsi>:
    46cc:	ac e0       	ldi	r26, 0x0C	; 12
    46ce:	b0 e0       	ldi	r27, 0x00	; 0
    46d0:	ec e6       	ldi	r30, 0x6C	; 108
    46d2:	f3 e2       	ldi	r31, 0x23	; 35
    46d4:	0c 94 92 26 	jmp	0x4d24	; 0x4d24 <__prologue_saves__+0x20>
    46d8:	69 83       	std	Y+1, r22	; 0x01
    46da:	7a 83       	std	Y+2, r23	; 0x02
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	9c 83       	std	Y+4, r25	; 0x04
    46e0:	ce 01       	movw	r24, r28
    46e2:	01 96       	adiw	r24, 0x01	; 1
    46e4:	be 01       	movw	r22, r28
    46e6:	6b 5f       	subi	r22, 0xFB	; 251
    46e8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ea:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__unpack_f>
    46ee:	8d 81       	ldd	r24, Y+5	; 0x05
    46f0:	82 30       	cpi	r24, 0x02	; 2
    46f2:	61 f1       	breq	.+88     	; 0x474c <__fixsfsi+0x80>
    46f4:	82 30       	cpi	r24, 0x02	; 2
    46f6:	50 f1       	brcs	.+84     	; 0x474c <__fixsfsi+0x80>
    46f8:	84 30       	cpi	r24, 0x04	; 4
    46fa:	21 f4       	brne	.+8      	; 0x4704 <__fixsfsi+0x38>
    46fc:	8e 81       	ldd	r24, Y+6	; 0x06
    46fe:	88 23       	and	r24, r24
    4700:	49 f1       	breq	.+82     	; 0x4754 <__fixsfsi+0x88>
    4702:	2d c0       	rjmp	.+90     	; 0x475e <__fixsfsi+0x92>
    4704:	2f 81       	ldd	r18, Y+7	; 0x07
    4706:	38 85       	ldd	r19, Y+8	; 0x08
    4708:	37 fd       	sbrc	r19, 7
    470a:	20 c0       	rjmp	.+64     	; 0x474c <__fixsfsi+0x80>
    470c:	6e 81       	ldd	r22, Y+6	; 0x06
    470e:	2f 31       	cpi	r18, 0x1F	; 31
    4710:	31 05       	cpc	r19, r1
    4712:	1c f0       	brlt	.+6      	; 0x471a <__fixsfsi+0x4e>
    4714:	66 23       	and	r22, r22
    4716:	f1 f0       	breq	.+60     	; 0x4754 <__fixsfsi+0x88>
    4718:	22 c0       	rjmp	.+68     	; 0x475e <__fixsfsi+0x92>
    471a:	8e e1       	ldi	r24, 0x1E	; 30
    471c:	90 e0       	ldi	r25, 0x00	; 0
    471e:	82 1b       	sub	r24, r18
    4720:	93 0b       	sbc	r25, r19
    4722:	29 85       	ldd	r18, Y+9	; 0x09
    4724:	3a 85       	ldd	r19, Y+10	; 0x0a
    4726:	4b 85       	ldd	r20, Y+11	; 0x0b
    4728:	5c 85       	ldd	r21, Y+12	; 0x0c
    472a:	04 c0       	rjmp	.+8      	; 0x4734 <__fixsfsi+0x68>
    472c:	56 95       	lsr	r21
    472e:	47 95       	ror	r20
    4730:	37 95       	ror	r19
    4732:	27 95       	ror	r18
    4734:	8a 95       	dec	r24
    4736:	d2 f7       	brpl	.-12     	; 0x472c <__fixsfsi+0x60>
    4738:	66 23       	and	r22, r22
    473a:	a9 f0       	breq	.+42     	; 0x4766 <__fixsfsi+0x9a>
    473c:	50 95       	com	r21
    473e:	40 95       	com	r20
    4740:	30 95       	com	r19
    4742:	21 95       	neg	r18
    4744:	3f 4f       	sbci	r19, 0xFF	; 255
    4746:	4f 4f       	sbci	r20, 0xFF	; 255
    4748:	5f 4f       	sbci	r21, 0xFF	; 255
    474a:	0d c0       	rjmp	.+26     	; 0x4766 <__fixsfsi+0x9a>
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	a9 01       	movw	r20, r18
    4752:	09 c0       	rjmp	.+18     	; 0x4766 <__fixsfsi+0x9a>
    4754:	2f ef       	ldi	r18, 0xFF	; 255
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	4f ef       	ldi	r20, 0xFF	; 255
    475a:	5f e7       	ldi	r21, 0x7F	; 127
    475c:	04 c0       	rjmp	.+8      	; 0x4766 <__fixsfsi+0x9a>
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e0       	ldi	r20, 0x00	; 0
    4764:	50 e8       	ldi	r21, 0x80	; 128
    4766:	b9 01       	movw	r22, r18
    4768:	ca 01       	movw	r24, r20
    476a:	2c 96       	adiw	r28, 0x0c	; 12
    476c:	e2 e0       	ldi	r30, 0x02	; 2
    476e:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <__epilogue_restores__+0x20>

00004772 <__floatunsisf>:
    4772:	a8 e0       	ldi	r26, 0x08	; 8
    4774:	b0 e0       	ldi	r27, 0x00	; 0
    4776:	ef eb       	ldi	r30, 0xBF	; 191
    4778:	f3 e2       	ldi	r31, 0x23	; 35
    477a:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <__prologue_saves__+0x14>
    477e:	7b 01       	movw	r14, r22
    4780:	8c 01       	movw	r16, r24
    4782:	1a 82       	std	Y+2, r1	; 0x02
    4784:	61 15       	cp	r22, r1
    4786:	71 05       	cpc	r23, r1
    4788:	81 05       	cpc	r24, r1
    478a:	91 05       	cpc	r25, r1
    478c:	19 f4       	brne	.+6      	; 0x4794 <__floatunsisf+0x22>
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	89 83       	std	Y+1, r24	; 0x01
    4792:	5f c0       	rjmp	.+190    	; 0x4852 <__floatunsisf+0xe0>
    4794:	83 e0       	ldi	r24, 0x03	; 3
    4796:	89 83       	std	Y+1, r24	; 0x01
    4798:	8e e1       	ldi	r24, 0x1E	; 30
    479a:	c8 2e       	mov	r12, r24
    479c:	d1 2c       	mov	r13, r1
    479e:	dc 82       	std	Y+4, r13	; 0x04
    47a0:	cb 82       	std	Y+3, r12	; 0x03
    47a2:	ed 82       	std	Y+5, r14	; 0x05
    47a4:	fe 82       	std	Y+6, r15	; 0x06
    47a6:	0f 83       	std	Y+7, r16	; 0x07
    47a8:	18 87       	std	Y+8, r17	; 0x08
    47aa:	c8 01       	movw	r24, r16
    47ac:	b7 01       	movw	r22, r14
    47ae:	0e 94 31 24 	call	0x4862	; 0x4862 <__clzsi2>
    47b2:	9c 01       	movw	r18, r24
    47b4:	21 50       	subi	r18, 0x01	; 1
    47b6:	30 40       	sbci	r19, 0x00	; 0
    47b8:	37 ff       	sbrs	r19, 7
    47ba:	38 c0       	rjmp	.+112    	; 0x482c <__floatunsisf+0xba>
    47bc:	ee 27       	eor	r30, r30
    47be:	ff 27       	eor	r31, r31
    47c0:	e2 1b       	sub	r30, r18
    47c2:	f3 0b       	sbc	r31, r19
    47c4:	40 e0       	ldi	r20, 0x00	; 0
    47c6:	50 e0       	ldi	r21, 0x00	; 0
    47c8:	ba 01       	movw	r22, r20
    47ca:	81 e0       	ldi	r24, 0x01	; 1
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	a0 e0       	ldi	r26, 0x00	; 0
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	0e 2e       	mov	r0, r30
    47d4:	04 c0       	rjmp	.+8      	; 0x47de <__floatunsisf+0x6c>
    47d6:	88 0f       	add	r24, r24
    47d8:	99 1f       	adc	r25, r25
    47da:	aa 1f       	adc	r26, r26
    47dc:	bb 1f       	adc	r27, r27
    47de:	0a 94       	dec	r0
    47e0:	d2 f7       	brpl	.-12     	; 0x47d6 <__floatunsisf+0x64>
    47e2:	01 97       	sbiw	r24, 0x01	; 1
    47e4:	a1 09       	sbc	r26, r1
    47e6:	b1 09       	sbc	r27, r1
    47e8:	8e 21       	and	r24, r14
    47ea:	9f 21       	and	r25, r15
    47ec:	a0 23       	and	r26, r16
    47ee:	b1 23       	and	r27, r17
    47f0:	00 97       	sbiw	r24, 0x00	; 0
    47f2:	a1 05       	cpc	r26, r1
    47f4:	b1 05       	cpc	r27, r1
    47f6:	21 f0       	breq	.+8      	; 0x4800 <__floatunsisf+0x8e>
    47f8:	41 e0       	ldi	r20, 0x01	; 1
    47fa:	50 e0       	ldi	r21, 0x00	; 0
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	04 c0       	rjmp	.+8      	; 0x480a <__floatunsisf+0x98>
    4802:	16 95       	lsr	r17
    4804:	07 95       	ror	r16
    4806:	f7 94       	ror	r15
    4808:	e7 94       	ror	r14
    480a:	ea 95       	dec	r30
    480c:	d2 f7       	brpl	.-12     	; 0x4802 <__floatunsisf+0x90>
    480e:	e4 2a       	or	r14, r20
    4810:	f5 2a       	or	r15, r21
    4812:	06 2b       	or	r16, r22
    4814:	17 2b       	or	r17, r23
    4816:	ed 82       	std	Y+5, r14	; 0x05
    4818:	fe 82       	std	Y+6, r15	; 0x06
    481a:	0f 83       	std	Y+7, r16	; 0x07
    481c:	18 87       	std	Y+8, r17	; 0x08
    481e:	8e e1       	ldi	r24, 0x1E	; 30
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	82 1b       	sub	r24, r18
    4824:	93 0b       	sbc	r25, r19
    4826:	9c 83       	std	Y+4, r25	; 0x04
    4828:	8b 83       	std	Y+3, r24	; 0x03
    482a:	13 c0       	rjmp	.+38     	; 0x4852 <__floatunsisf+0xe0>
    482c:	21 15       	cp	r18, r1
    482e:	31 05       	cpc	r19, r1
    4830:	81 f0       	breq	.+32     	; 0x4852 <__floatunsisf+0xe0>
    4832:	02 2e       	mov	r0, r18
    4834:	04 c0       	rjmp	.+8      	; 0x483e <__floatunsisf+0xcc>
    4836:	ee 0c       	add	r14, r14
    4838:	ff 1c       	adc	r15, r15
    483a:	00 1f       	adc	r16, r16
    483c:	11 1f       	adc	r17, r17
    483e:	0a 94       	dec	r0
    4840:	d2 f7       	brpl	.-12     	; 0x4836 <__floatunsisf+0xc4>
    4842:	ed 82       	std	Y+5, r14	; 0x05
    4844:	fe 82       	std	Y+6, r15	; 0x06
    4846:	0f 83       	std	Y+7, r16	; 0x07
    4848:	18 87       	std	Y+8, r17	; 0x08
    484a:	c2 1a       	sub	r12, r18
    484c:	d3 0a       	sbc	r13, r19
    484e:	dc 82       	std	Y+4, r13	; 0x04
    4850:	cb 82       	std	Y+3, r12	; 0x03
    4852:	ce 01       	movw	r24, r28
    4854:	01 96       	adiw	r24, 0x01	; 1
    4856:	0e 94 89 24 	call	0x4912	; 0x4912 <__pack_f>
    485a:	28 96       	adiw	r28, 0x08	; 8
    485c:	e8 e0       	ldi	r30, 0x08	; 8
    485e:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__epilogue_restores__+0x14>

00004862 <__clzsi2>:
    4862:	af 92       	push	r10
    4864:	bf 92       	push	r11
    4866:	cf 92       	push	r12
    4868:	df 92       	push	r13
    486a:	ef 92       	push	r14
    486c:	ff 92       	push	r15
    486e:	0f 93       	push	r16
    4870:	1f 93       	push	r17
    4872:	7b 01       	movw	r14, r22
    4874:	8c 01       	movw	r16, r24
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	e8 16       	cp	r14, r24
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	f8 06       	cpc	r15, r24
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	08 07       	cpc	r16, r24
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	18 07       	cpc	r17, r24
    4886:	80 f4       	brcc	.+32     	; 0x48a8 <__clzsi2+0x46>
    4888:	8f ef       	ldi	r24, 0xFF	; 255
    488a:	e8 16       	cp	r14, r24
    488c:	f1 04       	cpc	r15, r1
    488e:	01 05       	cpc	r16, r1
    4890:	11 05       	cpc	r17, r1
    4892:	31 f0       	breq	.+12     	; 0x48a0 <__clzsi2+0x3e>
    4894:	28 f0       	brcs	.+10     	; 0x48a0 <__clzsi2+0x3e>
    4896:	88 e0       	ldi	r24, 0x08	; 8
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	a0 e0       	ldi	r26, 0x00	; 0
    489c:	b0 e0       	ldi	r27, 0x00	; 0
    489e:	16 c0       	rjmp	.+44     	; 0x48cc <__clzsi2+0x6a>
    48a0:	80 e0       	ldi	r24, 0x00	; 0
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	dc 01       	movw	r26, r24
    48a6:	12 c0       	rjmp	.+36     	; 0x48cc <__clzsi2+0x6a>
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	e8 16       	cp	r14, r24
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	f8 06       	cpc	r15, r24
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	08 07       	cpc	r16, r24
    48b4:	81 e0       	ldi	r24, 0x01	; 1
    48b6:	18 07       	cpc	r17, r24
    48b8:	28 f0       	brcs	.+10     	; 0x48c4 <__clzsi2+0x62>
    48ba:	88 e1       	ldi	r24, 0x18	; 24
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	a0 e0       	ldi	r26, 0x00	; 0
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	04 c0       	rjmp	.+8      	; 0x48cc <__clzsi2+0x6a>
    48c4:	80 e1       	ldi	r24, 0x10	; 16
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	a0 e0       	ldi	r26, 0x00	; 0
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	20 e2       	ldi	r18, 0x20	; 32
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e0       	ldi	r20, 0x00	; 0
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	28 1b       	sub	r18, r24
    48d6:	39 0b       	sbc	r19, r25
    48d8:	4a 0b       	sbc	r20, r26
    48da:	5b 0b       	sbc	r21, r27
    48dc:	57 01       	movw	r10, r14
    48de:	68 01       	movw	r12, r16
    48e0:	04 c0       	rjmp	.+8      	; 0x48ea <__clzsi2+0x88>
    48e2:	d6 94       	lsr	r13
    48e4:	c7 94       	ror	r12
    48e6:	b7 94       	ror	r11
    48e8:	a7 94       	ror	r10
    48ea:	8a 95       	dec	r24
    48ec:	d2 f7       	brpl	.-12     	; 0x48e2 <__clzsi2+0x80>
    48ee:	f5 01       	movw	r30, r10
    48f0:	e4 5b       	subi	r30, 0xB4	; 180
    48f2:	fe 4f       	sbci	r31, 0xFE	; 254
    48f4:	80 81       	ld	r24, Z
    48f6:	28 1b       	sub	r18, r24
    48f8:	31 09       	sbc	r19, r1
    48fa:	41 09       	sbc	r20, r1
    48fc:	51 09       	sbc	r21, r1
    48fe:	c9 01       	movw	r24, r18
    4900:	1f 91       	pop	r17
    4902:	0f 91       	pop	r16
    4904:	ff 90       	pop	r15
    4906:	ef 90       	pop	r14
    4908:	df 90       	pop	r13
    490a:	cf 90       	pop	r12
    490c:	bf 90       	pop	r11
    490e:	af 90       	pop	r10
    4910:	08 95       	ret

00004912 <__pack_f>:
    4912:	cf 92       	push	r12
    4914:	df 92       	push	r13
    4916:	ef 92       	push	r14
    4918:	ff 92       	push	r15
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	fc 01       	movw	r30, r24
    4920:	24 81       	ldd	r18, Z+4	; 0x04
    4922:	35 81       	ldd	r19, Z+5	; 0x05
    4924:	46 81       	ldd	r20, Z+6	; 0x06
    4926:	57 81       	ldd	r21, Z+7	; 0x07
    4928:	01 81       	ldd	r16, Z+1	; 0x01
    492a:	80 81       	ld	r24, Z
    492c:	82 30       	cpi	r24, 0x02	; 2
    492e:	20 f4       	brcc	.+8      	; 0x4938 <__pack_f+0x26>
    4930:	40 61       	ori	r20, 0x10	; 16
    4932:	8f ef       	ldi	r24, 0xFF	; 255
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	a2 c0       	rjmp	.+324    	; 0x4a7c <__pack_f+0x16a>
    4938:	84 30       	cpi	r24, 0x04	; 4
    493a:	09 f4       	brne	.+2      	; 0x493e <__pack_f+0x2c>
    493c:	9a c0       	rjmp	.+308    	; 0x4a72 <__pack_f+0x160>
    493e:	82 30       	cpi	r24, 0x02	; 2
    4940:	19 f4       	brne	.+6      	; 0x4948 <__pack_f+0x36>
    4942:	80 e0       	ldi	r24, 0x00	; 0
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	97 c0       	rjmp	.+302    	; 0x4a76 <__pack_f+0x164>
    4948:	21 15       	cp	r18, r1
    494a:	31 05       	cpc	r19, r1
    494c:	41 05       	cpc	r20, r1
    494e:	51 05       	cpc	r21, r1
    4950:	19 f4       	brne	.+6      	; 0x4958 <__pack_f+0x46>
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	92 c0       	rjmp	.+292    	; 0x4a7c <__pack_f+0x16a>
    4958:	82 81       	ldd	r24, Z+2	; 0x02
    495a:	93 81       	ldd	r25, Z+3	; 0x03
    495c:	6f ef       	ldi	r22, 0xFF	; 255
    495e:	82 38       	cpi	r24, 0x82	; 130
    4960:	96 07       	cpc	r25, r22
    4962:	0c f0       	brlt	.+2      	; 0x4966 <__pack_f+0x54>
    4964:	58 c0       	rjmp	.+176    	; 0x4a16 <__pack_f+0x104>
    4966:	62 e8       	ldi	r22, 0x82	; 130
    4968:	7f ef       	ldi	r23, 0xFF	; 255
    496a:	68 1b       	sub	r22, r24
    496c:	79 0b       	sbc	r23, r25
    496e:	6a 31       	cpi	r22, 0x1A	; 26
    4970:	71 05       	cpc	r23, r1
    4972:	24 f0       	brlt	.+8      	; 0x497c <__pack_f+0x6a>
    4974:	20 e0       	ldi	r18, 0x00	; 0
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	a9 01       	movw	r20, r18
    497a:	2a c0       	rjmp	.+84     	; 0x49d0 <__pack_f+0xbe>
    497c:	69 01       	movw	r12, r18
    497e:	7a 01       	movw	r14, r20
    4980:	06 2e       	mov	r0, r22
    4982:	04 c0       	rjmp	.+8      	; 0x498c <__pack_f+0x7a>
    4984:	f6 94       	lsr	r15
    4986:	e7 94       	ror	r14
    4988:	d7 94       	ror	r13
    498a:	c7 94       	ror	r12
    498c:	0a 94       	dec	r0
    498e:	d2 f7       	brpl	.-12     	; 0x4984 <__pack_f+0x72>
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	a0 e0       	ldi	r26, 0x00	; 0
    4996:	b0 e0       	ldi	r27, 0x00	; 0
    4998:	04 c0       	rjmp	.+8      	; 0x49a2 <__pack_f+0x90>
    499a:	88 0f       	add	r24, r24
    499c:	99 1f       	adc	r25, r25
    499e:	aa 1f       	adc	r26, r26
    49a0:	bb 1f       	adc	r27, r27
    49a2:	6a 95       	dec	r22
    49a4:	d2 f7       	brpl	.-12     	; 0x499a <__pack_f+0x88>
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	a1 09       	sbc	r26, r1
    49aa:	b1 09       	sbc	r27, r1
    49ac:	82 23       	and	r24, r18
    49ae:	93 23       	and	r25, r19
    49b0:	a4 23       	and	r26, r20
    49b2:	b5 23       	and	r27, r21
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	a1 05       	cpc	r26, r1
    49b8:	b1 05       	cpc	r27, r1
    49ba:	21 f0       	breq	.+8      	; 0x49c4 <__pack_f+0xb2>
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	a0 e0       	ldi	r26, 0x00	; 0
    49c2:	b0 e0       	ldi	r27, 0x00	; 0
    49c4:	9c 01       	movw	r18, r24
    49c6:	ad 01       	movw	r20, r26
    49c8:	2c 29       	or	r18, r12
    49ca:	3d 29       	or	r19, r13
    49cc:	4e 29       	or	r20, r14
    49ce:	5f 29       	or	r21, r15
    49d0:	da 01       	movw	r26, r20
    49d2:	c9 01       	movw	r24, r18
    49d4:	8f 77       	andi	r24, 0x7F	; 127
    49d6:	90 70       	andi	r25, 0x00	; 0
    49d8:	a0 70       	andi	r26, 0x00	; 0
    49da:	b0 70       	andi	r27, 0x00	; 0
    49dc:	80 34       	cpi	r24, 0x40	; 64
    49de:	91 05       	cpc	r25, r1
    49e0:	a1 05       	cpc	r26, r1
    49e2:	b1 05       	cpc	r27, r1
    49e4:	39 f4       	brne	.+14     	; 0x49f4 <__pack_f+0xe2>
    49e6:	27 ff       	sbrs	r18, 7
    49e8:	09 c0       	rjmp	.+18     	; 0x49fc <__pack_f+0xea>
    49ea:	20 5c       	subi	r18, 0xC0	; 192
    49ec:	3f 4f       	sbci	r19, 0xFF	; 255
    49ee:	4f 4f       	sbci	r20, 0xFF	; 255
    49f0:	5f 4f       	sbci	r21, 0xFF	; 255
    49f2:	04 c0       	rjmp	.+8      	; 0x49fc <__pack_f+0xea>
    49f4:	21 5c       	subi	r18, 0xC1	; 193
    49f6:	3f 4f       	sbci	r19, 0xFF	; 255
    49f8:	4f 4f       	sbci	r20, 0xFF	; 255
    49fa:	5f 4f       	sbci	r21, 0xFF	; 255
    49fc:	80 e0       	ldi	r24, 0x00	; 0
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	20 30       	cpi	r18, 0x00	; 0
    4a02:	60 e0       	ldi	r22, 0x00	; 0
    4a04:	36 07       	cpc	r19, r22
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	46 07       	cpc	r20, r22
    4a0a:	60 e4       	ldi	r22, 0x40	; 64
    4a0c:	56 07       	cpc	r21, r22
    4a0e:	48 f1       	brcs	.+82     	; 0x4a62 <__pack_f+0x150>
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	26 c0       	rjmp	.+76     	; 0x4a62 <__pack_f+0x150>
    4a16:	80 38       	cpi	r24, 0x80	; 128
    4a18:	91 05       	cpc	r25, r1
    4a1a:	5c f5       	brge	.+86     	; 0x4a72 <__pack_f+0x160>
    4a1c:	81 58       	subi	r24, 0x81	; 129
    4a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a20:	7f e7       	ldi	r23, 0x7F	; 127
    4a22:	c7 2e       	mov	r12, r23
    4a24:	d1 2c       	mov	r13, r1
    4a26:	e1 2c       	mov	r14, r1
    4a28:	f1 2c       	mov	r15, r1
    4a2a:	c2 22       	and	r12, r18
    4a2c:	d3 22       	and	r13, r19
    4a2e:	e4 22       	and	r14, r20
    4a30:	f5 22       	and	r15, r21
    4a32:	60 e4       	ldi	r22, 0x40	; 64
    4a34:	c6 16       	cp	r12, r22
    4a36:	d1 04       	cpc	r13, r1
    4a38:	e1 04       	cpc	r14, r1
    4a3a:	f1 04       	cpc	r15, r1
    4a3c:	39 f4       	brne	.+14     	; 0x4a4c <__pack_f+0x13a>
    4a3e:	27 ff       	sbrs	r18, 7
    4a40:	09 c0       	rjmp	.+18     	; 0x4a54 <__pack_f+0x142>
    4a42:	20 5c       	subi	r18, 0xC0	; 192
    4a44:	3f 4f       	sbci	r19, 0xFF	; 255
    4a46:	4f 4f       	sbci	r20, 0xFF	; 255
    4a48:	5f 4f       	sbci	r21, 0xFF	; 255
    4a4a:	04 c0       	rjmp	.+8      	; 0x4a54 <__pack_f+0x142>
    4a4c:	21 5c       	subi	r18, 0xC1	; 193
    4a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a50:	4f 4f       	sbci	r20, 0xFF	; 255
    4a52:	5f 4f       	sbci	r21, 0xFF	; 255
    4a54:	57 ff       	sbrs	r21, 7
    4a56:	05 c0       	rjmp	.+10     	; 0x4a62 <__pack_f+0x150>
    4a58:	56 95       	lsr	r21
    4a5a:	47 95       	ror	r20
    4a5c:	37 95       	ror	r19
    4a5e:	27 95       	ror	r18
    4a60:	01 96       	adiw	r24, 0x01	; 1
    4a62:	97 e0       	ldi	r25, 0x07	; 7
    4a64:	56 95       	lsr	r21
    4a66:	47 95       	ror	r20
    4a68:	37 95       	ror	r19
    4a6a:	27 95       	ror	r18
    4a6c:	9a 95       	dec	r25
    4a6e:	d1 f7       	brne	.-12     	; 0x4a64 <__pack_f+0x152>
    4a70:	05 c0       	rjmp	.+10     	; 0x4a7c <__pack_f+0x16a>
    4a72:	8f ef       	ldi	r24, 0xFF	; 255
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	a9 01       	movw	r20, r18
    4a7c:	78 2f       	mov	r23, r24
    4a7e:	77 95       	ror	r23
    4a80:	77 27       	eor	r23, r23
    4a82:	77 95       	ror	r23
    4a84:	14 2f       	mov	r17, r20
    4a86:	1f 77       	andi	r17, 0x7F	; 127
    4a88:	60 2f       	mov	r22, r16
    4a8a:	67 95       	ror	r22
    4a8c:	66 27       	eor	r22, r22
    4a8e:	67 95       	ror	r22
    4a90:	86 95       	lsr	r24
    4a92:	f1 2f       	mov	r31, r17
    4a94:	f7 2b       	or	r31, r23
    4a96:	e8 2f       	mov	r30, r24
    4a98:	e6 2b       	or	r30, r22
    4a9a:	62 2f       	mov	r22, r18
    4a9c:	73 2f       	mov	r23, r19
    4a9e:	8f 2f       	mov	r24, r31
    4aa0:	9e 2f       	mov	r25, r30
    4aa2:	1f 91       	pop	r17
    4aa4:	0f 91       	pop	r16
    4aa6:	ff 90       	pop	r15
    4aa8:	ef 90       	pop	r14
    4aaa:	df 90       	pop	r13
    4aac:	cf 90       	pop	r12
    4aae:	08 95       	ret

00004ab0 <__unpack_f>:
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	db 01       	movw	r26, r22
    4ab4:	20 81       	ld	r18, Z
    4ab6:	31 81       	ldd	r19, Z+1	; 0x01
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	48 2f       	mov	r20, r24
    4abc:	4f 77       	andi	r20, 0x7F	; 127
    4abe:	50 e0       	ldi	r21, 0x00	; 0
    4ac0:	98 2f       	mov	r25, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	99 27       	eor	r25, r25
    4ac6:	99 1f       	adc	r25, r25
    4ac8:	63 81       	ldd	r22, Z+3	; 0x03
    4aca:	86 2f       	mov	r24, r22
    4acc:	88 0f       	add	r24, r24
    4ace:	89 2b       	or	r24, r25
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	66 1f       	adc	r22, r22
    4ad4:	66 27       	eor	r22, r22
    4ad6:	66 1f       	adc	r22, r22
    4ad8:	11 96       	adiw	r26, 0x01	; 1
    4ada:	6c 93       	st	X, r22
    4adc:	11 97       	sbiw	r26, 0x01	; 1
    4ade:	00 97       	sbiw	r24, 0x00	; 0
    4ae0:	69 f5       	brne	.+90     	; 0x4b3c <__unpack_f+0x8c>
    4ae2:	21 15       	cp	r18, r1
    4ae4:	31 05       	cpc	r19, r1
    4ae6:	41 05       	cpc	r20, r1
    4ae8:	51 05       	cpc	r21, r1
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__unpack_f+0x40>
    4aec:	82 e0       	ldi	r24, 0x02	; 2
    4aee:	2f c0       	rjmp	.+94     	; 0x4b4e <__unpack_f+0x9e>
    4af0:	82 e8       	ldi	r24, 0x82	; 130
    4af2:	9f ef       	ldi	r25, 0xFF	; 255
    4af4:	13 96       	adiw	r26, 0x03	; 3
    4af6:	9c 93       	st	X, r25
    4af8:	8e 93       	st	-X, r24
    4afa:	12 97       	sbiw	r26, 0x02	; 2
    4afc:	67 e0       	ldi	r22, 0x07	; 7
    4afe:	22 0f       	add	r18, r18
    4b00:	33 1f       	adc	r19, r19
    4b02:	44 1f       	adc	r20, r20
    4b04:	55 1f       	adc	r21, r21
    4b06:	6a 95       	dec	r22
    4b08:	d1 f7       	brne	.-12     	; 0x4afe <__unpack_f+0x4e>
    4b0a:	83 e0       	ldi	r24, 0x03	; 3
    4b0c:	8c 93       	st	X, r24
    4b0e:	0d c0       	rjmp	.+26     	; 0x4b2a <__unpack_f+0x7a>
    4b10:	22 0f       	add	r18, r18
    4b12:	33 1f       	adc	r19, r19
    4b14:	44 1f       	adc	r20, r20
    4b16:	55 1f       	adc	r21, r21
    4b18:	12 96       	adiw	r26, 0x02	; 2
    4b1a:	8d 91       	ld	r24, X+
    4b1c:	9c 91       	ld	r25, X
    4b1e:	13 97       	sbiw	r26, 0x03	; 3
    4b20:	01 97       	sbiw	r24, 0x01	; 1
    4b22:	13 96       	adiw	r26, 0x03	; 3
    4b24:	9c 93       	st	X, r25
    4b26:	8e 93       	st	-X, r24
    4b28:	12 97       	sbiw	r26, 0x02	; 2
    4b2a:	20 30       	cpi	r18, 0x00	; 0
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	38 07       	cpc	r19, r24
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	48 07       	cpc	r20, r24
    4b34:	80 e4       	ldi	r24, 0x40	; 64
    4b36:	58 07       	cpc	r21, r24
    4b38:	58 f3       	brcs	.-42     	; 0x4b10 <__unpack_f+0x60>
    4b3a:	22 c0       	rjmp	.+68     	; 0x4b80 <__unpack_f+0xd0>
    4b3c:	8f 3f       	cpi	r24, 0xFF	; 255
    4b3e:	91 05       	cpc	r25, r1
    4b40:	79 f4       	brne	.+30     	; 0x4b60 <__unpack_f+0xb0>
    4b42:	21 15       	cp	r18, r1
    4b44:	31 05       	cpc	r19, r1
    4b46:	41 05       	cpc	r20, r1
    4b48:	51 05       	cpc	r21, r1
    4b4a:	19 f4       	brne	.+6      	; 0x4b52 <__unpack_f+0xa2>
    4b4c:	84 e0       	ldi	r24, 0x04	; 4
    4b4e:	8c 93       	st	X, r24
    4b50:	08 95       	ret
    4b52:	44 ff       	sbrs	r20, 4
    4b54:	03 c0       	rjmp	.+6      	; 0x4b5c <__unpack_f+0xac>
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	8c 93       	st	X, r24
    4b5a:	12 c0       	rjmp	.+36     	; 0x4b80 <__unpack_f+0xd0>
    4b5c:	1c 92       	st	X, r1
    4b5e:	10 c0       	rjmp	.+32     	; 0x4b80 <__unpack_f+0xd0>
    4b60:	8f 57       	subi	r24, 0x7F	; 127
    4b62:	90 40       	sbci	r25, 0x00	; 0
    4b64:	13 96       	adiw	r26, 0x03	; 3
    4b66:	9c 93       	st	X, r25
    4b68:	8e 93       	st	-X, r24
    4b6a:	12 97       	sbiw	r26, 0x02	; 2
    4b6c:	83 e0       	ldi	r24, 0x03	; 3
    4b6e:	8c 93       	st	X, r24
    4b70:	87 e0       	ldi	r24, 0x07	; 7
    4b72:	22 0f       	add	r18, r18
    4b74:	33 1f       	adc	r19, r19
    4b76:	44 1f       	adc	r20, r20
    4b78:	55 1f       	adc	r21, r21
    4b7a:	8a 95       	dec	r24
    4b7c:	d1 f7       	brne	.-12     	; 0x4b72 <__unpack_f+0xc2>
    4b7e:	50 64       	ori	r21, 0x40	; 64
    4b80:	14 96       	adiw	r26, 0x04	; 4
    4b82:	2d 93       	st	X+, r18
    4b84:	3d 93       	st	X+, r19
    4b86:	4d 93       	st	X+, r20
    4b88:	5c 93       	st	X, r21
    4b8a:	17 97       	sbiw	r26, 0x07	; 7
    4b8c:	08 95       	ret

00004b8e <__fpcmp_parts_f>:
    4b8e:	ef 92       	push	r14
    4b90:	ff 92       	push	r15
    4b92:	0f 93       	push	r16
    4b94:	1f 93       	push	r17
    4b96:	fc 01       	movw	r30, r24
    4b98:	db 01       	movw	r26, r22
    4b9a:	80 81       	ld	r24, Z
    4b9c:	82 30       	cpi	r24, 0x02	; 2
    4b9e:	08 f4       	brcc	.+2      	; 0x4ba2 <__fpcmp_parts_f+0x14>
    4ba0:	47 c0       	rjmp	.+142    	; 0x4c30 <__fpcmp_parts_f+0xa2>
    4ba2:	9c 91       	ld	r25, X
    4ba4:	92 30       	cpi	r25, 0x02	; 2
    4ba6:	08 f4       	brcc	.+2      	; 0x4baa <__fpcmp_parts_f+0x1c>
    4ba8:	43 c0       	rjmp	.+134    	; 0x4c30 <__fpcmp_parts_f+0xa2>
    4baa:	84 30       	cpi	r24, 0x04	; 4
    4bac:	51 f4       	brne	.+20     	; 0x4bc2 <__fpcmp_parts_f+0x34>
    4bae:	81 81       	ldd	r24, Z+1	; 0x01
    4bb0:	94 30       	cpi	r25, 0x04	; 4
    4bb2:	a1 f5       	brne	.+104    	; 0x4c1c <__fpcmp_parts_f+0x8e>
    4bb4:	11 96       	adiw	r26, 0x01	; 1
    4bb6:	2c 91       	ld	r18, X
    4bb8:	11 97       	sbiw	r26, 0x01	; 1
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	28 1b       	sub	r18, r24
    4bbe:	31 09       	sbc	r19, r1
    4bc0:	3f c0       	rjmp	.+126    	; 0x4c40 <__fpcmp_parts_f+0xb2>
    4bc2:	94 30       	cpi	r25, 0x04	; 4
    4bc4:	21 f0       	breq	.+8      	; 0x4bce <__fpcmp_parts_f+0x40>
    4bc6:	82 30       	cpi	r24, 0x02	; 2
    4bc8:	31 f4       	brne	.+12     	; 0x4bd6 <__fpcmp_parts_f+0x48>
    4bca:	92 30       	cpi	r25, 0x02	; 2
    4bcc:	b9 f1       	breq	.+110    	; 0x4c3c <__fpcmp_parts_f+0xae>
    4bce:	11 96       	adiw	r26, 0x01	; 1
    4bd0:	8c 91       	ld	r24, X
    4bd2:	11 97       	sbiw	r26, 0x01	; 1
    4bd4:	2b c0       	rjmp	.+86     	; 0x4c2c <__fpcmp_parts_f+0x9e>
    4bd6:	81 81       	ldd	r24, Z+1	; 0x01
    4bd8:	92 30       	cpi	r25, 0x02	; 2
    4bda:	01 f1       	breq	.+64     	; 0x4c1c <__fpcmp_parts_f+0x8e>
    4bdc:	11 96       	adiw	r26, 0x01	; 1
    4bde:	9c 91       	ld	r25, X
    4be0:	11 97       	sbiw	r26, 0x01	; 1
    4be2:	89 17       	cp	r24, r25
    4be4:	d9 f4       	brne	.+54     	; 0x4c1c <__fpcmp_parts_f+0x8e>
    4be6:	42 81       	ldd	r20, Z+2	; 0x02
    4be8:	53 81       	ldd	r21, Z+3	; 0x03
    4bea:	12 96       	adiw	r26, 0x02	; 2
    4bec:	2d 91       	ld	r18, X+
    4bee:	3c 91       	ld	r19, X
    4bf0:	13 97       	sbiw	r26, 0x03	; 3
    4bf2:	24 17       	cp	r18, r20
    4bf4:	35 07       	cpc	r19, r21
    4bf6:	94 f0       	brlt	.+36     	; 0x4c1c <__fpcmp_parts_f+0x8e>
    4bf8:	42 17       	cp	r20, r18
    4bfa:	53 07       	cpc	r21, r19
    4bfc:	bc f0       	brlt	.+46     	; 0x4c2c <__fpcmp_parts_f+0x9e>
    4bfe:	e4 80       	ldd	r14, Z+4	; 0x04
    4c00:	f5 80       	ldd	r15, Z+5	; 0x05
    4c02:	06 81       	ldd	r16, Z+6	; 0x06
    4c04:	17 81       	ldd	r17, Z+7	; 0x07
    4c06:	14 96       	adiw	r26, 0x04	; 4
    4c08:	2d 91       	ld	r18, X+
    4c0a:	3d 91       	ld	r19, X+
    4c0c:	4d 91       	ld	r20, X+
    4c0e:	5c 91       	ld	r21, X
    4c10:	17 97       	sbiw	r26, 0x07	; 7
    4c12:	2e 15       	cp	r18, r14
    4c14:	3f 05       	cpc	r19, r15
    4c16:	40 07       	cpc	r20, r16
    4c18:	51 07       	cpc	r21, r17
    4c1a:	18 f4       	brcc	.+6      	; 0x4c22 <__fpcmp_parts_f+0x94>
    4c1c:	88 23       	and	r24, r24
    4c1e:	41 f0       	breq	.+16     	; 0x4c30 <__fpcmp_parts_f+0xa2>
    4c20:	0a c0       	rjmp	.+20     	; 0x4c36 <__fpcmp_parts_f+0xa8>
    4c22:	e2 16       	cp	r14, r18
    4c24:	f3 06       	cpc	r15, r19
    4c26:	04 07       	cpc	r16, r20
    4c28:	15 07       	cpc	r17, r21
    4c2a:	40 f4       	brcc	.+16     	; 0x4c3c <__fpcmp_parts_f+0xae>
    4c2c:	88 23       	and	r24, r24
    4c2e:	19 f0       	breq	.+6      	; 0x4c36 <__fpcmp_parts_f+0xa8>
    4c30:	21 e0       	ldi	r18, 0x01	; 1
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	05 c0       	rjmp	.+10     	; 0x4c40 <__fpcmp_parts_f+0xb2>
    4c36:	2f ef       	ldi	r18, 0xFF	; 255
    4c38:	3f ef       	ldi	r19, 0xFF	; 255
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <__fpcmp_parts_f+0xb2>
    4c3c:	20 e0       	ldi	r18, 0x00	; 0
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	c9 01       	movw	r24, r18
    4c42:	1f 91       	pop	r17
    4c44:	0f 91       	pop	r16
    4c46:	ff 90       	pop	r15
    4c48:	ef 90       	pop	r14
    4c4a:	08 95       	ret

00004c4c <__mulsi3>:
    4c4c:	62 9f       	mul	r22, r18
    4c4e:	d0 01       	movw	r26, r0
    4c50:	73 9f       	mul	r23, r19
    4c52:	f0 01       	movw	r30, r0
    4c54:	82 9f       	mul	r24, r18
    4c56:	e0 0d       	add	r30, r0
    4c58:	f1 1d       	adc	r31, r1
    4c5a:	64 9f       	mul	r22, r20
    4c5c:	e0 0d       	add	r30, r0
    4c5e:	f1 1d       	adc	r31, r1
    4c60:	92 9f       	mul	r25, r18
    4c62:	f0 0d       	add	r31, r0
    4c64:	83 9f       	mul	r24, r19
    4c66:	f0 0d       	add	r31, r0
    4c68:	74 9f       	mul	r23, r20
    4c6a:	f0 0d       	add	r31, r0
    4c6c:	65 9f       	mul	r22, r21
    4c6e:	f0 0d       	add	r31, r0
    4c70:	99 27       	eor	r25, r25
    4c72:	72 9f       	mul	r23, r18
    4c74:	b0 0d       	add	r27, r0
    4c76:	e1 1d       	adc	r30, r1
    4c78:	f9 1f       	adc	r31, r25
    4c7a:	63 9f       	mul	r22, r19
    4c7c:	b0 0d       	add	r27, r0
    4c7e:	e1 1d       	adc	r30, r1
    4c80:	f9 1f       	adc	r31, r25
    4c82:	bd 01       	movw	r22, r26
    4c84:	cf 01       	movw	r24, r30
    4c86:	11 24       	eor	r1, r1
    4c88:	08 95       	ret

00004c8a <__udivmodsi4>:
    4c8a:	a1 e2       	ldi	r26, 0x21	; 33
    4c8c:	1a 2e       	mov	r1, r26
    4c8e:	aa 1b       	sub	r26, r26
    4c90:	bb 1b       	sub	r27, r27
    4c92:	fd 01       	movw	r30, r26
    4c94:	0d c0       	rjmp	.+26     	; 0x4cb0 <__udivmodsi4_ep>

00004c96 <__udivmodsi4_loop>:
    4c96:	aa 1f       	adc	r26, r26
    4c98:	bb 1f       	adc	r27, r27
    4c9a:	ee 1f       	adc	r30, r30
    4c9c:	ff 1f       	adc	r31, r31
    4c9e:	a2 17       	cp	r26, r18
    4ca0:	b3 07       	cpc	r27, r19
    4ca2:	e4 07       	cpc	r30, r20
    4ca4:	f5 07       	cpc	r31, r21
    4ca6:	20 f0       	brcs	.+8      	; 0x4cb0 <__udivmodsi4_ep>
    4ca8:	a2 1b       	sub	r26, r18
    4caa:	b3 0b       	sbc	r27, r19
    4cac:	e4 0b       	sbc	r30, r20
    4cae:	f5 0b       	sbc	r31, r21

00004cb0 <__udivmodsi4_ep>:
    4cb0:	66 1f       	adc	r22, r22
    4cb2:	77 1f       	adc	r23, r23
    4cb4:	88 1f       	adc	r24, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	1a 94       	dec	r1
    4cba:	69 f7       	brne	.-38     	; 0x4c96 <__udivmodsi4_loop>
    4cbc:	60 95       	com	r22
    4cbe:	70 95       	com	r23
    4cc0:	80 95       	com	r24
    4cc2:	90 95       	com	r25
    4cc4:	9b 01       	movw	r18, r22
    4cc6:	ac 01       	movw	r20, r24
    4cc8:	bd 01       	movw	r22, r26
    4cca:	cf 01       	movw	r24, r30
    4ccc:	08 95       	ret

00004cce <__divmodsi4>:
    4cce:	97 fb       	bst	r25, 7
    4cd0:	09 2e       	mov	r0, r25
    4cd2:	05 26       	eor	r0, r21
    4cd4:	0e d0       	rcall	.+28     	; 0x4cf2 <__divmodsi4_neg1>
    4cd6:	57 fd       	sbrc	r21, 7
    4cd8:	04 d0       	rcall	.+8      	; 0x4ce2 <__divmodsi4_neg2>
    4cda:	d7 df       	rcall	.-82     	; 0x4c8a <__udivmodsi4>
    4cdc:	0a d0       	rcall	.+20     	; 0x4cf2 <__divmodsi4_neg1>
    4cde:	00 1c       	adc	r0, r0
    4ce0:	38 f4       	brcc	.+14     	; 0x4cf0 <__divmodsi4_exit>

00004ce2 <__divmodsi4_neg2>:
    4ce2:	50 95       	com	r21
    4ce4:	40 95       	com	r20
    4ce6:	30 95       	com	r19
    4ce8:	21 95       	neg	r18
    4cea:	3f 4f       	sbci	r19, 0xFF	; 255
    4cec:	4f 4f       	sbci	r20, 0xFF	; 255
    4cee:	5f 4f       	sbci	r21, 0xFF	; 255

00004cf0 <__divmodsi4_exit>:
    4cf0:	08 95       	ret

00004cf2 <__divmodsi4_neg1>:
    4cf2:	f6 f7       	brtc	.-4      	; 0x4cf0 <__divmodsi4_exit>
    4cf4:	90 95       	com	r25
    4cf6:	80 95       	com	r24
    4cf8:	70 95       	com	r23
    4cfa:	61 95       	neg	r22
    4cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    4d00:	9f 4f       	sbci	r25, 0xFF	; 255
    4d02:	08 95       	ret

00004d04 <__prologue_saves__>:
    4d04:	2f 92       	push	r2
    4d06:	3f 92       	push	r3
    4d08:	4f 92       	push	r4
    4d0a:	5f 92       	push	r5
    4d0c:	6f 92       	push	r6
    4d0e:	7f 92       	push	r7
    4d10:	8f 92       	push	r8
    4d12:	9f 92       	push	r9
    4d14:	af 92       	push	r10
    4d16:	bf 92       	push	r11
    4d18:	cf 92       	push	r12
    4d1a:	df 92       	push	r13
    4d1c:	ef 92       	push	r14
    4d1e:	ff 92       	push	r15
    4d20:	0f 93       	push	r16
    4d22:	1f 93       	push	r17
    4d24:	cf 93       	push	r28
    4d26:	df 93       	push	r29
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	ca 1b       	sub	r28, r26
    4d2e:	db 0b       	sbc	r29, r27
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	f8 94       	cli
    4d34:	de bf       	out	0x3e, r29	; 62
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	cd bf       	out	0x3d, r28	; 61
    4d3a:	09 94       	ijmp

00004d3c <__epilogue_restores__>:
    4d3c:	2a 88       	ldd	r2, Y+18	; 0x12
    4d3e:	39 88       	ldd	r3, Y+17	; 0x11
    4d40:	48 88       	ldd	r4, Y+16	; 0x10
    4d42:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d44:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d46:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d48:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d4e:	b9 84       	ldd	r11, Y+9	; 0x09
    4d50:	c8 84       	ldd	r12, Y+8	; 0x08
    4d52:	df 80       	ldd	r13, Y+7	; 0x07
    4d54:	ee 80       	ldd	r14, Y+6	; 0x06
    4d56:	fd 80       	ldd	r15, Y+5	; 0x05
    4d58:	0c 81       	ldd	r16, Y+4	; 0x04
    4d5a:	1b 81       	ldd	r17, Y+3	; 0x03
    4d5c:	aa 81       	ldd	r26, Y+2	; 0x02
    4d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    4d60:	ce 0f       	add	r28, r30
    4d62:	d1 1d       	adc	r29, r1
    4d64:	0f b6       	in	r0, 0x3f	; 63
    4d66:	f8 94       	cli
    4d68:	de bf       	out	0x3e, r29	; 62
    4d6a:	0f be       	out	0x3f, r0	; 63
    4d6c:	cd bf       	out	0x3d, r28	; 61
    4d6e:	ed 01       	movw	r28, r26
    4d70:	08 95       	ret

00004d72 <__tablejump2__>:
    4d72:	ee 0f       	add	r30, r30
    4d74:	ff 1f       	adc	r31, r31

00004d76 <__tablejump__>:
    4d76:	05 90       	lpm	r0, Z+
    4d78:	f4 91       	lpm	r31, Z+
    4d7a:	e0 2d       	mov	r30, r0
    4d7c:	09 94       	ijmp

00004d7e <malloc>:
    4d7e:	ef 92       	push	r14
    4d80:	ff 92       	push	r15
    4d82:	0f 93       	push	r16
    4d84:	1f 93       	push	r17
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	82 30       	cpi	r24, 0x02	; 2
    4d8c:	91 05       	cpc	r25, r1
    4d8e:	10 f4       	brcc	.+4      	; 0x4d94 <malloc+0x16>
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	c0 91 cc 03 	lds	r28, 0x03CC
    4d98:	d0 91 cd 03 	lds	r29, 0x03CD
    4d9c:	20 e0       	ldi	r18, 0x00	; 0
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	40 e0       	ldi	r20, 0x00	; 0
    4da2:	50 e0       	ldi	r21, 0x00	; 0
    4da4:	29 c0       	rjmp	.+82     	; 0x4df8 <malloc+0x7a>
    4da6:	68 81       	ld	r22, Y
    4da8:	79 81       	ldd	r23, Y+1	; 0x01
    4daa:	68 17       	cp	r22, r24
    4dac:	79 07       	cpc	r23, r25
    4dae:	d8 f0       	brcs	.+54     	; 0x4de6 <malloc+0x68>
    4db0:	68 17       	cp	r22, r24
    4db2:	79 07       	cpc	r23, r25
    4db4:	79 f4       	brne	.+30     	; 0x4dd4 <malloc+0x56>
    4db6:	8a 81       	ldd	r24, Y+2	; 0x02
    4db8:	9b 81       	ldd	r25, Y+3	; 0x03
    4dba:	21 15       	cp	r18, r1
    4dbc:	31 05       	cpc	r19, r1
    4dbe:	21 f0       	breq	.+8      	; 0x4dc8 <malloc+0x4a>
    4dc0:	f9 01       	movw	r30, r18
    4dc2:	93 83       	std	Z+3, r25	; 0x03
    4dc4:	82 83       	std	Z+2, r24	; 0x02
    4dc6:	04 c0       	rjmp	.+8      	; 0x4dd0 <malloc+0x52>
    4dc8:	90 93 cd 03 	sts	0x03CD, r25
    4dcc:	80 93 cc 03 	sts	0x03CC, r24
    4dd0:	de 01       	movw	r26, r28
    4dd2:	2a c0       	rjmp	.+84     	; 0x4e28 <malloc+0xaa>
    4dd4:	41 15       	cp	r20, r1
    4dd6:	51 05       	cpc	r21, r1
    4dd8:	19 f0       	breq	.+6      	; 0x4de0 <malloc+0x62>
    4dda:	64 17       	cp	r22, r20
    4ddc:	75 07       	cpc	r23, r21
    4dde:	18 f4       	brcc	.+6      	; 0x4de6 <malloc+0x68>
    4de0:	fe 01       	movw	r30, r28
    4de2:	ab 01       	movw	r20, r22
    4de4:	d9 01       	movw	r26, r18
    4de6:	9e 01       	movw	r18, r28
    4de8:	7a 81       	ldd	r23, Y+2	; 0x02
    4dea:	6b 81       	ldd	r22, Y+3	; 0x03
    4dec:	e7 2e       	mov	r14, r23
    4dee:	e7 01       	movw	r28, r14
    4df0:	7e 01       	movw	r14, r28
    4df2:	06 2f       	mov	r16, r22
    4df4:	f6 2e       	mov	r15, r22
    4df6:	e7 01       	movw	r28, r14
    4df8:	20 97       	sbiw	r28, 0x00	; 0
    4dfa:	a9 f6       	brne	.-86     	; 0x4da6 <malloc+0x28>
    4dfc:	41 15       	cp	r20, r1
    4dfe:	51 05       	cpc	r21, r1
    4e00:	f9 f0       	breq	.+62     	; 0x4e40 <malloc+0xc2>
    4e02:	48 1b       	sub	r20, r24
    4e04:	59 0b       	sbc	r21, r25
    4e06:	44 30       	cpi	r20, 0x04	; 4
    4e08:	51 05       	cpc	r21, r1
    4e0a:	80 f4       	brcc	.+32     	; 0x4e2c <malloc+0xae>
    4e0c:	82 81       	ldd	r24, Z+2	; 0x02
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	10 97       	sbiw	r26, 0x00	; 0
    4e12:	29 f0       	breq	.+10     	; 0x4e1e <malloc+0xa0>
    4e14:	13 96       	adiw	r26, 0x03	; 3
    4e16:	9c 93       	st	X, r25
    4e18:	8e 93       	st	-X, r24
    4e1a:	12 97       	sbiw	r26, 0x02	; 2
    4e1c:	04 c0       	rjmp	.+8      	; 0x4e26 <malloc+0xa8>
    4e1e:	90 93 cd 03 	sts	0x03CD, r25
    4e22:	80 93 cc 03 	sts	0x03CC, r24
    4e26:	df 01       	movw	r26, r30
    4e28:	12 96       	adiw	r26, 0x02	; 2
    4e2a:	45 c0       	rjmp	.+138    	; 0x4eb6 <malloc+0x138>
    4e2c:	df 01       	movw	r26, r30
    4e2e:	a4 0f       	add	r26, r20
    4e30:	b5 1f       	adc	r27, r21
    4e32:	8d 93       	st	X+, r24
    4e34:	9d 93       	st	X+, r25
    4e36:	42 50       	subi	r20, 0x02	; 2
    4e38:	50 40       	sbci	r21, 0x00	; 0
    4e3a:	51 83       	std	Z+1, r21	; 0x01
    4e3c:	40 83       	st	Z, r20
    4e3e:	3b c0       	rjmp	.+118    	; 0x4eb6 <malloc+0x138>
    4e40:	20 91 ca 03 	lds	r18, 0x03CA
    4e44:	30 91 cb 03 	lds	r19, 0x03CB
    4e48:	21 15       	cp	r18, r1
    4e4a:	31 05       	cpc	r19, r1
    4e4c:	41 f4       	brne	.+16     	; 0x4e5e <malloc+0xe0>
    4e4e:	20 91 4e 02 	lds	r18, 0x024E
    4e52:	30 91 4f 02 	lds	r19, 0x024F
    4e56:	30 93 cb 03 	sts	0x03CB, r19
    4e5a:	20 93 ca 03 	sts	0x03CA, r18
    4e5e:	20 91 50 02 	lds	r18, 0x0250
    4e62:	30 91 51 02 	lds	r19, 0x0251
    4e66:	21 15       	cp	r18, r1
    4e68:	31 05       	cpc	r19, r1
    4e6a:	41 f4       	brne	.+16     	; 0x4e7c <malloc+0xfe>
    4e6c:	2d b7       	in	r18, 0x3d	; 61
    4e6e:	3e b7       	in	r19, 0x3e	; 62
    4e70:	40 91 4c 02 	lds	r20, 0x024C
    4e74:	50 91 4d 02 	lds	r21, 0x024D
    4e78:	24 1b       	sub	r18, r20
    4e7a:	35 0b       	sbc	r19, r21
    4e7c:	a0 91 ca 03 	lds	r26, 0x03CA
    4e80:	b0 91 cb 03 	lds	r27, 0x03CB
    4e84:	a2 17       	cp	r26, r18
    4e86:	b3 07       	cpc	r27, r19
    4e88:	a0 f4       	brcc	.+40     	; 0x4eb2 <malloc+0x134>
    4e8a:	2a 1b       	sub	r18, r26
    4e8c:	3b 0b       	sbc	r19, r27
    4e8e:	28 17       	cp	r18, r24
    4e90:	39 07       	cpc	r19, r25
    4e92:	78 f0       	brcs	.+30     	; 0x4eb2 <malloc+0x134>
    4e94:	ac 01       	movw	r20, r24
    4e96:	4e 5f       	subi	r20, 0xFE	; 254
    4e98:	5f 4f       	sbci	r21, 0xFF	; 255
    4e9a:	24 17       	cp	r18, r20
    4e9c:	35 07       	cpc	r19, r21
    4e9e:	48 f0       	brcs	.+18     	; 0x4eb2 <malloc+0x134>
    4ea0:	4a 0f       	add	r20, r26
    4ea2:	5b 1f       	adc	r21, r27
    4ea4:	50 93 cb 03 	sts	0x03CB, r21
    4ea8:	40 93 ca 03 	sts	0x03CA, r20
    4eac:	8d 93       	st	X+, r24
    4eae:	9d 93       	st	X+, r25
    4eb0:	02 c0       	rjmp	.+4      	; 0x4eb6 <malloc+0x138>
    4eb2:	a0 e0       	ldi	r26, 0x00	; 0
    4eb4:	b0 e0       	ldi	r27, 0x00	; 0
    4eb6:	cd 01       	movw	r24, r26
    4eb8:	cd b7       	in	r28, 0x3d	; 61
    4eba:	de b7       	in	r29, 0x3e	; 62
    4ebc:	e6 e0       	ldi	r30, 0x06	; 6
    4ebe:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__epilogue_restores__+0x18>

00004ec2 <free>:
    4ec2:	cf 93       	push	r28
    4ec4:	df 93       	push	r29
    4ec6:	00 97       	sbiw	r24, 0x00	; 0
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <free+0xa>
    4eca:	8f c0       	rjmp	.+286    	; 0x4fea <free+0x128>
    4ecc:	fc 01       	movw	r30, r24
    4ece:	32 97       	sbiw	r30, 0x02	; 2
    4ed0:	13 82       	std	Z+3, r1	; 0x03
    4ed2:	12 82       	std	Z+2, r1	; 0x02
    4ed4:	60 91 cc 03 	lds	r22, 0x03CC
    4ed8:	70 91 cd 03 	lds	r23, 0x03CD
    4edc:	61 15       	cp	r22, r1
    4ede:	71 05       	cpc	r23, r1
    4ee0:	81 f4       	brne	.+32     	; 0x4f02 <free+0x40>
    4ee2:	20 81       	ld	r18, Z
    4ee4:	31 81       	ldd	r19, Z+1	; 0x01
    4ee6:	28 0f       	add	r18, r24
    4ee8:	39 1f       	adc	r19, r25
    4eea:	80 91 ca 03 	lds	r24, 0x03CA
    4eee:	90 91 cb 03 	lds	r25, 0x03CB
    4ef2:	82 17       	cp	r24, r18
    4ef4:	93 07       	cpc	r25, r19
    4ef6:	61 f5       	brne	.+88     	; 0x4f50 <free+0x8e>
    4ef8:	f0 93 cb 03 	sts	0x03CB, r31
    4efc:	e0 93 ca 03 	sts	0x03CA, r30
    4f00:	74 c0       	rjmp	.+232    	; 0x4fea <free+0x128>
    4f02:	eb 01       	movw	r28, r22
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	ce 17       	cp	r28, r30
    4f0a:	df 07       	cpc	r29, r31
    4f0c:	40 f4       	brcc	.+16     	; 0x4f1e <free+0x5c>
    4f0e:	2a 81       	ldd	r18, Y+2	; 0x02
    4f10:	3b 81       	ldd	r19, Y+3	; 0x03
    4f12:	ce 01       	movw	r24, r28
    4f14:	21 15       	cp	r18, r1
    4f16:	31 05       	cpc	r19, r1
    4f18:	01 f1       	breq	.+64     	; 0x4f5a <free+0x98>
    4f1a:	e9 01       	movw	r28, r18
    4f1c:	f5 cf       	rjmp	.-22     	; 0x4f08 <free+0x46>
    4f1e:	d3 83       	std	Z+3, r29	; 0x03
    4f20:	c2 83       	std	Z+2, r28	; 0x02
    4f22:	df 01       	movw	r26, r30
    4f24:	4d 91       	ld	r20, X+
    4f26:	5d 91       	ld	r21, X+
    4f28:	9d 01       	movw	r18, r26
    4f2a:	24 0f       	add	r18, r20
    4f2c:	35 1f       	adc	r19, r21
    4f2e:	c2 17       	cp	r28, r18
    4f30:	d3 07       	cpc	r29, r19
    4f32:	61 f4       	brne	.+24     	; 0x4f4c <free+0x8a>
    4f34:	28 81       	ld	r18, Y
    4f36:	39 81       	ldd	r19, Y+1	; 0x01
    4f38:	24 0f       	add	r18, r20
    4f3a:	35 1f       	adc	r19, r21
    4f3c:	2e 5f       	subi	r18, 0xFE	; 254
    4f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f40:	31 83       	std	Z+1, r19	; 0x01
    4f42:	20 83       	st	Z, r18
    4f44:	2a 81       	ldd	r18, Y+2	; 0x02
    4f46:	3b 81       	ldd	r19, Y+3	; 0x03
    4f48:	33 83       	std	Z+3, r19	; 0x03
    4f4a:	22 83       	std	Z+2, r18	; 0x02
    4f4c:	00 97       	sbiw	r24, 0x00	; 0
    4f4e:	29 f4       	brne	.+10     	; 0x4f5a <free+0x98>
    4f50:	f0 93 cd 03 	sts	0x03CD, r31
    4f54:	e0 93 cc 03 	sts	0x03CC, r30
    4f58:	48 c0       	rjmp	.+144    	; 0x4fea <free+0x128>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	13 96       	adiw	r26, 0x03	; 3
    4f5e:	fc 93       	st	X, r31
    4f60:	ee 93       	st	-X, r30
    4f62:	12 97       	sbiw	r26, 0x02	; 2
    4f64:	ec 01       	movw	r28, r24
    4f66:	49 91       	ld	r20, Y+
    4f68:	59 91       	ld	r21, Y+
    4f6a:	c4 0f       	add	r28, r20
    4f6c:	d5 1f       	adc	r29, r21
    4f6e:	ec 17       	cp	r30, r28
    4f70:	fd 07       	cpc	r31, r29
    4f72:	79 f4       	brne	.+30     	; 0x4f92 <free+0xd0>
    4f74:	20 81       	ld	r18, Z
    4f76:	31 81       	ldd	r19, Z+1	; 0x01
    4f78:	24 0f       	add	r18, r20
    4f7a:	35 1f       	adc	r19, r21
    4f7c:	2e 5f       	subi	r18, 0xFE	; 254
    4f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f80:	11 96       	adiw	r26, 0x01	; 1
    4f82:	3c 93       	st	X, r19
    4f84:	2e 93       	st	-X, r18
    4f86:	22 81       	ldd	r18, Z+2	; 0x02
    4f88:	33 81       	ldd	r19, Z+3	; 0x03
    4f8a:	13 96       	adiw	r26, 0x03	; 3
    4f8c:	3c 93       	st	X, r19
    4f8e:	2e 93       	st	-X, r18
    4f90:	12 97       	sbiw	r26, 0x02	; 2
    4f92:	e0 e0       	ldi	r30, 0x00	; 0
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	db 01       	movw	r26, r22
    4f98:	12 96       	adiw	r26, 0x02	; 2
    4f9a:	8d 91       	ld	r24, X+
    4f9c:	9c 91       	ld	r25, X
    4f9e:	13 97       	sbiw	r26, 0x03	; 3
    4fa0:	00 97       	sbiw	r24, 0x00	; 0
    4fa2:	21 f0       	breq	.+8      	; 0x4fac <free+0xea>
    4fa4:	e6 2f       	mov	r30, r22
    4fa6:	f7 2f       	mov	r31, r23
    4fa8:	bc 01       	movw	r22, r24
    4faa:	f5 cf       	rjmp	.-22     	; 0x4f96 <free+0xd4>
    4fac:	9b 01       	movw	r18, r22
    4fae:	2e 5f       	subi	r18, 0xFE	; 254
    4fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fb2:	db 01       	movw	r26, r22
    4fb4:	8d 91       	ld	r24, X+
    4fb6:	9c 91       	ld	r25, X
    4fb8:	11 97       	sbiw	r26, 0x01	; 1
    4fba:	82 0f       	add	r24, r18
    4fbc:	93 1f       	adc	r25, r19
    4fbe:	40 91 ca 03 	lds	r20, 0x03CA
    4fc2:	50 91 cb 03 	lds	r21, 0x03CB
    4fc6:	48 17       	cp	r20, r24
    4fc8:	59 07       	cpc	r21, r25
    4fca:	79 f4       	brne	.+30     	; 0x4fea <free+0x128>
    4fcc:	30 97       	sbiw	r30, 0x00	; 0
    4fce:	29 f4       	brne	.+10     	; 0x4fda <free+0x118>
    4fd0:	10 92 cd 03 	sts	0x03CD, r1
    4fd4:	10 92 cc 03 	sts	0x03CC, r1
    4fd8:	02 c0       	rjmp	.+4      	; 0x4fde <free+0x11c>
    4fda:	13 82       	std	Z+3, r1	; 0x03
    4fdc:	12 82       	std	Z+2, r1	; 0x02
    4fde:	22 50       	subi	r18, 0x02	; 2
    4fe0:	30 40       	sbci	r19, 0x00	; 0
    4fe2:	30 93 cb 03 	sts	0x03CB, r19
    4fe6:	20 93 ca 03 	sts	0x03CA, r18
    4fea:	df 91       	pop	r29
    4fec:	cf 91       	pop	r28
    4fee:	08 95       	ret

00004ff0 <do_random>:
    4ff0:	a0 e0       	ldi	r26, 0x00	; 0
    4ff2:	b0 e0       	ldi	r27, 0x00	; 0
    4ff4:	ee ef       	ldi	r30, 0xFE	; 254
    4ff6:	f7 e2       	ldi	r31, 0x27	; 39
    4ff8:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <__prologue_saves__+0x10>
    4ffc:	ec 01       	movw	r28, r24
    4ffe:	e8 80       	ld	r14, Y
    5000:	f9 80       	ldd	r15, Y+1	; 0x01
    5002:	0a 81       	ldd	r16, Y+2	; 0x02
    5004:	1b 81       	ldd	r17, Y+3	; 0x03
    5006:	e1 14       	cp	r14, r1
    5008:	f1 04       	cpc	r15, r1
    500a:	01 05       	cpc	r16, r1
    500c:	11 05       	cpc	r17, r1
    500e:	41 f4       	brne	.+16     	; 0x5020 <do_random+0x30>
    5010:	84 e2       	ldi	r24, 0x24	; 36
    5012:	e8 2e       	mov	r14, r24
    5014:	89 ed       	ldi	r24, 0xD9	; 217
    5016:	f8 2e       	mov	r15, r24
    5018:	8b e5       	ldi	r24, 0x5B	; 91
    501a:	08 2f       	mov	r16, r24
    501c:	87 e0       	ldi	r24, 0x07	; 7
    501e:	18 2f       	mov	r17, r24
    5020:	c8 01       	movw	r24, r16
    5022:	b7 01       	movw	r22, r14
    5024:	2d e1       	ldi	r18, 0x1D	; 29
    5026:	33 ef       	ldi	r19, 0xF3	; 243
    5028:	41 e0       	ldi	r20, 0x01	; 1
    502a:	50 e0       	ldi	r21, 0x00	; 0
    502c:	0e 94 67 26 	call	0x4cce	; 0x4cce <__divmodsi4>
    5030:	27 ea       	ldi	r18, 0xA7	; 167
    5032:	31 e4       	ldi	r19, 0x41	; 65
    5034:	40 e0       	ldi	r20, 0x00	; 0
    5036:	50 e0       	ldi	r21, 0x00	; 0
    5038:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    503c:	5b 01       	movw	r10, r22
    503e:	6c 01       	movw	r12, r24
    5040:	c8 01       	movw	r24, r16
    5042:	b7 01       	movw	r22, r14
    5044:	2d e1       	ldi	r18, 0x1D	; 29
    5046:	33 ef       	ldi	r19, 0xF3	; 243
    5048:	41 e0       	ldi	r20, 0x01	; 1
    504a:	50 e0       	ldi	r21, 0x00	; 0
    504c:	0e 94 67 26 	call	0x4cce	; 0x4cce <__divmodsi4>
    5050:	ca 01       	movw	r24, r20
    5052:	b9 01       	movw	r22, r18
    5054:	2c ee       	ldi	r18, 0xEC	; 236
    5056:	34 ef       	ldi	r19, 0xF4	; 244
    5058:	4f ef       	ldi	r20, 0xFF	; 255
    505a:	5f ef       	ldi	r21, 0xFF	; 255
    505c:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <__mulsi3>
    5060:	9b 01       	movw	r18, r22
    5062:	ac 01       	movw	r20, r24
    5064:	2a 0d       	add	r18, r10
    5066:	3b 1d       	adc	r19, r11
    5068:	4c 1d       	adc	r20, r12
    506a:	5d 1d       	adc	r21, r13
    506c:	57 ff       	sbrs	r21, 7
    506e:	04 c0       	rjmp	.+8      	; 0x5078 <do_random+0x88>
    5070:	21 50       	subi	r18, 0x01	; 1
    5072:	30 40       	sbci	r19, 0x00	; 0
    5074:	40 40       	sbci	r20, 0x00	; 0
    5076:	50 48       	sbci	r21, 0x80	; 128
    5078:	28 83       	st	Y, r18
    507a:	39 83       	std	Y+1, r19	; 0x01
    507c:	4a 83       	std	Y+2, r20	; 0x02
    507e:	5b 83       	std	Y+3, r21	; 0x03
    5080:	5f 77       	andi	r21, 0x7F	; 127
    5082:	b9 01       	movw	r22, r18
    5084:	ca 01       	movw	r24, r20
    5086:	cd b7       	in	r28, 0x3d	; 61
    5088:	de b7       	in	r29, 0x3e	; 62
    508a:	ea e0       	ldi	r30, 0x0A	; 10
    508c:	0c 94 a6 26 	jmp	0x4d4c	; 0x4d4c <__epilogue_restores__+0x10>

00005090 <random_r>:
    5090:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <do_random>
    5094:	08 95       	ret

00005096 <random>:
    5096:	82 e5       	ldi	r24, 0x52	; 82
    5098:	92 e0       	ldi	r25, 0x02	; 2
    509a:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <do_random>
    509e:	08 95       	ret

000050a0 <srandom>:
    50a0:	60 93 52 02 	sts	0x0252, r22
    50a4:	70 93 53 02 	sts	0x0253, r23
    50a8:	80 93 54 02 	sts	0x0254, r24
    50ac:	90 93 55 02 	sts	0x0255, r25
    50b0:	08 95       	ret

000050b2 <realloc>:
    50b2:	a0 e0       	ldi	r26, 0x00	; 0
    50b4:	b0 e0       	ldi	r27, 0x00	; 0
    50b6:	ef e5       	ldi	r30, 0x5F	; 95
    50b8:	f8 e2       	ldi	r31, 0x28	; 40
    50ba:	0c 94 86 26 	jmp	0x4d0c	; 0x4d0c <__prologue_saves__+0x8>
    50be:	ec 01       	movw	r28, r24
    50c0:	cb 01       	movw	r24, r22
    50c2:	20 97       	sbiw	r28, 0x00	; 0
    50c4:	41 f4       	brne	.+16     	; 0x50d6 <realloc+0x24>
    50c6:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    50ca:	e8 2e       	mov	r14, r24
    50cc:	e7 01       	movw	r28, r14
    50ce:	7e 01       	movw	r14, r28
    50d0:	f9 2e       	mov	r15, r25
    50d2:	e7 01       	movw	r28, r14
    50d4:	b9 c0       	rjmp	.+370    	; 0x5248 <realloc+0x196>
    50d6:	be ef       	ldi	r27, 0xFE	; 254
    50d8:	eb 2e       	mov	r14, r27
    50da:	bf ef       	ldi	r27, 0xFF	; 255
    50dc:	fb 2e       	mov	r15, r27
    50de:	ec 0e       	add	r14, r28
    50e0:	fd 1e       	adc	r15, r29
    50e2:	ae 01       	movw	r20, r28
    50e4:	46 0f       	add	r20, r22
    50e6:	57 1f       	adc	r21, r23
    50e8:	4e 15       	cp	r20, r14
    50ea:	5f 05       	cpc	r21, r15
    50ec:	08 f4       	brcc	.+2      	; 0x50f0 <realloc+0x3e>
    50ee:	aa c0       	rjmp	.+340    	; 0x5244 <realloc+0x192>
    50f0:	d7 01       	movw	r26, r14
    50f2:	2d 91       	ld	r18, X+
    50f4:	3c 91       	ld	r19, X
    50f6:	11 97       	sbiw	r26, 0x01	; 1
    50f8:	26 17       	cp	r18, r22
    50fa:	37 07       	cpc	r19, r23
    50fc:	c0 f0       	brcs	.+48     	; 0x512e <realloc+0x7c>
    50fe:	25 30       	cpi	r18, 0x05	; 5
    5100:	31 05       	cpc	r19, r1
    5102:	08 f4       	brcc	.+2      	; 0x5106 <realloc+0x54>
    5104:	a1 c0       	rjmp	.+322    	; 0x5248 <realloc+0x196>
    5106:	b9 01       	movw	r22, r18
    5108:	64 50       	subi	r22, 0x04	; 4
    510a:	70 40       	sbci	r23, 0x00	; 0
    510c:	68 17       	cp	r22, r24
    510e:	79 07       	cpc	r23, r25
    5110:	08 f4       	brcc	.+2      	; 0x5114 <realloc+0x62>
    5112:	9a c0       	rjmp	.+308    	; 0x5248 <realloc+0x196>
    5114:	22 50       	subi	r18, 0x02	; 2
    5116:	30 40       	sbci	r19, 0x00	; 0
    5118:	28 1b       	sub	r18, r24
    511a:	39 0b       	sbc	r19, r25
    511c:	fa 01       	movw	r30, r20
    511e:	21 93       	st	Z+, r18
    5120:	31 93       	st	Z+, r19
    5122:	8d 93       	st	X+, r24
    5124:	9c 93       	st	X, r25
    5126:	cf 01       	movw	r24, r30
    5128:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    512c:	8d c0       	rjmp	.+282    	; 0x5248 <realloc+0x196>
    512e:	6b 01       	movw	r12, r22
    5130:	c2 1a       	sub	r12, r18
    5132:	d3 0a       	sbc	r13, r19
    5134:	5e 01       	movw	r10, r28
    5136:	a2 0e       	add	r10, r18
    5138:	b3 1e       	adc	r11, r19
    513a:	e0 91 cc 03 	lds	r30, 0x03CC
    513e:	f0 91 cd 03 	lds	r31, 0x03CD
    5142:	66 24       	eor	r6, r6
    5144:	77 24       	eor	r7, r7
    5146:	00 e0       	ldi	r16, 0x00	; 0
    5148:	10 e0       	ldi	r17, 0x00	; 0
    514a:	45 c0       	rjmp	.+138    	; 0x51d6 <realloc+0x124>
    514c:	ea 15       	cp	r30, r10
    514e:	fb 05       	cpc	r31, r11
    5150:	b9 f5       	brne	.+110    	; 0x51c0 <realloc+0x10e>
    5152:	60 81       	ld	r22, Z
    5154:	71 81       	ldd	r23, Z+1	; 0x01
    5156:	a2 e0       	ldi	r26, 0x02	; 2
    5158:	8a 2e       	mov	r8, r26
    515a:	91 2c       	mov	r9, r1
    515c:	86 0e       	add	r8, r22
    515e:	97 1e       	adc	r9, r23
    5160:	8c 14       	cp	r8, r12
    5162:	9d 04       	cpc	r9, r13
    5164:	68 f1       	brcs	.+90     	; 0x51c0 <realloc+0x10e>
    5166:	8b 01       	movw	r16, r22
    5168:	0c 19       	sub	r16, r12
    516a:	1d 09       	sbc	r17, r13
    516c:	0e 5f       	subi	r16, 0xFE	; 254
    516e:	1f 4f       	sbci	r17, 0xFF	; 255
    5170:	b2 80       	ldd	r11, Z+2	; 0x02
    5172:	a3 80       	ldd	r10, Z+3	; 0x03
    5174:	05 30       	cpi	r16, 0x05	; 5
    5176:	11 05       	cpc	r17, r1
    5178:	60 f0       	brcs	.+24     	; 0x5192 <realloc+0xe0>
    517a:	fa 01       	movw	r30, r20
    517c:	b2 82       	std	Z+2, r11	; 0x02
    517e:	a3 82       	std	Z+3, r10	; 0x03
    5180:	6c 19       	sub	r22, r12
    5182:	7d 09       	sbc	r23, r13
    5184:	71 83       	std	Z+1, r23	; 0x01
    5186:	60 83       	st	Z, r22
    5188:	d7 01       	movw	r26, r14
    518a:	11 96       	adiw	r26, 0x01	; 1
    518c:	9c 93       	st	X, r25
    518e:	8e 93       	st	-X, r24
    5190:	09 c0       	rjmp	.+18     	; 0x51a4 <realloc+0xf2>
    5192:	2e 5f       	subi	r18, 0xFE	; 254
    5194:	3f 4f       	sbci	r19, 0xFF	; 255
    5196:	26 0f       	add	r18, r22
    5198:	37 1f       	adc	r19, r23
    519a:	f7 01       	movw	r30, r14
    519c:	31 83       	std	Z+1, r19	; 0x01
    519e:	20 83       	st	Z, r18
    51a0:	eb 2d       	mov	r30, r11
    51a2:	fa 2d       	mov	r31, r10
    51a4:	61 14       	cp	r6, r1
    51a6:	71 04       	cpc	r7, r1
    51a8:	31 f0       	breq	.+12     	; 0x51b6 <realloc+0x104>
    51aa:	d3 01       	movw	r26, r6
    51ac:	13 96       	adiw	r26, 0x03	; 3
    51ae:	fc 93       	st	X, r31
    51b0:	ee 93       	st	-X, r30
    51b2:	12 97       	sbiw	r26, 0x02	; 2
    51b4:	49 c0       	rjmp	.+146    	; 0x5248 <realloc+0x196>
    51b6:	f0 93 cd 03 	sts	0x03CD, r31
    51ba:	e0 93 cc 03 	sts	0x03CC, r30
    51be:	44 c0       	rjmp	.+136    	; 0x5248 <realloc+0x196>
    51c0:	60 81       	ld	r22, Z
    51c2:	71 81       	ldd	r23, Z+1	; 0x01
    51c4:	06 17       	cp	r16, r22
    51c6:	17 07       	cpc	r17, r23
    51c8:	08 f4       	brcc	.+2      	; 0x51cc <realloc+0x11a>
    51ca:	8b 01       	movw	r16, r22
    51cc:	3f 01       	movw	r6, r30
    51ce:	72 81       	ldd	r23, Z+2	; 0x02
    51d0:	63 81       	ldd	r22, Z+3	; 0x03
    51d2:	e7 2f       	mov	r30, r23
    51d4:	f6 2f       	mov	r31, r22
    51d6:	30 97       	sbiw	r30, 0x00	; 0
    51d8:	09 f0       	breq	.+2      	; 0x51dc <realloc+0x12a>
    51da:	b8 cf       	rjmp	.-144    	; 0x514c <realloc+0x9a>
    51dc:	20 91 ca 03 	lds	r18, 0x03CA
    51e0:	30 91 cb 03 	lds	r19, 0x03CB
    51e4:	2a 15       	cp	r18, r10
    51e6:	3b 05       	cpc	r19, r11
    51e8:	e9 f4       	brne	.+58     	; 0x5224 <realloc+0x172>
    51ea:	08 17       	cp	r16, r24
    51ec:	19 07       	cpc	r17, r25
    51ee:	d0 f4       	brcc	.+52     	; 0x5224 <realloc+0x172>
    51f0:	20 91 50 02 	lds	r18, 0x0250
    51f4:	30 91 51 02 	lds	r19, 0x0251
    51f8:	21 15       	cp	r18, r1
    51fa:	31 05       	cpc	r19, r1
    51fc:	41 f4       	brne	.+16     	; 0x520e <realloc+0x15c>
    51fe:	2d b7       	in	r18, 0x3d	; 61
    5200:	3e b7       	in	r19, 0x3e	; 62
    5202:	60 91 4c 02 	lds	r22, 0x024C
    5206:	70 91 4d 02 	lds	r23, 0x024D
    520a:	26 1b       	sub	r18, r22
    520c:	37 0b       	sbc	r19, r23
    520e:	42 17       	cp	r20, r18
    5210:	53 07       	cpc	r21, r19
    5212:	c0 f4       	brcc	.+48     	; 0x5244 <realloc+0x192>
    5214:	50 93 cb 03 	sts	0x03CB, r21
    5218:	40 93 ca 03 	sts	0x03CA, r20
    521c:	f7 01       	movw	r30, r14
    521e:	91 83       	std	Z+1, r25	; 0x01
    5220:	80 83       	st	Z, r24
    5222:	12 c0       	rjmp	.+36     	; 0x5248 <realloc+0x196>
    5224:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <malloc>
    5228:	8c 01       	movw	r16, r24
    522a:	00 97       	sbiw	r24, 0x00	; 0
    522c:	59 f0       	breq	.+22     	; 0x5244 <realloc+0x192>
    522e:	d7 01       	movw	r26, r14
    5230:	4d 91       	ld	r20, X+
    5232:	5c 91       	ld	r21, X
    5234:	be 01       	movw	r22, r28
    5236:	0e 94 69 29 	call	0x52d2	; 0x52d2 <memcpy>
    523a:	ce 01       	movw	r24, r28
    523c:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <free>
    5240:	e8 01       	movw	r28, r16
    5242:	02 c0       	rjmp	.+4      	; 0x5248 <realloc+0x196>
    5244:	c0 e0       	ldi	r28, 0x00	; 0
    5246:	d0 e0       	ldi	r29, 0x00	; 0
    5248:	ce 01       	movw	r24, r28
    524a:	cd b7       	in	r28, 0x3d	; 61
    524c:	de b7       	in	r29, 0x3e	; 62
    524e:	ee e0       	ldi	r30, 0x0E	; 14
    5250:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__epilogue_restores__+0x8>

00005254 <atol>:
    5254:	1f 93       	push	r17
    5256:	fc 01       	movw	r30, r24
    5258:	99 27       	eor	r25, r25
    525a:	88 27       	eor	r24, r24
    525c:	bc 01       	movw	r22, r24
    525e:	e8 94       	clt
    5260:	11 91       	ld	r17, Z+
    5262:	10 32       	cpi	r17, 0x20	; 32
    5264:	e9 f3       	breq	.-6      	; 0x5260 <atol+0xc>
    5266:	19 30       	cpi	r17, 0x09	; 9
    5268:	10 f0       	brcs	.+4      	; 0x526e <atol+0x1a>
    526a:	1e 30       	cpi	r17, 0x0E	; 14
    526c:	c8 f3       	brcs	.-14     	; 0x5260 <atol+0xc>
    526e:	1b 32       	cpi	r17, 0x2B	; 43
    5270:	51 f0       	breq	.+20     	; 0x5286 <atol+0x32>
    5272:	1d 32       	cpi	r17, 0x2D	; 45
    5274:	49 f4       	brne	.+18     	; 0x5288 <atol+0x34>
    5276:	68 94       	set
    5278:	06 c0       	rjmp	.+12     	; 0x5286 <atol+0x32>
    527a:	0e 94 2f 2a 	call	0x545e	; 0x545e <__mulsi_const_10>
    527e:	61 0f       	add	r22, r17
    5280:	71 1d       	adc	r23, r1
    5282:	81 1d       	adc	r24, r1
    5284:	91 1d       	adc	r25, r1
    5286:	11 91       	ld	r17, Z+
    5288:	10 53       	subi	r17, 0x30	; 48
    528a:	1a 30       	cpi	r17, 0x0A	; 10
    528c:	b0 f3       	brcs	.-20     	; 0x527a <atol+0x26>
    528e:	3e f4       	brtc	.+14     	; 0x529e <atol+0x4a>
    5290:	90 95       	com	r25
    5292:	80 95       	com	r24
    5294:	70 95       	com	r23
    5296:	61 95       	neg	r22
    5298:	7f 4f       	sbci	r23, 0xFF	; 255
    529a:	8f 4f       	sbci	r24, 0xFF	; 255
    529c:	9f 4f       	sbci	r25, 0xFF	; 255
    529e:	1f 91       	pop	r17
    52a0:	08 95       	ret

000052a2 <isspace>:
    52a2:	91 11       	cpse	r25, r1
    52a4:	2c c1       	rjmp	.+600    	; 0x54fe <__ctype_isfalse>
    52a6:	80 32       	cpi	r24, 0x20	; 32
    52a8:	19 f0       	breq	.+6      	; 0x52b0 <isspace+0xe>
    52aa:	89 50       	subi	r24, 0x09	; 9
    52ac:	85 50       	subi	r24, 0x05	; 5
    52ae:	d0 f7       	brcc	.-12     	; 0x52a4 <isspace+0x2>
    52b0:	08 95       	ret

000052b2 <tolower>:
    52b2:	91 11       	cpse	r25, r1
    52b4:	08 95       	ret
    52b6:	81 54       	subi	r24, 0x41	; 65
    52b8:	8a 51       	subi	r24, 0x1A	; 26
    52ba:	08 f4       	brcc	.+2      	; 0x52be <tolower+0xc>
    52bc:	80 5e       	subi	r24, 0xE0	; 224
    52be:	85 5a       	subi	r24, 0xA5	; 165
    52c0:	08 95       	ret

000052c2 <toupper>:
    52c2:	91 11       	cpse	r25, r1
    52c4:	08 95       	ret
    52c6:	81 56       	subi	r24, 0x61	; 97
    52c8:	8a 51       	subi	r24, 0x1A	; 26
    52ca:	08 f4       	brcc	.+2      	; 0x52ce <toupper+0xc>
    52cc:	80 52       	subi	r24, 0x20	; 32
    52ce:	85 58       	subi	r24, 0x85	; 133
    52d0:	08 95       	ret

000052d2 <memcpy>:
    52d2:	fb 01       	movw	r30, r22
    52d4:	dc 01       	movw	r26, r24
    52d6:	02 c0       	rjmp	.+4      	; 0x52dc <memcpy+0xa>
    52d8:	01 90       	ld	r0, Z+
    52da:	0d 92       	st	X+, r0
    52dc:	41 50       	subi	r20, 0x01	; 1
    52de:	50 40       	sbci	r21, 0x00	; 0
    52e0:	d8 f7       	brcc	.-10     	; 0x52d8 <memcpy+0x6>
    52e2:	08 95       	ret

000052e4 <strcat>:
    52e4:	fb 01       	movw	r30, r22
    52e6:	dc 01       	movw	r26, r24
    52e8:	0d 90       	ld	r0, X+
    52ea:	00 20       	and	r0, r0
    52ec:	e9 f7       	brne	.-6      	; 0x52e8 <strcat+0x4>
    52ee:	11 97       	sbiw	r26, 0x01	; 1
    52f0:	01 90       	ld	r0, Z+
    52f2:	0d 92       	st	X+, r0
    52f4:	00 20       	and	r0, r0
    52f6:	e1 f7       	brne	.-8      	; 0x52f0 <strcat+0xc>
    52f8:	08 95       	ret

000052fa <strchr>:
    52fa:	fc 01       	movw	r30, r24
    52fc:	81 91       	ld	r24, Z+
    52fe:	86 17       	cp	r24, r22
    5300:	21 f0       	breq	.+8      	; 0x530a <strchr+0x10>
    5302:	88 23       	and	r24, r24
    5304:	d9 f7       	brne	.-10     	; 0x52fc <strchr+0x2>
    5306:	99 27       	eor	r25, r25
    5308:	08 95       	ret
    530a:	31 97       	sbiw	r30, 0x01	; 1
    530c:	cf 01       	movw	r24, r30
    530e:	08 95       	ret

00005310 <strcmp>:
    5310:	fb 01       	movw	r30, r22
    5312:	dc 01       	movw	r26, r24
    5314:	8d 91       	ld	r24, X+
    5316:	01 90       	ld	r0, Z+
    5318:	80 19       	sub	r24, r0
    531a:	01 10       	cpse	r0, r1
    531c:	d9 f3       	breq	.-10     	; 0x5314 <strcmp+0x4>
    531e:	99 0b       	sbc	r25, r25
    5320:	08 95       	ret

00005322 <strcpy>:
    5322:	fb 01       	movw	r30, r22
    5324:	dc 01       	movw	r26, r24
    5326:	01 90       	ld	r0, Z+
    5328:	0d 92       	st	X+, r0
    532a:	00 20       	and	r0, r0
    532c:	e1 f7       	brne	.-8      	; 0x5326 <strcpy+0x4>
    532e:	08 95       	ret

00005330 <strncmp>:
    5330:	fb 01       	movw	r30, r22
    5332:	dc 01       	movw	r26, r24
    5334:	41 50       	subi	r20, 0x01	; 1
    5336:	50 40       	sbci	r21, 0x00	; 0
    5338:	30 f0       	brcs	.+12     	; 0x5346 <strncmp+0x16>
    533a:	8d 91       	ld	r24, X+
    533c:	01 90       	ld	r0, Z+
    533e:	80 19       	sub	r24, r0
    5340:	19 f4       	brne	.+6      	; 0x5348 <strncmp+0x18>
    5342:	00 20       	and	r0, r0
    5344:	b9 f7       	brne	.-18     	; 0x5334 <strncmp+0x4>
    5346:	88 1b       	sub	r24, r24
    5348:	99 0b       	sbc	r25, r25
    534a:	08 95       	ret

0000534c <strncpy>:
    534c:	fb 01       	movw	r30, r22
    534e:	dc 01       	movw	r26, r24
    5350:	41 50       	subi	r20, 0x01	; 1
    5352:	50 40       	sbci	r21, 0x00	; 0
    5354:	48 f0       	brcs	.+18     	; 0x5368 <strncpy+0x1c>
    5356:	01 90       	ld	r0, Z+
    5358:	0d 92       	st	X+, r0
    535a:	00 20       	and	r0, r0
    535c:	c9 f7       	brne	.-14     	; 0x5350 <strncpy+0x4>
    535e:	01 c0       	rjmp	.+2      	; 0x5362 <strncpy+0x16>
    5360:	1d 92       	st	X+, r1
    5362:	41 50       	subi	r20, 0x01	; 1
    5364:	50 40       	sbci	r21, 0x00	; 0
    5366:	e0 f7       	brcc	.-8      	; 0x5360 <strncpy+0x14>
    5368:	08 95       	ret

0000536a <strrchr>:
    536a:	fc 01       	movw	r30, r24
    536c:	81 e0       	ldi	r24, 0x01	; 1
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	01 90       	ld	r0, Z+
    5372:	06 16       	cp	r0, r22
    5374:	09 f4       	brne	.+2      	; 0x5378 <strrchr+0xe>
    5376:	cf 01       	movw	r24, r30
    5378:	00 20       	and	r0, r0
    537a:	d1 f7       	brne	.-12     	; 0x5370 <strrchr+0x6>
    537c:	01 97       	sbiw	r24, 0x01	; 1
    537e:	08 95       	ret

00005380 <strstr>:
    5380:	fb 01       	movw	r30, r22
    5382:	51 91       	ld	r21, Z+
    5384:	55 23       	and	r21, r21
    5386:	a9 f0       	breq	.+42     	; 0x53b2 <strstr+0x32>
    5388:	bf 01       	movw	r22, r30
    538a:	dc 01       	movw	r26, r24
    538c:	4d 91       	ld	r20, X+
    538e:	45 17       	cp	r20, r21
    5390:	41 11       	cpse	r20, r1
    5392:	e1 f7       	brne	.-8      	; 0x538c <strstr+0xc>
    5394:	59 f4       	brne	.+22     	; 0x53ac <strstr+0x2c>
    5396:	cd 01       	movw	r24, r26
    5398:	01 90       	ld	r0, Z+
    539a:	00 20       	and	r0, r0
    539c:	49 f0       	breq	.+18     	; 0x53b0 <strstr+0x30>
    539e:	4d 91       	ld	r20, X+
    53a0:	40 15       	cp	r20, r0
    53a2:	41 11       	cpse	r20, r1
    53a4:	c9 f3       	breq	.-14     	; 0x5398 <strstr+0x18>
    53a6:	fb 01       	movw	r30, r22
    53a8:	41 11       	cpse	r20, r1
    53aa:	ef cf       	rjmp	.-34     	; 0x538a <strstr+0xa>
    53ac:	81 e0       	ldi	r24, 0x01	; 1
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	01 97       	sbiw	r24, 0x01	; 1
    53b2:	08 95       	ret

000053b4 <itoa>:
    53b4:	fb 01       	movw	r30, r22
    53b6:	9f 01       	movw	r18, r30
    53b8:	e8 94       	clt
    53ba:	42 30       	cpi	r20, 0x02	; 2
    53bc:	c4 f0       	brlt	.+48     	; 0x53ee <itoa+0x3a>
    53be:	45 32       	cpi	r20, 0x25	; 37
    53c0:	b4 f4       	brge	.+44     	; 0x53ee <itoa+0x3a>
    53c2:	4a 30       	cpi	r20, 0x0A	; 10
    53c4:	29 f4       	brne	.+10     	; 0x53d0 <itoa+0x1c>
    53c6:	97 fb       	bst	r25, 7
    53c8:	1e f4       	brtc	.+6      	; 0x53d0 <itoa+0x1c>
    53ca:	90 95       	com	r25
    53cc:	81 95       	neg	r24
    53ce:	9f 4f       	sbci	r25, 0xFF	; 255
    53d0:	64 2f       	mov	r22, r20
    53d2:	77 27       	eor	r23, r23
    53d4:	0e 94 92 2a 	call	0x5524	; 0x5524 <__udivmodhi4>
    53d8:	80 5d       	subi	r24, 0xD0	; 208
    53da:	8a 33       	cpi	r24, 0x3A	; 58
    53dc:	0c f0       	brlt	.+2      	; 0x53e0 <itoa+0x2c>
    53de:	89 5d       	subi	r24, 0xD9	; 217
    53e0:	81 93       	st	Z+, r24
    53e2:	cb 01       	movw	r24, r22
    53e4:	00 97       	sbiw	r24, 0x00	; 0
    53e6:	a1 f7       	brne	.-24     	; 0x53d0 <itoa+0x1c>
    53e8:	16 f4       	brtc	.+4      	; 0x53ee <itoa+0x3a>
    53ea:	5d e2       	ldi	r21, 0x2D	; 45
    53ec:	51 93       	st	Z+, r21
    53ee:	10 82       	st	Z, r1
    53f0:	c9 01       	movw	r24, r18
    53f2:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <strrev>

000053f6 <ltoa>:
    53f6:	fa 01       	movw	r30, r20
    53f8:	cf 93       	push	r28
    53fa:	ff 93       	push	r31
    53fc:	ef 93       	push	r30
    53fe:	22 30       	cpi	r18, 0x02	; 2
    5400:	44 f1       	brlt	.+80     	; 0x5452 <ltoa+0x5c>
    5402:	25 32       	cpi	r18, 0x25	; 37
    5404:	34 f5       	brge	.+76     	; 0x5452 <ltoa+0x5c>
    5406:	c2 2f       	mov	r28, r18
    5408:	e8 94       	clt
    540a:	ca 30       	cpi	r28, 0x0A	; 10
    540c:	49 f4       	brne	.+18     	; 0x5420 <ltoa+0x2a>
    540e:	97 fb       	bst	r25, 7
    5410:	3e f4       	brtc	.+14     	; 0x5420 <ltoa+0x2a>
    5412:	90 95       	com	r25
    5414:	80 95       	com	r24
    5416:	70 95       	com	r23
    5418:	61 95       	neg	r22
    541a:	7f 4f       	sbci	r23, 0xFF	; 255
    541c:	8f 4f       	sbci	r24, 0xFF	; 255
    541e:	9f 4f       	sbci	r25, 0xFF	; 255
    5420:	2c 2f       	mov	r18, r28
    5422:	33 27       	eor	r19, r19
    5424:	44 27       	eor	r20, r20
    5426:	55 27       	eor	r21, r21
    5428:	ff 93       	push	r31
    542a:	ef 93       	push	r30
    542c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    5430:	ef 91       	pop	r30
    5432:	ff 91       	pop	r31
    5434:	60 5d       	subi	r22, 0xD0	; 208
    5436:	6a 33       	cpi	r22, 0x3A	; 58
    5438:	0c f0       	brlt	.+2      	; 0x543c <ltoa+0x46>
    543a:	69 5d       	subi	r22, 0xD9	; 217
    543c:	61 93       	st	Z+, r22
    543e:	b9 01       	movw	r22, r18
    5440:	ca 01       	movw	r24, r20
    5442:	60 50       	subi	r22, 0x00	; 0
    5444:	70 40       	sbci	r23, 0x00	; 0
    5446:	80 40       	sbci	r24, 0x00	; 0
    5448:	90 40       	sbci	r25, 0x00	; 0
    544a:	51 f7       	brne	.-44     	; 0x5420 <ltoa+0x2a>
    544c:	16 f4       	brtc	.+4      	; 0x5452 <ltoa+0x5c>
    544e:	cd e2       	ldi	r28, 0x2D	; 45
    5450:	c1 93       	st	Z+, r28
    5452:	10 82       	st	Z, r1
    5454:	8f 91       	pop	r24
    5456:	9f 91       	pop	r25
    5458:	cf 91       	pop	r28
    545a:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <strrev>

0000545e <__mulsi_const_10>:
    545e:	59 2f       	mov	r21, r25
    5460:	48 2f       	mov	r20, r24
    5462:	37 2f       	mov	r19, r23
    5464:	26 2f       	mov	r18, r22
    5466:	66 0f       	add	r22, r22
    5468:	77 1f       	adc	r23, r23
    546a:	88 1f       	adc	r24, r24
    546c:	99 1f       	adc	r25, r25
    546e:	66 0f       	add	r22, r22
    5470:	77 1f       	adc	r23, r23
    5472:	88 1f       	adc	r24, r24
    5474:	99 1f       	adc	r25, r25
    5476:	62 0f       	add	r22, r18
    5478:	73 1f       	adc	r23, r19
    547a:	84 1f       	adc	r24, r20
    547c:	95 1f       	adc	r25, r21
    547e:	66 0f       	add	r22, r22
    5480:	77 1f       	adc	r23, r23
    5482:	88 1f       	adc	r24, r24
    5484:	99 1f       	adc	r25, r25
    5486:	08 95       	ret

00005488 <ultoa>:
    5488:	fa 01       	movw	r30, r20
    548a:	cf 93       	push	r28
    548c:	ff 93       	push	r31
    548e:	ef 93       	push	r30
    5490:	22 30       	cpi	r18, 0x02	; 2
    5492:	cc f0       	brlt	.+50     	; 0x54c6 <ultoa+0x3e>
    5494:	25 32       	cpi	r18, 0x25	; 37
    5496:	bc f4       	brge	.+46     	; 0x54c6 <ultoa+0x3e>
    5498:	c2 2f       	mov	r28, r18
    549a:	2c 2f       	mov	r18, r28
    549c:	33 27       	eor	r19, r19
    549e:	44 27       	eor	r20, r20
    54a0:	55 27       	eor	r21, r21
    54a2:	ff 93       	push	r31
    54a4:	ef 93       	push	r30
    54a6:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <__udivmodsi4>
    54aa:	ef 91       	pop	r30
    54ac:	ff 91       	pop	r31
    54ae:	60 5d       	subi	r22, 0xD0	; 208
    54b0:	6a 33       	cpi	r22, 0x3A	; 58
    54b2:	0c f0       	brlt	.+2      	; 0x54b6 <ultoa+0x2e>
    54b4:	69 5d       	subi	r22, 0xD9	; 217
    54b6:	61 93       	st	Z+, r22
    54b8:	b9 01       	movw	r22, r18
    54ba:	ca 01       	movw	r24, r20
    54bc:	60 50       	subi	r22, 0x00	; 0
    54be:	70 40       	sbci	r23, 0x00	; 0
    54c0:	80 40       	sbci	r24, 0x00	; 0
    54c2:	90 40       	sbci	r25, 0x00	; 0
    54c4:	51 f7       	brne	.-44     	; 0x549a <ultoa+0x12>
    54c6:	10 82       	st	Z, r1
    54c8:	8f 91       	pop	r24
    54ca:	9f 91       	pop	r25
    54cc:	cf 91       	pop	r28
    54ce:	0c 94 82 2a 	jmp	0x5504	; 0x5504 <strrev>

000054d2 <__eerd_byte_m328p>:
    54d2:	f9 99       	sbic	0x1f, 1	; 31
    54d4:	fe cf       	rjmp	.-4      	; 0x54d2 <__eerd_byte_m328p>
    54d6:	92 bd       	out	0x22, r25	; 34
    54d8:	81 bd       	out	0x21, r24	; 33
    54da:	f8 9a       	sbi	0x1f, 0	; 31
    54dc:	99 27       	eor	r25, r25
    54de:	80 b5       	in	r24, 0x20	; 32
    54e0:	08 95       	ret

000054e2 <__eewr_byte_m328p>:
    54e2:	26 2f       	mov	r18, r22

000054e4 <__eewr_r18_m328p>:
    54e4:	f9 99       	sbic	0x1f, 1	; 31
    54e6:	fe cf       	rjmp	.-4      	; 0x54e4 <__eewr_r18_m328p>
    54e8:	1f ba       	out	0x1f, r1	; 31
    54ea:	92 bd       	out	0x22, r25	; 34
    54ec:	81 bd       	out	0x21, r24	; 33
    54ee:	20 bd       	out	0x20, r18	; 32
    54f0:	0f b6       	in	r0, 0x3f	; 63
    54f2:	f8 94       	cli
    54f4:	fa 9a       	sbi	0x1f, 2	; 31
    54f6:	f9 9a       	sbi	0x1f, 1	; 31
    54f8:	0f be       	out	0x3f, r0	; 63
    54fa:	01 96       	adiw	r24, 0x01	; 1
    54fc:	08 95       	ret

000054fe <__ctype_isfalse>:
    54fe:	99 27       	eor	r25, r25
    5500:	88 27       	eor	r24, r24

00005502 <__ctype_istrue>:
    5502:	08 95       	ret

00005504 <strrev>:
    5504:	dc 01       	movw	r26, r24
    5506:	fc 01       	movw	r30, r24
    5508:	67 2f       	mov	r22, r23
    550a:	71 91       	ld	r23, Z+
    550c:	77 23       	and	r23, r23
    550e:	e1 f7       	brne	.-8      	; 0x5508 <strrev+0x4>
    5510:	32 97       	sbiw	r30, 0x02	; 2
    5512:	04 c0       	rjmp	.+8      	; 0x551c <strrev+0x18>
    5514:	7c 91       	ld	r23, X
    5516:	6d 93       	st	X+, r22
    5518:	70 83       	st	Z, r23
    551a:	62 91       	ld	r22, -Z
    551c:	ae 17       	cp	r26, r30
    551e:	bf 07       	cpc	r27, r31
    5520:	c8 f3       	brcs	.-14     	; 0x5514 <strrev+0x10>
    5522:	08 95       	ret

00005524 <__udivmodhi4>:
    5524:	aa 1b       	sub	r26, r26
    5526:	bb 1b       	sub	r27, r27
    5528:	51 e1       	ldi	r21, 0x11	; 17
    552a:	07 c0       	rjmp	.+14     	; 0x553a <__udivmodhi4_ep>

0000552c <__udivmodhi4_loop>:
    552c:	aa 1f       	adc	r26, r26
    552e:	bb 1f       	adc	r27, r27
    5530:	a6 17       	cp	r26, r22
    5532:	b7 07       	cpc	r27, r23
    5534:	10 f0       	brcs	.+4      	; 0x553a <__udivmodhi4_ep>
    5536:	a6 1b       	sub	r26, r22
    5538:	b7 0b       	sbc	r27, r23

0000553a <__udivmodhi4_ep>:
    553a:	88 1f       	adc	r24, r24
    553c:	99 1f       	adc	r25, r25
    553e:	5a 95       	dec	r21
    5540:	a9 f7       	brne	.-22     	; 0x552c <__udivmodhi4_loop>
    5542:	80 95       	com	r24
    5544:	90 95       	com	r25
    5546:	bc 01       	movw	r22, r24
    5548:	cd 01       	movw	r24, r26
    554a:	08 95       	ret

0000554c <_exit>:
    554c:	f8 94       	cli

0000554e <__stop_program>:
    554e:	ff cf       	rjmp	.-2      	; 0x554e <__stop_program>
